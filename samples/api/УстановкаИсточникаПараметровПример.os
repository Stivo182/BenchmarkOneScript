#Использовать benchmark
#Использовать "../benchmarks"

// Метод, возвращающий коллекцию множителей
Функция ПолучитьМножители() Экспорт
	Множители = Новый Массив();
	Множители.Добавить(3);
	Множители.Добавить(300);
	Возврат Множители;
КонецФункции

// Метод, возвращающий наборы параметров для бенчмарка
Функция ПолучитьПараметрыБенчмарка() Экспорт

	Наборы = Новый ТаблицаЗначений();
	Наборы.Колонки.Добавить("Число");
	Наборы.Колонки.Добавить("ТипАлгоритма");
	
	// Набор 1: Маленькое число, итеративный алгоритм
	Набор = Наборы.Добавить();
	Набор.Число = 13;
	Набор.ТипАлгоритма = "Итеративный";
	
	// Набор 2: Среднее число, рекурсивный алгоритм
	Набор = Наборы.Добавить();
	Набор.Число = 18;
	Набор.ТипАлгоритма = "Рекурсивный";
	
	// Набор 3: Большое число, итеративный алгоритм
	Набор = Наборы.Добавить();
	Набор.Число = 23;
	Набор.ТипАлгоритма = "Итеративный";
	
	Возврат Наборы;

КонецФункции

Тип = Тип("БенчмаркИсточникПараметров");

// Устанавливаем источник параметров для поля Множитель
Конфигурация = Новый КонфигурацияБенчмарков(Тип);
Конфигурация.ОчиститьИсточникиПараметров(); // Очищаем существуюие источники параметров
Конфигурация.ДобавитьИсточникПараметров("Множитель", Новый Делегат(ЭтотОбъект, "ПолучитьМножители"));

// Устанавливаем источник параметров для параметров метода бенчмарка
ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(Тип);
ДескрипторБенчмарка = ДескрипторыБенчмарков.НайтиПоИмени("БенчмаркФакториала");
ДескрипторБенчмарка.ОчиститьИсточникиПараметров(); // Очищаем существуюие источники параметров
ДескрипторБенчмарка.ДобавитьИсточникПараметров(Новый Делегат(ЭтотОбъект, "ПолучитьПараметрыБенчмарка"));

Бенчмаркинг.Запустить(ДескрипторБенчмарка, Конфигурация);