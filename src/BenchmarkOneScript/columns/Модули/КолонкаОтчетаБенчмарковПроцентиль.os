#Использовать delegate
#Использовать fluent

// Создает экземпляр колонки
//
// Параметры:
//   Процентиль - Число
//
// Возвращаемое значение:
//   КолонкаОтчетаБенчмарков
Функция Создать(Процентиль) Экспорт
	
	Колонка = Новый КолонкаОтчетаБенчмарков(ИмяКолонки(Процентиль));
	Колонка.Заголовок = "P" + Процентиль;
	Колонка.Описание = СтрШаблон("%1-й процентиль", Процентиль);
	Колонка.ЕдиницаИзмерения = ЕдиницыИзмеренийБенчмарков.Наносекунда;
	Колонка.ЗначениеДелегат = Делегаты.Создать(ЭтотОбъект, "Значение");

	Возврат Колонка;

КонецФункции

// Возвращает значение колонки
//
// Параметры:
//   СтрокаРезультата - СтрокаТаблицыЗначений - см. ЗапускательБенчмарков.НоваяТаблицаРезультатовЗапусков
//   Колонка - КолонкаОтчетаБенчмарков
//
// Возвращаемое значение:
//   Число
Функция Значение(СтрокаРезультата, Колонка) Экспорт // BSLLS:UnusedParameters-off
	
	Процентиль = ПроцентильПоКолонке(Колонка.Имя);

	Возврат СтрокаРезультата.Статистика.Квантиль(Процентиль / 100);

КонецФункции

// Создает экземпляр колонки по имении
//
// Параметры:
//   ИмяКолонки - Строка, Массив из Строка - Имена колонок
//
// Возвращаемое значение:
//   Массив из КолонкаОтчетаБенчмарков
Функция СоздатьПоИмени(ИмяКолонки) Экспорт

	Если ТипЗнч(ИмяКолонки) = Тип("Массив") Тогда
		ИменаКолонок = ИмяКолонки;
	Иначе
		ИменаКолонок = Новый Массив();
		ИменаКолонок.Добавить(ИмяКолонки);
	КонецЕсли;

	Процентили = Новый Массив();
	Для Каждого Имя Из ИменаКолонок Цикл

		Если Не ЭтоИмяКолонки(Имя) Тогда
			Продолжить;
		КонецЕсли;

		Если Имя = КолонкиОтчетаБенчмарков.Процентиль Тогда
			Для Каждого Процентиль Из ПроцентилиПоУмолчанию() Цикл
				Процентили.Добавить(Процентиль);
			КонецЦикла;
		Иначе	
			Процентиль = Сред(Имя, СтрДлина(Префикс() + 1));
			Процентили.Добавить(СтрокаВЧисло(Процентиль));
		КонецЕсли;

	КонецЦикла;

	Процентили = ПроцессорыКоллекций.ИзКоллекции(Процентили)
		.Различные()
		.Сортировать()
		.ВМассив();

	Колонки = Новый Массив();
	Для Каждого Процентиль Из Процентили Цикл
		Колонки.Добавить(Создать(Процентиль));
	КонецЦикла;

	Возврат Колонки;

КонецФункции

// Имя колонки
//
// Параметры:
//   Процентиль - Число, Неопределено
//
// Возвращаемое значение:
//   Строка
Функция ИмяКолонки(Процентиль) Экспорт
	Возврат Префикс() + Процентиль;
КонецФункции

// Имя колонки является колонкой процентеля
//
// Параметры:
//   ИмяКолонки - Строка
//
// Возвращаемое значение:
//   Булево
Функция ЭтоИмяКолонки(ИмяКолонки) Экспорт
	Возврат ИмяКолонки = КолонкиОтчетаБенчмарков.Процентиль Или СтрНачинаетсяС(ИмяКолонки, Префикс());
КонецФункции

// Процентили по умолчанию
//
// Возвращаемое значение:
//   Массив из Число
//
// BSLLS:MagicNumber-off
Функция ПроцентилиПоУмолчанию() Экспорт

	Процентили = Новый Массив();
	Процентили.Добавить(0);
	Процентили.Добавить(25);
	Процентили.Добавить(50);
	Процентили.Добавить(67);
	Процентили.Добавить(80);
	Процентили.Добавить(85);
	Процентили.Добавить(90);
	Процентили.Добавить(95);
	Процентили.Добавить(100);

	Возврат Процентили;
	
КонецФункции

Функция ПроцентильПоКолонке(ИмяКолонки)
	Возврат СтрокаВЧисло(СтрЗаменить(ИмяКолонки, Префикс(), ""));
КонецФункции

Функция Префикс()
	Возврат "Процентиль_";
КонецФункции

Функция СтрокаВЧисло(Строка) Экспорт
	
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	Возврат ОписаниеТипа.ПривестиЗначение(Строка);

КонецФункции