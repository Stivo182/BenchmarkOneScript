// BSLLS:MissingVariablesDescription-off

#Использовать fs
#Использовать logos

&Опция(Имя = "r recursive", Описание = "Рекурсивный поиск в поддиректориях")
&Флаг
&ПоУмолчанию(Ложь)
Перем _Рекурсивно; // Булево

&Опция(Имя = "m memory", Описание = "Включить мониторинг использования памяти")
&Флаг
Перем _МониторингПамяти; // Булево

&Опция(Имя = "iterationCount", Описание = "Количество измерительных итераций")
&ТЧисло
Перем _КоличествоИтераций; // Число

&Опция(Имя = "iterationTime", Описание = "Минимальное время выполнения одной итерации в миллисекундах")
&ТЧисло
Перем _МинимальноеВремяИтерации; // Число

&Опция(Имя = "warmupCount", Описание = "Количество прогревочных итераций")
&ТЧисло
Перем _КоличествоПрогревочныхИтераций; // Число

&Опция(Имя = "invocationCount", Описание = "Количество вызовов метода за итерацию")
&ТЧисло
Перем _КоличествоВызововЗаИтерацию; // Число

&Опция(Имя = "e exporters", Описание = "Форматы экспорта результатов через запятую (md, json, xml, html)")
&ТСтрока
Перем _Экспортеры; // Строка

&Опция(Имя = "a artifacts", Описание = "Каталог для сохранения результатов")
&ТСтрока
Перем _КаталогАртефактов; // Строка

&Опция(Имя = "coldstart", Описание = "Стратегия 'Холодный запуск'")
&Флаг
Перем _ХолодныйЗапуск; // Булево, Неопределено

&Опция(Имя = "throughput", Описание = "Стратегия 'Пропускная способность'")
&Флаг
Перем _ПропускнаяСпособность; // Булево, Неопределено

&Опция(Имя = "c config", Описание = "Файл конфигурации бенчмарков в формате JSON")
&ТСтрока
Перем _ФайлКонфигурации; // Строка

&Опция(Имя = "runtime", Описание = "Версии OneScript через запятую (current, stable, dev, x.x.x)")
&ТСтрока
Перем _ИсполняющаяСреда; // Строка, Неопределено

&Опция(Имя = "worker", Описание = "Режим worker")
&Флаг
&ПоУмолчанию(Ложь)
&СкрытьВСправке
Перем _ЭтоВоркер; // Булево

&Аргумент(Имя = "FILE", Описание = "Каталог, полный путь к файлу или имя файла в текущей директории")
&ТМассивСтрок
Перем _МассивФайлов; // Массив из Строка

&КомандаПриложения(Имя = "run", Описание = "Запуск бенчмарков")
Процедура ПриСозданииОбъекта()
КонецПроцедуры

&ВыполнениеКоманды 
Процедура Запустить() Экспорт

	ПрочитатьРежимВоркер();

	Для Каждого Каталог Из КаталогиБенчмарков() Цикл
		Бенчмаркинг.ЗапуститьИзКаталога(Каталог, _Рекурсивно, ПрочитатьКонфигурацию());
	КонецЦикла;
	
	Для Каждого ИмяФайла Из ФайлыБенчмарков() Цикл
		Тип = Бенчмаркинг.ПодключитьКласс(ИмяФайла);
		Если Не Тип = Неопределено Тогда
			Конфигурация = Новый КонфигурацияБенчмарков(Тип);
			Конфигурация.Объединить(ПрочитатьКонфигурацию());
			Бенчмаркинг.Запустить(Тип, Конфигурация);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция КаталогиБенчмарков()
	
	Каталоги = Новый Массив();

	Для Каждого ИмяФайла Из _МассивФайлов Цикл
		Если ФС.КаталогСуществует(ИмяФайла) Тогда
			Каталоги.Добавить(ИмяФайла);
		КонецЕсли;
	КонецЦикла;

	Возврат Каталоги;

КонецФункции

Функция ФайлыБенчмарков()
	
	Файлы = Новый Массив();

	Для Каждого ИмяФайла Из _МассивФайлов Цикл
		Если Не ФС.КаталогСуществует(ИмяФайла) Тогда
			Файлы.Добавить(ПолноеИмяФайлаСценария(ИмяФайла));
		КонецЕсли;
	КонецЦикла;

	Возврат Файлы;
	
КонецФункции

Функция ПолноеИмяФайлаСценария(ИмяФайла)

	ВариантыПутей = Новый Массив();
	ВариантыПутей.Добавить(ИмяФайла);
	ВариантыПутей.Добавить(ОбъединитьПути(ТекущийКаталог(), ИмяФайла));
	ВариантыПутей.Добавить(ОбъединитьПути(ТекущийКаталог(), ИмяФайла + ".os"));

	Для Каждого ИмяФайла Из ВариантыПутей Цикл
		Если ФС.ФайлСуществует(ИмяФайла) Тогда
			Возврат ИмяФайла;
		КонецЕсли;
	КонецЦикла;

	ВызватьИсключение СтрШаблон("Файл <%1> не существует", ИмяФайла);

КонецФункции

Функция ПрочитатьКонфигурацию()
	
	Если ЗначениеЗаполнено(_ФайлКонфигурации) Тогда
		Сериализатор = Новый СериализаторКонфигурацииБенчмарков();
		Конфигурация = Сериализатор.ДесериализоватьИзJSON(_ФайлКонфигурации);
	Иначе
		Конфигурация = Новый КонфигурацияБенчмарков();
	КонецЕсли;

	Если _МониторингПамяти = Истина Тогда
		Конфигурация.ДобавитьМониторингПамяти();
	КонецЕсли;

	Если ЭтоЧисло(_КоличествоИтераций) Тогда
		Конфигурация.УстановитьКоличествоИтераций(_КоличествоИтераций);
	КонецЕсли;

	Если ЭтоЧисло(_МинимальноеВремяИтерации) Тогда
		Конфигурация.УстановитьМинимальноеВремяИтерации(_МинимальноеВремяИтерации);
	КонецЕсли;

	Если ЭтоЧисло(_КоличествоПрогревочныхИтераций) Тогда
		Конфигурация.УстановитьКоличествоПрогревочныхИтераций(_КоличествоПрогревочныхИтераций);
	КонецЕсли;

	Если ЭтоЧисло(_КоличествоВызововЗаИтерацию) Тогда
		Конфигурация.УстановитьКоличествоВызововЗаИтерацию(_КоличествоВызововЗаИтерацию);
	КонецЕсли;

	Если ЗначениеЗаполнено(_КаталогАртефактов) Тогда
		Конфигурация.УстановитьКаталогАртефактов(_КаталогАртефактов);
	КонецЕсли;

	Если _ХолодныйЗапуск = Истина Тогда
		Конфигурация.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ХолодныйЗапуск);
	КонецЕсли;

	Если _ПропускнаяСпособность = Истина Тогда
		Конфигурация.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ПропускнаяСпособность);
	КонецЕсли;

	ПрочитатьЭкспортеры(Конфигурация);
	ПрочитатьИсполняющуюСреду(Конфигурация);

	Возврат Конфигурация;

КонецФункции

Процедура ПрочитатьЭкспортеры(Конфигурация)

	Если Не ЗначениеЗаполнено(_Экспортеры) Тогда
		Возврат;
	КонецЕсли;

	ДопустимыеЗначения = Новый Соответствие();
	ДопустимыеЗначения.Вставить("markdown", "Markdown");
	ДопустимыеЗначения.Вставить("json", "Json");
	ДопустимыеЗначения.Вставить("xml", "Xml");
	ДопустимыеЗначения.Вставить("html", "Html");

	Для Каждого Экспортер Из СтрРазделить(_Экспортеры, ", ", Ложь) Цикл

		Имя = ДопустимыеЗначения[НРег(Экспортер)];

		ТекстОшибки = СтрШаблон("Неизвестный экспортер %1. Допустимые значения: markdown, json, xml, html", Экспортер);
		Ожидаем.Что(Имя, ТекстОшибки).Заполнено();

		Конфигурация.ДобавитьЭкспортер(ЭкспортерыРезультатовБенчмарков[Имя]);

	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьИсполняющуюСреду(Конфигурация)
	
	Если Не ЗначениеЗаполнено(_ИсполняющаяСреда) Тогда
		Возврат;
	КонецЕсли;

	Конфигурация.ОчиститьВерсииИсполняющейСреды();

	Если НРег(_ИсполняющаяСреда) = "current" Тогда
		Возврат;
	КонецЕсли;

	Версии = СтрРазделить(_ИсполняющаяСреда, ",");
	Для Каждого Версия Из Версии Цикл
		Конфигурация.ДобавитьВерсиюИсполняющейСреды(Версия);
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьРежимВоркер()
	УстановитьПеременнуюСреды("BENCHMARK_WORKER", Формат(_ЭтоВоркер, "БЛ=0; БИ=1"));
КонецПроцедуры

Функция ЭтоЧисло(Значение)
	Возврат ТипЗнч(Значение) = Тип("Число");
КонецФункции