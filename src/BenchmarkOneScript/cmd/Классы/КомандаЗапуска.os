// BSLLS:MissingVariablesDescription-off

#Использовать "../../../../"
#Использовать fs
#Использовать logos

&Опция(Имя = "r recursive", Описание = "Искать бенчмарки во вложенных каталогах")
&Флаг
&ПоУмолчанию(Ложь)
Перем _Рекурсивно; // Булево

&Опция(Имя = "m memory", Описание = "Включает мониторинг выделения памяти")
&Флаг
Перем _МониторингПамяти; // Булево

&Опция(Имя = "iterationCount", Описание = "Количество итераций")
&ТЧисло
Перем _КоличествоИтераций; // Число

&Опция(Имя = "iterationTime", Описание = "Минимальное время выполнения одной итерации бенчмарка в миллисекундах")
&ТЧисло
Перем _МинимальноеВремяИтерации; // Число

&Опция(Имя = "warmupCount", Описание = "Количество прогревочных итераций")
&ТЧисло
Перем _КоличествоПрогревочныхИтераций; // Число

&Опция(Имя = "invocationCount", Описание = "Сколько раз метод бенчмарка должен быть вызван в течение одной итерации")
&ТЧисло
Перем _КоличествоВызововЗаИтерацию; // Число

&Опция(Имя = "e exporters", Описание = "Экспортеры результата (md, json, xml, html)")
&ТСтрока
Перем _Экспортеры; // Строка

&Опция(Имя = "a artifacts", Описание = "Каталог для сохранения результатов бенчмарков")
&ТСтрока
Перем _КаталогАртефактов; // Строка

&Опция(Имя = "strategy", Описание = "Стратегия запуска")
&ТПеречисление
&Перечисление(Имя = "throughput", Значение = "ПропускнаяСпособность")
&Перечисление(Имя = "coldstart", Значение = "ХолодныйЗапуск")
Перем _Стратегия; // Строка

&Аргумент(Имя = "FILE", Описание = "Каталог, полный путь к файлу или имя файла в текущей директории")
&ТСтрока
Перем _ПутьКФайлу; // Строка

Перем _Лог;

&КомандаПриложения(Имя = "run", Описание = "Запускает бенчмарки")
Процедура ПриСозданииОбъекта()
КонецПроцедуры

&ВыполнениеКоманды 
Процедура Запустить() Экспорт

	Если ФС.КаталогСуществует(_ПутьКФайлу) Тогда
		Бенчмаркинг.ЗапуститьИзКаталога(_ПутьКФайлу, _Рекурсивно, Конфигурация());
		Возврат;
	КонецЕсли;

	Файл = ФайлСценария();
	Если Файл = Неопределено Тогда
		_Лог.Ошибка("Файл <%1> не существует", _ПутьКФайлу);
		Возврат;
	КонецЕсли;

	Тип = Бенчмаркинг.ПодключитьКласс(Файл.ПолноеИмя);
	Если Не Тип = Неопределено Тогда
		Конфигурация = Новый КонфигурацияБенчмарков(Тип);
		Конфигурация.Объединить(Конфигурация());
		Бенчмаркинг.Запустить(Тип, Конфигурация);
	КонецЕсли;

КонецПроцедуры

Функция ФайлСценария()

	ВариантыПутей = Новый Массив();
	ВариантыПутей.Добавить(_ПутьКФайлу);
	ВариантыПутей.Добавить(ОбъединитьПути(ТекущийКаталог(), _ПутьКФайлу));
	ВариантыПутей.Добавить(ОбъединитьПути(ТекущийКаталог(), _ПутьКФайлу + ".os"));

	Для Каждого Путь Из ВариантыПутей Цикл
		Файл = Новый Файл(Путь);
		Если Файл.Существует() Тогда
			Возврат Файл;
		КонецЕсли;
	КонецЦикла;

КонецФункции

Функция Конфигурация()
	
	Конфигурация = Новый КонфигурацияБенчмарков();

	Если _МониторингПамяти = Истина Тогда
		Конфигурация.ДобавитьМониторингПамяти();
	КонецЕсли;

	Если ЭтоЧисло(_КоличествоИтераций) Тогда
		Конфигурация.УстановитьКоличествоИтераций(_КоличествоИтераций);
	КонецЕсли;

	Если ЭтоЧисло(_МинимальноеВремяИтерации) Тогда
		Конфигурация.УстановитьМинимальноеВремяИтерации(_МинимальноеВремяИтерации);
	КонецЕсли;

	Если ЭтоЧисло(_КоличествоПрогревочныхИтераций) Тогда
		Конфигурация.УстановитьКоличествоПрогревочныхИтераций(_КоличествоПрогревочныхИтераций);
	КонецЕсли;

	Если ЭтоЧисло(_КоличествоВызововЗаИтерацию) Тогда
		Конфигурация.УстановитьКоличествоВызововЗаИтерацию(_КоличествоВызововЗаИтерацию);
	КонецЕсли;

	Если ЗначениеЗаполнено(_КаталогАртефактов) Тогда
		Конфигурация.УстановитьКаталогАртефактов(_КаталогАртефактов);
	КонецЕсли;

	Если ЗначениеЗаполнено(_Стратегия) Тогда
		Конфигурация.УстановитьСтратегию(СтратегииЗапускаБенчмарка[_Стратегия]);
	КонецЕсли;

	ПрочитатьЭкспортеры(Конфигурация);

	Возврат Конфигурация;

КонецФункции

Функция ЭтоЧисло(Значение)
	Возврат ТипЗнч(Значение) = Тип("Число");
КонецФункции

Процедура ПрочитатьЭкспортеры(Конфигурация)

	Если Не ЗначениеЗаполнено(_Экспортеры) Тогда
		Возврат;
	КонецЕсли;

	ДопустимыеЗначения = Новый Соответствие();
	ДопустимыеЗначения.Вставить("markdown", "Markdown");
	ДопустимыеЗначения.Вставить("json", "Json");
	ДопустимыеЗначения.Вставить("xml", "Xml");
	ДопустимыеЗначения.Вставить("html", "Html");

	Для Каждого Экспортер Из СтрРазделить(_Экспортеры, ", ", Ложь) Цикл

		Имя = ДопустимыеЗначения[НРег(Экспортер)];

		ТекстОшибки = СтрШаблон("Неизвестный экспортер %1. Допустимые значения: markdown, json, xml, html", Экспортер);
		Ожидаем.Что(Имя, ТекстОшибки).Заполнено();

		Конфигурация.ДобавитьЭкспортер(ЭкспортерыРезультатовБенчмарков[Имя]);

	КонецЦикла;

КонецПроцедуры

_Лог = Логирование.ПолучитьЛог("oscript.lib.benchmark.cli");