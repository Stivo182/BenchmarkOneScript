#Использовать fs
#Использовать 1commands

Перем _КаталогУстановки; // Строка, Неопределено

// Поиск исполняемого файла OneScript в системе с учетом версии
//
// Параметры:
//   Версия - Строка - Версия OneScript (например: "1.9.3", "dev")
//
// Возвращаемое значение:
//   Строка, Неопределено
Функция НайтиИсполняемыйФайл(Версия) Экспорт

	КаталогУстановки = КаталогУстановки();
	Если Не ЗначениеЗаполнено(КаталогУстановки) Тогда
		Возврат Неопределено;
	КонецЕсли;

	КаталогBin = ОбъединитьПути(КаталогУстановки, Версия, "bin");

	Если ЭтоWindows() Тогда
		ИмяФайла = ОбъединитьПути(КаталогBin, "oscript.exe");
	Иначе
		ИмяФайла = ОбъединитьПути(КаталогBin, "oscript");
	КонецЕсли;

	Если ФС.ФайлСуществует(ИмяФайла) Тогда
		Возврат ИмяФайла;
	КонецЕсли;

КонецФункции

// Определяет каталог установленных версий OneScript
//
// Возвращаемое значение:
//   Строка, Неопределено
Функция КаталогУстановки() Экспорт

	Если Не _КаталогУстановки = Неопределено Тогда
		Возврат _КаталогУстановки;
	КонецЕсли;

	// Из переменной среды OVM_INSTALL_PATH
	КаталогУстановки = ПолучитьПеременнуюСреды("OVM_INSTALL_PATH");
	Если ЗначениеЗаполнено(КаталогУстановки) И ФС.КаталогСуществует(КаталогУстановки) Тогда
		_КаталогУстановки = КаталогУстановки;
		Возврат КаталогУстановки;
	КонецЕсли;

	// Из переменной среды OSCRIPTBIN
	КаталогИсполняющейСреды = ПолучитьПеременнуюСреды("OSCRIPTBIN");
	Если ЗначениеЗаполнено(КаталогИсполняющейСреды) И ФС.КаталогСуществует(КаталогИсполняющейСреды) Тогда
		КаталогУстановки = ФС.НормализоватьПуть(ОбъединитьПути(КаталогИсполняющейСреды, "../.."));
		ИмяКаталога = Новый Файл(КаталогУстановки).Имя;
		Если ИмяКаталога = "ovm" Тогда
			_КаталогУстановки = КаталогУстановки;
			Возврат КаталогУстановки;
		КонецЕсли;
	КонецЕсли;	

	// Из каталога по умолчанию
	СистемнаяИнформация = Новый СистемнаяИнформация();
	КаталогУстановки = ОбъединитьПути(
		СистемнаяИнформация.ПолучитьПутьПапки(СпециальнаяПапка.ЛокальныйКаталогДанныхПриложений),
		"ovm"
	);
	Если ФС.КаталогСуществует(КаталогУстановки) Тогда
		_КаталогУстановки = КаталогУстановки;
		Возврат КаталогУстановки;
	КонецЕсли;

	// Через ovm which
	КаталогУстановки = ОпределитьКаталогУстановкиЧерезWhich();
	Если ЗначениеЗаполнено(КаталогУстановки) Тогда
		_КаталогУстановки = КаталогУстановки;
		Возврат КаталогУстановки;
	КонецЕсли;

КонецФункции

// Получает системный каталог для хранения библиотек
//
// Возвращаемое значение:
//   Строка
Функция КаталогБиблиотек() Экспорт
	Возврат ПолучитьЗначениеСистемнойНастройки("lib.system");
КонецФункции

// Определяет, является ли текущая ОС Windows
//
// Возвращаемое значение:
//   Булево
Функция ЭтоWindows() Экспорт

	СистемнаяИнформация = Новый СистемнаяИнформация();
	ТекущаяПлатформа = СистемнаяИнформация.ТипПлатформы;

	Возврат ТекущаяПлатформа = ТипПлатформы.Windows_x86_64
		Или ТекущаяПлатформа = ТипПлатформы.Windows_x86;

КонецФункции

Функция ОпределитьКаталогУстановкиЧерезWhich()
		
	Команда = Новый Команда();
	Команда.УстановитьКоманду("ovm");
	Команда.ДобавитьПараметр("which");
	Команда.ДобавитьПараметр("current");
	КодВозврата = Команда.Исполнить();

	Если Не КодВозврата = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПутьКФайлу = СокрЛП(Команда.ПолучитьВывод());
	КаталогФайла = Новый Файл(ПутьКФайлу).Путь;

	КаталогУстановки = ФС.НормализоватьПуть(ОбъединитьПути(КаталогФайла, "../.."));
	Возврат КаталогУстановки;

КонецФункции