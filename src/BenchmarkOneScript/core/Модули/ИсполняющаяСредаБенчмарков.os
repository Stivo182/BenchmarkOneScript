#Использовать fs

// Поиск исполняемого файла OneScript в системе с учетом версии
//
// Параметры:
//   Версия - Строка - Версия OneScript (например: "1.9.3", "dev")
//
// Возвращаемое значение:
//   Строка, Неопределено
Функция НайтиИсполняемыйФайл(Версия) Экспорт

	КаталогУстановки = КаталогУстановки();
	Если Не ЗначениеЗаполнено(КаталогУстановки) Тогда
		Возврат Неопределено;
	КонецЕсли;

	КаталогBin = ОбъединитьПути(КаталогУстановки, Версия, "bin");

	Если ЭтоWindows() Тогда
		ИмяФайла = ОбъединитьПути(КаталогBin, "oscript.exe");
	Иначе
		ИмяФайла = ОбъединитьПути(КаталогBin, "oscript");
	КонецЕсли;
	
	Если ФС.ФайлСуществует(ИмяФайла) Тогда
		Возврат ИмяФайла;
	КонецЕсли;

КонецФункции

// Определяет каталог установленных версий OneScript
//
// Возвращаемое значение:
//   Строка, Неопределено
Функция КаталогУстановки() Экспорт
	
	КаталогOVM = ПолучитьПеременнуюСреды("OVM_INSTALL_PATH");
	Если Не ЗначениеЗаполнено(КаталогOVM) Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		КаталогOVM = ОбъединитьПути(
			СистемнаяИнформация.ПолучитьПутьПапки(СпециальнаяПапка.ЛокальныйКаталогДанныхПриложений),
			"ovm"
		);
	КонецЕсли;

	Если ФС.КаталогСуществует(КаталогOVM) Тогда
		Возврат КаталогOVM;
	КонецЕсли;

КонецФункции

// Получает системный каталог для хранения библиотек
//
// Возвращаемое значение:
//   Строка
Функция КаталогБиблиотек() Экспорт
	Возврат ПолучитьЗначениеСистемнойНастройки("lib.system");
КонецФункции

// Определяет, является ли текущая ОС Windows
//
// Возвращаемое значение:
//   Булево
Функция ЭтоWindows() Экспорт

	СистемнаяИнформация = Новый СистемнаяИнформация();
	ТекущаяПлатформа = СистемнаяИнформация.ТипПлатформы;

	Возврат ТекущаяПлатформа = ТипПлатформы.Windows_x86_64
		Или ТекущаяПлатформа = ТипПлатформы.Windows_x86;

КонецФункции
