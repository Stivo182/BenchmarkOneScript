#Использовать annotations

#Область ПрограммныйИнтерфейс

// Извлекает конфигурацию бенчмарков
//
// Параметры:
//   Источник - Тип, Произвольный - Тип или экземпляр класса бенчмарков
//   Конфигурация - КонфигурацияБенчмарков - Конфигурация, в которую будут записаны данные 
//
// Возвращаемое значение:
//   КонфигурацияБенчмарков
Функция Извлечь(Источник, Конфигурация = Неопределено) Экспорт
	
	Если ТипЗнч(Источник) = Тип("Тип") Тогда
		Объект = Новый(Источник);
	Иначе
		Объект = Источник;
	КонецЕсли;

	Если Конфигурация = Неопределено Тогда
		КонфигурацияБенчмарков = Новый КонфигурацияБенчмарков();
	Иначе
		КонфигурацияБенчмарков = Конфигурация;
	КонецЕсли;

	РефлекторОбъекта = Новый РефлекторОбъекта(Объект);
	ТаблицаМетодов = РефлекторОбъекта.ПолучитьТаблицуМетодов(, Ложь);
	ТаблицаСвойств = РефлекторОбъекта.ПолучитьТаблицуСвойств();
	
	СвойстваКонструктора = ТаблицаМетодов.Найти("ПриСозданииОбъекта", "Имя");

	Если Не СвойстваКонструктора = Неопределено Тогда
		ПрочитатьАннотациюСтратегия(СвойстваКонструктора, КонфигурацияБенчмарков);
		ПрочитатьАннотациюКоличествоИтераций(СвойстваКонструктора, КонфигурацияБенчмарков);
		ПрочитатьАннотациюКоличествоВызововЗаИтерацию(СвойстваКонструктора, КонфигурацияБенчмарков);
		ПрочитатьАннотациюКоличествоПрогревочныхИтераций(СвойстваКонструктора, КонфигурацияБенчмарков);
		ПрочитатьАннотациюМинимальноеВремяИтерации(СвойстваКонструктора, КонфигурацияБенчмарков);
		ПрочитатьАннотациюМинимальноеКоличествоВызововЗаИтерацию(СвойстваКонструктора, КонфигурацияБенчмарков);
		ПрочитатьАннотациюСортировка(СвойстваКонструктора, КонфигурацияБенчмарков);
		ПрочитатьАннотациюМониторингПамяти(СвойстваКонструктора, КонфигурацияБенчмарков);	
		ПрочитатьАннотацииКолонок(СвойстваКонструктора, Конфигурация);
	КонецЕсли;

	Для Каждого СвойстваПоля Из ТаблицаСвойств Цикл
		ПрочитатьАннотациюПараметры(СвойстваПоля, КонфигурацияБенчмарков);
	КонецЦикла;

	ПрочитатьОбработчикиСобытия(СобытияБенчмарков.ПередВсеми, РефлекторОбъекта, Конфигурация);
	ПрочитатьОбработчикиСобытия(СобытияБенчмарков.ПослеВсех, РефлекторОбъекта, Конфигурация);
	ПрочитатьОбработчикиСобытия(СобытияБенчмарков.ПередКаждым, РефлекторОбъекта, Конфигурация);
	ПрочитатьОбработчикиСобытия(СобытияБенчмарков.ПослеКаждого, РефлекторОбъекта, Конфигурация);

	Возврат КонфигурацияБенчмарков;
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПрочитатьАннотациюСтратегия(СвойстваКонструктора, Конфигурация)

	Если РаботаСАннотациямиБенчмарков.ЕстьАннотация(СвойстваКонструктора, "СтратегияХолодныйЗапуск") Тогда
		Стратегия = СтратегииЗапускаБенчмарка.ХолодныйЗапуск;
	ИначеЕсли РаботаСАннотациямиБенчмарков.ЕстьАннотация(СвойстваКонструктора, "СтратегияПропускнаяСпособность") Тогда
		Стратегия = СтратегииЗапускаБенчмарка.ПропускнаяСпособность;
	Иначе
		Возврат;
	КонецЕсли;

	Конфигурация.УстановитьСтратегию(Стратегия);

КонецПроцедуры

Процедура ПрочитатьАннотациюКоличествоИтераций(СвойстваКонструктора, Конфигурация)

	КоличествоИтераций = РаботаСАннотациямиБенчмарков.ЗначениеАннотацииКакЧисло(
		СвойстваКонструктора,
		"КоличествоИтераций"
	);

	Если Не КоличествоИтераций = Неопределено Тогда
		Конфигурация.УстановитьКоличествоИтераций(КоличествоИтераций);
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьАннотациюКоличествоВызововЗаИтерацию(СвойстваКонструктора, Конфигурация)

	КоличествоВызововЗаИтерацию = РаботаСАннотациямиБенчмарков.ЗначениеАннотацииКакЧисло(
		СвойстваКонструктора,
		"КоличествоВызововЗаИтерацию"
	);

	Если Не КоличествоВызововЗаИтерацию = Неопределено Тогда
		Конфигурация.УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию);
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьАннотациюКоличествоПрогревочныхИтераций(СвойстваКонструктора, Конфигурация)

	КоличествоПрогревочныхИтераций = РаботаСАннотациямиБенчмарков.ЗначениеАннотацииКакЧисло(
		СвойстваКонструктора,
		"КоличествоПрогревочныхИтераций"
	);

	Если Не КоличествоПрогревочныхИтераций = Неопределено Тогда
		Конфигурация.УстановитьКоличествоПрогревочныхИтераций(КоличествоПрогревочныхИтераций);
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьАннотациюМинимальноеВремяИтерации(СвойстваКонструктора, Конфигурация)

	МинимальноеВремяИтерации = РаботаСАннотациямиБенчмарков.ЗначениеАннотацииКакЧисло(
		СвойстваКонструктора,
		"МинимальноеВремяИтерации"
	);

	Если Не МинимальноеВремяИтерации = Неопределено Тогда
		Конфигурация.УстановитьМинимальноеВремяИтерации(МинимальноеВремяИтерации);
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьАннотациюМинимальноеКоличествоВызововЗаИтерацию(СвойстваКонструктора, Конфигурация)

	МинимальноеКоличествоВызововЗаИтерацию = РаботаСАннотациямиБенчмарков.ЗначениеАннотацииКакЧисло(
		СвойстваКонструктора,
		"МинимальноеКоличествоВызововЗаИтерацию"
	);
	
	Если Не МинимальноеКоличествоВызововЗаИтерацию = Неопределено Тогда
		Конфигурация.УстановитьМинимальноеКоличествоВызововЗаИтерацию(МинимальноеКоличествоВызововЗаИтерацию);
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьАннотациюПараметры(СвойстваПоля, Конфигурация)

	Аннотации = РаботаСАннотациями.ПолучитьАннотации(СвойстваПоля, "Параметры");

	Для Каждого Аннотация Из Аннотации Цикл

		Параметры = РаботаСАннотациями.ПолучитьЗначенияПараметровАннотации(Аннотация, "Значение");

		Для Каждого Значение Из Параметры Цикл
			Конфигурация.ДобавитьПараметр(СвойстваПоля.Имя, Значение);
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьАннотациюСортировка(СвойстваКонструктора, Конфигурация)

	Если РаботаСАннотациямиБенчмарков.ЕстьАннотация(СвойстваКонструктора, "СортировкаПоМетоду") Тогда
		Сортировка = СортировкиОтчетаБенчмарков.Метод;
	ИначеЕсли РаботаСАннотациямиБенчмарков.ЕстьАннотация(СвойстваКонструктора, "СортировкаОтБыстрыхКМедленным") Тогда
		Сортировка = СортировкиОтчетаБенчмарков.ОтБыстрыхКМедленным;
	ИначеЕсли РаботаСАннотациямиБенчмарков.ЕстьАннотация(СвойстваКонструктора, "СортировкаОтМедленныхКБыстрым") Тогда
		Сортировка = СортировкиОтчетаБенчмарков.ОтМедленныхКБыстрым;
	Иначе
		Возврат;
	КонецЕсли;

	Конфигурация.УстановитьСортировкуОтчета(Сортировка);

КонецПроцедуры

Процедура ПрочитатьАннотациюМониторингПамяти(СвойстваКонструктора, Конфигурация)

	Если РаботаСАннотациямиБенчмарков.ЕстьАннотация(СвойстваКонструктора, "МониторингПамяти") Тогда
		Конфигурация.ДобавитьМониторингПамяти();
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьОбработчикиСобытия(ИмяСобытия, РефлекторОбъекта, Конфигурация)

	ТаблицаМетодов = РефлекторОбъекта.ПолучитьТаблицуМетодов(ИмяСобытия);
	Если ТаблицаМетодов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СвойстваМетода Из ТаблицаМетодов Цикл
		Конфигурация.ДобавитьОбработчикСобытия(ИмяСобытия, СвойстваМетода.Имя);
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьАннотацииКолонок(СвойстваКонструктора, Конфигурация)
	
	ПрочитатьАннотацииКолонкиБезПараметров(СвойстваКонструктора, Конфигурация);
	ПрочитатьАннотацииКолонкиПроцентиля(СвойстваКонструктора, Конфигурация);

КонецПроцедуры

Процедура ПрочитатьАннотацииКолонкиБезПараметров(СвойстваКонструктора, Конфигурация)
	
	ПереченьКолонок = "Мин, Макс, НижнийКвартиль, ВерхнийКвартиль";
	Колонки = СтрРазделить(ПереченьКолонок, ", ", Ложь);

	Для Каждого ИмяКолонки Из Колонки Цикл
		Если РаботаСАннотациямиБенчмарков.ЕстьАннотация(СвойстваКонструктора, "Колонка" + ИмяКолонки) Тогда
			Конфигурация.ДобавитьКолонку(КолонкиОтчетаБенчмарков[ИмяКолонки]);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьАннотацииКолонкиПроцентиля(СвойстваКонструктора, Конфигурация)
	
	Аннотации = РаботаСАннотациями.ПолучитьАннотации(СвойстваКонструктора, "КолонкаПроцентиль");

	КоличествоДобавлено = 0;
	Для Каждого Аннотация Из Аннотации Цикл

		Процентили = РаботаСАннотациями.ПолучитьЗначенияПараметровАннотации(Аннотация, "Значение");

		Для Каждого Процентиль Из Процентили Цикл
			Конфигурация.ДобавитьКолонку(КолонкиОтчетаБенчмарков.Процентиль(Процентиль));
			КоличествоДобавлено = КоличествоДобавлено + 1;
		КонецЦИкла;

	КонецЦикла;

	Если Аннотации.Количество() > 0 И КоличествоДобавлено = 0 Тогда
		Конфигурация.ДобавитьКолонку(КолонкиОтчетаБенчмарков.Процентиль);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти