#Использовать annotations

#Область ПрограммныйИнтерфейс

// Извлекает конфигурацию бенчмарков
//
// Параметры:
//   Объект - Произвольный - Объект бенчмарка
//
// Возвращаемое значение:
//   КонфигурацияБенчмарков
Функция Извлечь(Объект) Экспорт
	
	Конфигурация = Новый КонфигурацияБенчмарков();

	РефлекторОбъекта = Новый РефлекторОбъекта(Объект);
	ТаблицаМетодов = РефлекторОбъекта.ПолучитьТаблицуМетодов(, Ложь);
	ТаблицаСвойств = РефлекторОбъекта.ПолучитьТаблицуСвойств();
	
	СвойстваКонструктора = ТаблицаМетодов.Найти("ПриСозданииОбъекта", "Имя");

	Если Не СвойстваКонструктора = Неопределено Тогда

		ПрочитатьАннотациюСтратегия(СвойстваКонструктора, Конфигурация);
		ПрочитатьАннотациюКоличествоИтераций(СвойстваКонструктора, Конфигурация);
		ПрочитатьАннотациюКоличествоВызововЗаИтерацию(СвойстваКонструктора, Конфигурация);
		ПрочитатьАннотациюКоличествоПрогревочныхИтераций(СвойстваКонструктора, Конфигурация);
		ПрочитатьАннотациюМинимальноеВремяИтерации(СвойстваКонструктора, Конфигурация);
		ПрочитатьАннотациюМинимальноеКоличествоВызововЗаИтерацию(СвойстваКонструктора, Конфигурация);
		ПрочитатьАннотациюСортировка(СвойстваКонструктора, Конфигурация);
		ПрочитатьАннотациюМониторингПамяти(СвойстваКонструктора, Конфигурация);

	КонецЕсли;

	Для Каждого СвойстваПоля Из ТаблицаСвойств Цикл
		ПрочитатьАннотациюПараметры(СвойстваПоля, Конфигурация);
	КонецЦикла;

	ПрочитатьОбработчикИнициализация(РефлекторОбъекта, Объект, Конфигурация);
	ПрочитатьОбработчикЗавершение(РефлекторОбъекта, Объект, Конфигурация);
	ПрочитатьОбработчикПеред(РефлекторОбъекта, Объект, Конфигурация);
	ПрочитатьОбработчикПосле(РефлекторОбъекта, Объект, Конфигурация);

	Возврат Конфигурация;
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПрочитатьАннотациюСтратегия(СвойстваКонструктора, Конфигурация)

	Если РаботаСАннотациямиБенчмарков.ЕстьАннотация(СвойстваКонструктора, "СтратегияХолодныйЗапуск") Тогда
		Стратегия = СтратегииЗапускаБенчмарка.ХолодныйЗапуск;
	ИначеЕсли РаботаСАннотациямиБенчмарков.ЕстьАннотация(СвойстваКонструктора, "СтратегияПропускнаяСпособность") Тогда
		Стратегия = СтратегииЗапускаБенчмарка.ПропускнаяСпособность;
	Иначе
		Возврат;
	КонецЕсли;

	Конфигурация.УстановитьСтратегию(Стратегия);

КонецПроцедуры

Процедура ПрочитатьАннотациюКоличествоИтераций(СвойстваКонструктора, Конфигурация)

	КоличествоИтераций = РаботаСАннотациямиБенчмарков.ЗначениеАннотацииКакЧисло(
		СвойстваКонструктора,
		"КоличествоИтераций"
	);

	Если Не КоличествоИтераций = Неопределено Тогда
		Конфигурация.УстановитьКоличествоИтераций(КоличествоИтераций);
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьАннотациюКоличествоВызововЗаИтерацию(СвойстваКонструктора, Конфигурация)

	КоличествоВызововЗаИтерацию = РаботаСАннотациямиБенчмарков.ЗначениеАннотацииКакЧисло(
		СвойстваКонструктора,
		"КоличествоВызововЗаИтерацию"
	);

	Если Не КоличествоВызововЗаИтерацию = Неопределено Тогда
		Конфигурация.УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию);
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьАннотациюКоличествоПрогревочныхИтераций(СвойстваКонструктора, Конфигурация)

	КоличествоПрогревочныхИтераций = РаботаСАннотациямиБенчмарков.ЗначениеАннотацииКакЧисло(
		СвойстваКонструктора,
		"КоличествоПрогревочныхИтераций"
	);

	Если Не КоличествоПрогревочныхИтераций = Неопределено Тогда
		Конфигурация.УстановитьКоличествоПрогревочныхИтераций(КоличествоПрогревочныхИтераций);
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьАннотациюМинимальноеВремяИтерации(СвойстваКонструктора, Конфигурация)

	МинимальноеВремяИтерации = РаботаСАннотациямиБенчмарков.ЗначениеАннотацииКакЧисло(
		СвойстваКонструктора,
		"МинимальноеВремяИтерации"
	);

	Если Не МинимальноеВремяИтерации = Неопределено Тогда
		Конфигурация.УстановитьМинимальноеВремяИтерации(МинимальноеВремяИтерации);
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьАннотациюМинимальноеКоличествоВызововЗаИтерацию(СвойстваКонструктора, Конфигурация)

	МинимальноеКоличествоВызововЗаИтерацию = РаботаСАннотациямиБенчмарков.ЗначениеАннотацииКакЧисло(
		СвойстваКонструктора,
		"МинимальноеКоличествоВызововЗаИтерацию"
	);
	
	Если Не МинимальноеКоличествоВызововЗаИтерацию = Неопределено Тогда
		Конфигурация.УстановитьМинимальноеКоличествоВызововЗаИтерацию(МинимальноеКоличествоВызововЗаИтерацию);
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьАннотациюПараметры(СвойстваПоля, Конфигурация)

	Аннотации = РаботаСАннотациями.ПолучитьАннотации(СвойстваПоля, "Параметры");

	Для Каждого Аннотация Из Аннотации Цикл

		Параметры = РаботаСАннотациями.ПолучитьЗначенияПараметровАннотации(Аннотация, "Значение");

		Для Каждого Значение Из Параметры Цикл

			Конфигурация.ДобавитьПараметр(СвойстваПоля.Имя, Значение);

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьАннотациюСортировка(СвойстваКонструктора, Конфигурация)

	Если РаботаСАннотациямиБенчмарков.ЕстьАннотация(СвойстваКонструктора, "СортировкаПоМетоду") Тогда
		Сортировка = СортировкиОтчетаБенчмарков.Метод;
	ИначеЕсли РаботаСАннотациямиБенчмарков.ЕстьАннотация(СвойстваКонструктора, "СортировкаОтБыстрыхКМедленным") Тогда
		Сортировка = СортировкиОтчетаБенчмарков.ОтБыстрыхКМедленным;
	ИначеЕсли РаботаСАннотациямиБенчмарков.ЕстьАннотация(СвойстваКонструктора, "СортировкаОтМедленныхКБыстрым") Тогда
		Сортировка = СортировкиОтчетаБенчмарков.ОтМедленныхКБыстрым;
	Иначе
		Возврат;
	КонецЕсли;

	Конфигурация.УстановитьСортировкуОтчета(Сортировка);

КонецПроцедуры

Процедура ПрочитатьАннотациюМониторингПамяти(СвойстваКонструктора, Конфигурация)

	Если РаботаСАннотациямиБенчмарков.ЕстьАннотация(СвойстваКонструктора, "МониторингПамяти")  Тогда
		Конфигурация.ДобавитьМониторингПамяти();
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьОбработчикПеред(РефлекторОбъекта, Объект, Конфигурация)

	ТаблицаМетодов = РефлекторОбъекта.ПолучитьТаблицуМетодов("Перед");
	Если ТаблицаМетодов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СвойстваМетода = ТаблицаМетодов[0];

	Делегат = Новый Делегат(Объект, СвойстваМетода.Имя);
	Конфигурация.УстановитьОбработчикПередЗапуском(Делегат);

КонецПроцедуры

Процедура ПрочитатьОбработчикПосле(РефлекторОбъекта, Объект, Конфигурация)

	ТаблицаМетодов = РефлекторОбъекта.ПолучитьТаблицуМетодов("После");
	Если ТаблицаМетодов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СвойстваМетода = ТаблицаМетодов[0];

	Делегат = Новый Делегат(Объект, СвойстваМетода.Имя);
	Конфигурация.УстановитьОбработчикПослеЗапуска(Делегат);

КонецПроцедуры

Процедура ПрочитатьОбработчикИнициализация(РефлекторОбъекта, Объект, Конфигурация)

	ТаблицаМетодов = РефлекторОбъекта.ПолучитьТаблицуМетодов("Инициализация");
	Если ТаблицаМетодов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СвойстваМетода = ТаблицаМетодов[0];

	Делегат = Новый Делегат(Объект, СвойстваМетода.Имя);
	Конфигурация.УстановитьОбработчикИнициализации(Делегат);

КонецПроцедуры

Процедура ПрочитатьОбработчикЗавершение(РефлекторОбъекта, Объект, Конфигурация)

	ТаблицаМетодов = РефлекторОбъекта.ПолучитьТаблицуМетодов("Завершение");
	Если ТаблицаМетодов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СвойстваМетода = ТаблицаМетодов[0];

	Делегат = Новый Делегат(Объект, СвойстваМетода.Имя);
	Конфигурация.УстановитьОбработчикЗавершения(Делегат);

КонецПроцедуры

#КонецОбласти