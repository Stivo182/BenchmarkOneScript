#Использовать logos

Перем _Лог; // Лог
Перем _РегуляркаЗапрещенныеСимволыВИмени; // РегулярноеВыражение

#Область ПрограммныйИнтерфейс

// Запускает бенчмарки
//
// Параметры:
//   ИсточникБенчмарков - Тип - Класс, содержащий бенчмарки
//                      - КоллекцияДескрипторовБенчмарков
//                      - ДескрипторБенчмарка
//                      - Произвольный - Экземпляр класса с бенчмарками
//   Конфигурация - КонфигурацияБенчмарков - Конфигурация бенчмарков
// 
// Возвращаемое значение:
//   Структура:
//     * ИмяКласса - Строка - Имя класса
//     * ДескрипторыБенчмарков - КоллекцияДескрипторовБенчмарков
//     * Конфигурация - КонфигурацияБенчмарков
//     * Отчет - ОтчетБенчмарков
//     * СредаОкружения - СредаОкруженияБенчмарков
//     * Расшифровка - ТаблицаЗначений:
//       ** ДескрипторБенчмарка - ДескрипторБенчмарка
//       ** Параметры - Массив из ПараметрБенчмарка
//       ** Эталон - СтрокаТаблицыЗначений, Неопределено
//       ** ЭтоЭталон - Булево
//       ** Статистика - СтатистикаБенчмарка
//       ** ИсполняющаяСреда - Структура:
//          *** Версия - Строка
//          *** Алиас - Строка
//          *** Наименование - Строка
//       ** Замеры - ТаблицаЗначений:
//          *** Этап - см. ЭтапыБенчмарка
//          *** НомерИтерации - Число
//          *** КоличествоОпераций - Число
//          *** Наносекунд - Число - Наносекунд за итерацию
//          *** НаносекундЗаОперацию - Число - Наносекунд за операцию
//          *** ВыделяемаяПамять - Число - Байт выделяемой памяти за итерацию
//          *** ВыделяемаяПамятьЗаОперацию - Число - Байт выделяемой памяти за операцию
Функция Запустить(ИсточникБенчмарков, Конфигурация = Неопределено) Экспорт

	ЗапускательБенчмарков = Новый ЗапускательБенчмарков(ИсточникБенчмарков, Конфигурация);
	Возврат ЗапускательБенчмарков.Запустить();

КонецФункции

// Запускает все бенчмарки, найденные в указанном каталоге
//
// Параметры:
//   Каталог - Строка - Путь к каталогу с бенчмарками
//   ИскатьВПодкаталогах - Булево - Сканировать все вложенные каталоги
//   Конфигурация - КонфигурацияБенчмарков - Конфигурация, которая с приоритетом будет объединена
//                                           с каждой конфигурацией бенчмарка
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * Результат - см. Бенчмаркинг.Запустить
//                 - Неопределено
//     * ИмяКласса - Строка - Имя класса
//     * ИмяФайла - Строка - Имя файла
//     * ПутьКФайлу - Строка - Путь к файлу сценария
//     * Успешно - Булево - Индикатор корректного выполнения
Функция ЗапуститьИзКаталога(Каталог, ИскатьВПодкаталогах = Ложь, Конфигурация = Неопределено) Экспорт

	ЗапускательБенчмарковИзКаталога = Новый ЗапускательБенчмарковИзКаталога(Каталог, ИскатьВПодкаталогах, Конфигурация);
	Возврат ЗапускательБенчмарковИзКаталога.Запустить();

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Подключает класс бенчмарков
//
// Параметры:
//   ПутьКФайлу - Строка - Путь к файлу класса бенчмарков
//
// Возвращаемое значение:
//   Тип, Неопределено
Функция ПодключитьКласс(ПутьКФайлу) Экспорт
			
	ИмяКласса = ИмяКлассаИзСтроки(Новый Файл(ПутьКФайлу).ИмяБезРасширения);	

	Если СценарийПодключенПоИмени(ИмяКласса) Тогда
		ИмяКласса = ИмяКласса + "_" + СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
	КонецЕсли;

	Попытка
		ПодключитьСценарий(ПутьКФайлу, ИмяКласса);
		Тип = Тип(ИмяКласса);
	Исключение
		_Лог.Ошибка("Не удалось подключить сценарий бенчмарков <%1> по причине: %2", ПутьКФайлу, ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(Тип);
	Если ДескрипторыБенчмарков.Количество() = 0 Тогда
		_Лог.Предупреждение("Класс <%1> не содержит бенчмарков", ИмяКласса);
		Возврат Неопределено;
	КонецЕсли;

	_Лог.Отладка("Найдено бенчмарков в классе <%1>: %2 шт.", ИмяКласса, ДескрипторыБенчмарков.Количество());

	Возврат Тип;

КонецФункции

Функция ЭтоВоркер() Экспорт
	Возврат ПолучитьПеременнуюСреды("BENCHMARK_WORKER") = "1";
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяКлассаИзСтроки(Строка)
	Если _РегуляркаЗапрещенныеСимволыВИмени = Неопределено Тогда
		_РегуляркаЗапрещенныеСимволыВИмени = Новый РегулярноеВыражение("[^a-zA-Zа-яА-Я0-9_]");
	КонецЕсли;
	Возврат _РегуляркаЗапрещенныеСимволыВИмени.Заменить(Строка, "");	
КонецФункции

Функция СценарийПодключенПоИмени(ИмяСценария)
	Попытка
		Объект = Новый(ИмяСценария); // BSLLS:UnusedLocalVariable-off
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

#КонецОбласти

_Лог = Логирование.ПолучитьЛог("oscript.lib.benchmark.Бенчмаркинг");