#Использовать lambdas

Перем _ДескрипторыБенчмарков; // КоллекцияДескрипторовБенчмарков
Перем _Конфигурация; // КонфигурацияБенчмарков
Перем _РасшифровкаРезультатов; // см. МенеджерРасшифровкиРезультатовБенчмарков.НоваяТаблицаРасшифровки
Перем _Отчет; // ОтчетБенчмарков
Перем _КолонкиКонфигурации; // Массив из Строка

// Построитель отчета по результатам запуска бенчмарков
//
// Параметры:
//   ДескрипторыБенчмарков - КоллекцияДескрипторовБенчмарков
//   Конфигурация - КонфигурацияБенчмарков
//   РасшифровкаРезультатов - см. МенеджерРасшифровкиРезультатовБенчмарков.НоваяТаблицаРасшифровки
Процедура ПриСозданииОбъекта(ДескрипторыБенчмарков, Конфигурация, РасшифровкаРезультатов)
	
	_ДескрипторыБенчмарков = ДескрипторыБенчмарков;
	_Конфигурация = Конфигурация;
	_РасшифровкаРезультатов = РасшифровкаРезультатов;
	_КолонкиКонфигурации = _Конфигурация.Колонки();

КонецПроцедуры

#Область ПрограммныйИнтерфейс

// Формирует отчет по результатам запуска бенчмарков
//
// Возвращаемое значение:
//   ОтчетБенчмарков
Функция Сформировать() Экспорт

	_Отчет = Новый ОтчетБенчмарков();
	
	ДобавитьКолонки();
	ЗаполнитьДанными();
	ОпределитьЧисловыеКолонки();
	ОпределитьЕдиницыИзмеренияПредставления();
	ОпределитьФорматныеСтроки();
	ОпределитьРазмерыКолонок();
	Сортировать();
	СкрытьКолонки();

	Возврат _Отчет;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьКолонки()
	
	ДобавитьКолонкуПорядкаПоУмолчанию();
	ДобавитьКолонкуРасшифровкаРезультатов();
	ДобавитьКолонку(КолонкиОтчетаБенчмарков.СоздатьМетод());
	ДобавитьКолонкуКатегория();
	ДобавитьКолонкиПараметров();
	ДобавитьКолонкуВерсияИсполняющейСреды();
	ДобавитьКолонкуЭталон();
	ДобавитьКолонку(КолонкиОтчетаБенчмарков.СоздатьСреднее());
	ДобавитьКолонку(КолонкиОтчетаБенчмарков.СоздатьСтандартнаяОшибка());
	ДобавитьКолонку(КолонкиОтчетаБенчмарков.СоздатьСтандартноеОтклонение());
	ДобавитьКолонкуКоэффициентПроизводительности();
	ДобавитьКолонку(КолонкиОтчетаБенчмарков.СоздатьRatioSD());
	ДобавитьКолонкуМин();
	ДобавитьКолонкуНижнийКвартиль();
	ДобавитьКолонку(КолонкиОтчетаБенчмарков.СоздатьМедиана());
	ДобавитьКолонкуВерхнийКвартиль();
	ДобавитьКолонкуМакс();
	ДобавитьКолонкиПроцентилей();
	ДобавитьКолонку(КолонкиОтчетаБенчмарков.СоздатьОперацийВСекунду());
	ДобавитьКолонкуВыделяемаяПамять();

КонецПроцедуры

Процедура ДобавитьКолонкуПорядкаПоУмолчанию()
	_Отчет.Таблица.Колонки.Добавить(ИмяКолонкиПорядокПоУмолчанию());
КонецПроцедуры

Процедура ДобавитьКолонкуРасшифровкаРезультатов()
	_Отчет.Таблица.Колонки.Добавить(ИмяКолонкиРасшифровкаРезультатов());
КонецПроцедуры

Процедура ДобавитьКолонкиПараметров()

	Для Каждого Параметр Из _Конфигурация.Параметры() Цикл
		ДобавитьКолонку(КолонкиОтчетаБенчмарков.СоздатьПараметр(Параметр.Имя));
	КонецЦикла;

	Для Каждого ДескрипторБенчмарка Из _ДескрипторыБенчмарков.ВМассив() Цикл
		Для Каждого Имя Из ДескрипторБенчмарка.ИменаПараметров() Цикл
			ДобавитьКолонку(КолонкиОтчетаБенчмарков.СоздатьПараметр(Имя));
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьКолонкуЭталон()

	Если ИспользуетсяЭталон() Тогда
		ДобавитьКолонку(КолонкиОтчетаБенчмарков.СоздатьЭталон());
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКолонкуВерсияИсполняющейСреды()

	ЕстьВерсия = Ложь;

	Для Каждого СтрокаРасшифровкиЗамеров Из _РасшифровкаРезультатов Цикл
		Если ЗначениеЗаполнено(СтрокаРасшифровкиЗамеров.ИсполняющаяСреда.Версия) Тогда
			ЕстьВерсия = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ЕстьВерсия Тогда
		ДобавитьКолонку(КолонкиОтчетаБенчмарков.СоздатьВерсияИсполняющейСреды());
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКолонкуКатегория()

	ЕстьКатегория = Ложь;

	Для Каждого ДескрипторБенчмарка Из _ДескрипторыБенчмарков.ВМассив() Цикл
		Если ЗначениеЗаполнено(ДескрипторБенчмарка.Категория()) Тогда
			ЕстьКатегория = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ЕстьКатегория Тогда
		ДобавитьКолонку(КолонкиОтчетаБенчмарков.СоздатьКатегория());
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКолонкуКоэффициентПроизводительности()

	Если ИспользуетсяЭталон() Тогда
		ДобавитьКолонку(КолонкиОтчетаБенчмарков.СоздатьКоэффициентПроизводительности());
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКолонкуВыделяемаяПамять()

	Если _Конфигурация.ТребуетсяМониторингПамяти() Тогда
		ДобавитьКолонку(КолонкиОтчетаБенчмарков.СоздатьВыделяемаяПамять());
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКолонкуМин()

	Если ЕстьКолонкаКонфигурации(КолонкиОтчетаБенчмарков.Мин) Тогда
		ДобавитьКолонку(КолонкиОтчетаБенчмарков.СоздатьМин());
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьКолонкуМакс()
	
	Если ЕстьКолонкаКонфигурации(КолонкиОтчетаБенчмарков.Макс) Тогда
		ДобавитьКолонку(КолонкиОтчетаБенчмарков.СоздатьМакс());
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьКолонкуНижнийКвартиль()
	
	Если ЕстьКолонкаКонфигурации(КолонкиОтчетаБенчмарков.НижнийКвартиль) Тогда
		ДобавитьКолонку(КолонкиОтчетаБенчмарков.СоздатьНижнийКвартиль());
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьКолонкуВерхнийКвартиль()
	
	Если ЕстьКолонкаКонфигурации(КолонкиОтчетаБенчмарков.ВерхнийКвартиль) Тогда
		ДобавитьКолонку(КолонкиОтчетаБенчмарков.СоздатьВерхнийКвартиль());
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьКолонкиПроцентилей()

	Для Каждого Колонка Из КолонкаОтчетаБенчмарковПроцентиль.СоздатьПоИмени(_КолонкиКонфигурации) Цикл
		ДобавитьКолонку(Колонка);
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьКолонку(Колонка)

	Если Не _Отчет.Таблица.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	_Отчет.Таблица.Колонки.Добавить(Колонка.Имя);
	_Отчет.Колонки.Добавить(Колонка);

КонецПроцедуры

Процедура СкрытьКолонки()
	
	СкрываемыеКолонки = Новый Массив();
	СкрываемыеКолонки.Добавить(ИмяКолонкиПорядокПоУмолчанию());
	СкрываемыеКолонки.Добавить(ИмяКолонкиРасшифровкаРезультатов());

	Для Каждого Колонка Из _Отчет.Колонки Цикл
		Если СкрыватьКолонку(Колонка) Тогда
			СкрываемыеКолонки.Добавить(Колонка);
		КонецЕсли;
	КонецЦикла;

	Для Каждого Колонка Из СкрываемыеКолонки Цикл	
		Если ТипЗнч(Колонка) = Тип("Строка") Тогда
			ИмяКолонки = Колонка;
		Иначе
			ИмяКолонки = Колонка.Имя;
			_Отчет.Колонки.Удалить(_Отчет.Колонки.Найти(Колонка));
		КонецЕсли;
		
		_Отчет.Таблица.Колонки.Удалить(ИмяКолонки);
	КонецЦикла;

КонецПроцедуры

Функция СкрыватьКолонку(Колонка)
	
	Если ЕстьКолонкаКонфигурации(Колонка.Имя) Или Не ЗначениеЗаполнено(Колонка.ФункцияСкрытия) Тогда
		Возврат Ложь;
	КонецЕсли;

	Действие = Лямбда.Выражение(Колонка.ФункцияСкрытия)
		.Интерфейс(ФункциональныеИнтерфейсы.УниФункция())
		.ВДействие();

	Скрывать = Истина;
	Для Каждого СтрокаОтчета Из _Отчет.Таблица Цикл

		Контекст = Новый Структура();
		Контекст.Вставить("Значение", СтрокаОтчета[Колонка.Имя]);
		Контекст.Вставить("Статистика", СтрокаОтчета.РасшифровкаРезультатов.Статистика);

		Попытка
			Скрывать = Действие.Выполнить(Контекст) = Истина;
		Исключение
			Продолжить;
		КонецПопытки;

		Если Не Скрывать Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Скрывать;
	
КонецФункции

Функция ЕстьКолонкаКонфигурации(ИмяКолонки)
	Возврат Не _КолонкиКонфигурации.Найти(ИмяКолонки) = Неопределено;
КонецФункции

Процедура ЗаполнитьДанными()

	НомерБенчмарка = 0;
	ПредыдущийБенчмарк = "";
	Для Каждого СтрокаРасшифровкиЗамеров Из _РасшифровкаРезультатов Цикл

		ИмяБенчмарка = СтрокаРасшифровкиЗамеров.ДескрипторБенчмарка.Метод();
		Если Не ПредыдущийБенчмарк = ИмяБенчмарка Тогда
			НомерБенчмарка = НомерБенчмарка + 1;
			ПредыдущийБенчмарк = ИмяБенчмарка;
		КонецЕсли;

		СтрокаОтчета = _Отчет.Таблица.Добавить();
		СтрокаОтчета[ИмяКолонкиПорядокПоУмолчанию()] = НомерБенчмарка;
		СтрокаОтчета[ИмяКолонкиРасшифровкаРезультатов()] = СтрокаРасшифровкиЗамеров;

		Для Каждого Колонка Из _Отчет.Колонки Цикл
			СтрокаОтчета[Колонка.Имя] = Колонка.Значение(СтрокаРасшифровкиЗамеров, Колонка);
		КонецЦикла;

	КонецЦИкла;

КонецПроцедуры

Процедура ОпределитьЧисловыеКолонки()

	Для Каждого Колонка Из _Отчет.Колонки Цикл

		Если Колонка.ЭтоЧисло Тогда
			Продолжить;
		КонецЕсли;

		ЗначенияКолонки = _Отчет.Таблица.ВыгрузитьКолонку(Колонка.Имя);
		Если МатематическиеФункцииБенчмарков.ТолькоЧисла(ЗначенияКолонки) Тогда
			Колонка.ЭтоЧисло = Истина;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьЕдиницыИзмеренияПредставления()

	Для Каждого Колонка Из _Отчет.Колонки Цикл
		
		Если Колонка.ЕдиницаИзмерения = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Минимальная = Неопределено;
		Для Каждого Строка Из _Отчет.Таблица Цикл
	
			Значение = Строка[Колонка.Имя];

			ЕдиницаИзмерения = ЕдиницыИзмеренийБенчмарков.Подобрать(Значение, Колонка.ЕдиницаИзмерения);

			Минимальная = ?(
				Минимальная = Неопределено, 
				ЕдиницаИзмерения, 
				ЕдиницыИзмеренийБенчмарков.Минимальная(Минимальная, ЕдиницаИзмерения)
			);
		КонецЦикла;

		Колонка.ЕдиницаИзмеренияПредставления = ?(Минимальная = Неопределено, Колонка.ЕдиницаИзмерения, Минимальная);

	КонецЦикла;	
	
КонецПроцедуры

Процедура ОпределитьФорматныеСтроки()

	Для Каждого Колонка Из _Отчет.Колонки Цикл
		
		Если Не Колонка.ЭтоЧисло Или ЗначениеЗаполнено(Колонка.ФорматнаяСтрока) Тогда
			Продолжить;
		КонецЕсли;

		МинЗначение = МинимальноеЗначение(Колонка.Имя);
		Если МинЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Если Не Колонка.ЕдиницаИзмерения = Неопределено И Не Колонка.ЕдиницаИзмеренияПредставления = Неопределено Тогда
			МинЗначение = ЕдиницыИзмеренийБенчмарков.Конвертировать(
				МинЗначение,
				Колонка.ЕдиницаИзмерения,
				Колонка.ЕдиницаИзмеренияПредставления
			);
		КонецЕсли;

		Разрядность = ПредставленияПоказателейБенчмарков.ПодобратьРазрядностьДробнойЧасти(
			МинЗначение,
			Колонка.ЕдиницаИзмерения);

		Колонка.ФорматнаяСтрока = ПредставленияПоказателейБенчмарков.ФорматнаяСтрокаЧисла(Разрядность);

	КонецЦикла;	
	
КонецПроцедуры

Процедура ОпределитьРазмерыКолонок()

	Для Каждого Колонка Из _Отчет.Колонки Цикл
		Колонка.Размер = СтрДлина(Колонка.Заголовок);
	КонецЦикла;

	Для Каждого Строка Из _Отчет.Таблица Цикл
		Для Каждого Колонка Из _Отчет.Колонки Цикл
			Значение = Строка[Колонка.Имя];
			Представление = СтрДлина(Колонка.ПредставлениеЗначения(Значение, Строка));
			Колонка.Размер = Макс(Колонка.Размер, Представление);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура Сортировать()
	
	Сортировка = _Конфигурация.СортировкаОтчета();

	КолонкиСортировки = Новый Массив();

	Если Сортировка = СортировкиОтчетаБенчмарков.ОтБыстрыхКМедленным Тогда

		ДобавитьСортировку(КолонкиСортировки, КолонкиОтчетаБенчмарков.Среднее, "Возр");

	ИначеЕсли Сортировка = СортировкиОтчетаБенчмарков.ОтМедленныхКБыстрым Тогда

		ДобавитьСортировку(КолонкиСортировки, КолонкиОтчетаБенчмарков.Среднее, "Убыв");

	ИначеЕсли Сортировка = СортировкиОтчетаБенчмарков.Метод Тогда

		ДобавитьСортировку(КолонкиСортировки, КолонкиОтчетаБенчмарков.Метод);

	КонецЕсли;

	ДобавитьСортировку(КолонкиСортировки, КолонкиОтчетаБенчмарков.Категория);
	ДобавитьСортировкуПоПараметрам(КолонкиСортировки);
	ДобавитьСортировку(КолонкиСортировки, ИмяКолонкиПорядокПоУмолчанию());

	_Отчет.Таблица.Сортировать(СтрСоединить(КолонкиСортировки, ", "));

КонецПроцедуры

Процедура ДобавитьСортировкуПоПараметрам(Сортировка)
	
	Для Каждого ИмяПараметра Из _Конфигурация.ИменаПараметров() Цикл
		ДобавитьСортировку(Сортировка, КолонкиОтчетаБенчмарков.Параметр(ИмяПараметра));
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьСортировку(Сортировка, ИмяКолонки, Направление = "")
	
	Если Не _Отчет.Таблица.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		Сортировка.Добавить(ИмяКолонки + " " + Направление);
	КонецЕсли;

КонецПроцедуры

Функция ИспользуетсяЭталон()

	ЕстьЭталоннаяВерсия = _Конфигурация.ВерсииИсполняющейСреды().Найти(Истина, "ЭтоЭталон") <> Неопределено;
	ЕстьЭталонныеБенчмарки = _ДескрипторыБенчмарков.ПолучитьЭталонные().Количество() > 0;

	Возврат ЕстьЭталоннаяВерсия Или ЕстьЭталонныеБенчмарки;

КонецФункции

Функция МинимальноеЗначение(ИмяКолонки)
	
	МинЗначение = Неопределено;
	Для Каждого Строка Из _Отчет.Таблица Цикл
		Значение = Строка[ИмяКолонки];
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			МинЗначение = ?(МинЗначение = Неопределено, Значение, Мин(МинЗначение, Значение));
		КонецЕсли;
	КонецЦикла;

	Возврат МинЗначение;

КонецФункции

Функция ИмяКолонкиПорядокПоУмолчанию()
	Возврат "ПорядокПоУмолчанию";
КонецФункции

Функция ИмяКолонкиРасшифровкаРезультатов()
	Возврат "РасшифровкаРезультатов";
КонецФункции

#КонецОбласти