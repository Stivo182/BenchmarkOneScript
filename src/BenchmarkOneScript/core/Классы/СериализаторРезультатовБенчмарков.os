#Использовать logos
#Использовать xml-parser

Перем _Лог; // Лог

// Сериализатор результатов бенчмарков
Процедура ПриСозданииОбъекта()
	_Лог = Логирование.ПолучитьЛог("oscript.lib.benchmark.СериализаторРезультатовБенчмарков");
КонецПроцедуры

#Область ПрограммныйИнтерфейс

// Сериализует результаты бенчмарков в JSON-файл
//
// Параметры:
//   РезультатыБенчмарков - Структура:
//     * Расшифровка - см. МенеджерРасшифровкиРезультатовБенчмарков.НоваяТаблицаРасшифровки
//     * СредаОкружения - СредаОкруженияБенчмарков
//   ИмяФайла - Строка - Имя файла, в который будут записаны результаты бенчмарков.
Процедура СериализоватьВJSON(РезультатыБенчмарков, ИмяФайла) Экспорт

	_Лог.Отладка("Начало формирования файла: %1", ИмяФайла);
	
	Данные = СтруктураДляСериализации(РезультатыБенчмарков);

	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);

	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.ОткрытьФайл(ИмяФайла, "UTF-8", , ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	ЗаписьJSON.Закрыть();

	_Лог.Отладка("Завершение формирования файла: %1", ИмяФайла);

КонецПроцедуры

// Десериализует результаты бенчмарков из JSON-файла
//
// Параметры:
//   ИмяФайла - Строка - Имя файла, из которого будут прочитаны результаты бенчмарков.
//   Конфигурация - КонфигурацияБенчмарков - Конфигурация
//
// Возвращаемое значение:
//   Структура:
//     * Расшифровка - см. МенеджерРасшифровкиРезультатовБенчмарков.НоваяТаблицаРасшифровки
//     * СредаОкружения - СредаОкруженияБенчмарков
Функция ДесериализоватьИзJSON(ИмяФайла, Конфигурация) Экспорт
		
	_Лог.Отладка("Начало чтения файла: %1", ИмяФайла);

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ИмяФайла, "UTF-8");
	Данные = ПрочитатьJSON(ЧтениеJSON, Ложь);
	ЧтениеJSON.Закрыть();

	_Лог.Отладка("Завершение чтения файла: %1", ИмяФайла);

	Возврат СобратьРезультатыБенчмарков(Данные, Конфигурация);

КонецФункции

// Сериализует результаты бенчмарков в XML-файл
//
// Параметры:
//   РезультатыБенчмарков - Структура:
//     * Расшифровка - см. МенеджерРасшифровкиРезультатовБенчмарков.НоваяТаблицаРасшифровки
//     * СредаОкружения - СредаОкруженияБенчмарков
//   ИмяФайла - Строка - Имя файла, в который будут записаны результаты бенчмарков.
Процедура СериализоватьВXML(РезультатыБенчмарков, ИмяФайла) Экспорт

	_Лог.Отладка("Начало формирования файла: %1", ИмяФайла);
	
	Данные = СтруктураДляСериализации(РезультатыБенчмарков);
	ПодготовитьЗначенияДляЗаписиВXML(Данные);
	ПодготовитьМассивыДляЗаписиВXML(Данные);
	Данные = Новый Структура("Отчет", Данные);

	ПроцессорXML = Новый СериализацияДанныхXML(Ложь);
	ПроцессорXML.ЗаписатьВФайл(Данные, ИмяФайла, Истина);

	_Лог.Отладка("Завершение формирования файла: %1", ИмяФайла);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтруктураДляСериализации(РезультатыБенчмарков)
	
	ИнформацияОПроцессоре = РезультатыБенчмарков.СредаОкружения.ИнформацияОПроцессоре;

	УзелСредаОкружения = Новый Структура();
	УзелСредаОкружения.Вставить("ВерсияBenchmarkOneScript", РезультатыБенчмарков.СредаОкружения.ВерсияБиблиотеки);
	УзелСредаОкружения.Вставить("ВерсияОС", РезультатыБенчмарков.СредаОкружения.ВерсияОС);
	УзелСредаОкружения.Вставить("ВерсияИсполняющейСреды", РезультатыБенчмарков.СредаОкружения.ВерсияИсполняющейСреды);
	УзелСредаОкружения.Вставить("ИмяПроцессора", ИнформацияОПроцессоре.ИмяПроцессора);
	УзелСредаОкружения.Вставить("КоличествоПроцессоров", ИнформацияОПроцессоре.КоличествоПроцессоров);
	УзелСредаОкружения.Вставить("КоличествоЯдер", ИнформацияОПроцессоре.КоличествоЯдер);
	УзелСредаОкружения.Вставить("КоличествоЛогическихПроцессоров", ИнформацияОПроцессоре.КоличествоЛогическихПроцессоров);

	УзелБенчмарки = Новый Массив();

	Для Каждого СтрокаРасшифровкиЗамеров Из РезультатыБенчмарков.Расшифровка Цикл

		УзелИсполняющаяСреда = Новый Структура();
		УзелИсполняющаяСреда.Вставить("Версия", СтрокаРасшифровкиЗамеров.ИсполняющаяСреда.Версия);
		УзелИсполняющаяСреда.Вставить("Алиас", СтрокаРасшифровкиЗамеров.ИсполняющаяСреда.Алиас);
		УзелИсполняющаяСреда.Вставить("Наименование", СтрокаРасшифровкиЗамеров.ИсполняющаяСреда.Наименование);

		УзелБенчмарк = Новый Структура();
		УзелБенчмарк.Вставить("Тип", Строка(СтрокаРасшифровкиЗамеров.ДескрипторБенчмарка.ТипОбъекта()));
		УзелБенчмарк.Вставить("Метод", СтрокаРасшифровкиЗамеров.ДескрипторБенчмарка.Метод());
		УзелБенчмарк.Вставить("Категория", СтрокаРасшифровкиЗамеров.ДескрипторБенчмарка.Категория());
		УзелБенчмарк.Вставить("ЭтоЭталон", СтрокаРасшифровкиЗамеров.ДескрипторБенчмарка.ЭтоЭталон());
		УзелБенчмарк.Вставить("ИсполняющаяСреда", УзелИсполняющаяСреда);
		УзелБенчмарк.Вставить("Параметры", Новый Структура());
		УзелБенчмарк.Вставить("Статистика", Новый Структура());
		УзелБенчмарк.Вставить("Замеры", Новый Массив());

		Статистика = СтрокаРасшифровкиЗамеров.Статистика;
		УзелБенчмарк.Статистика.Вставить("Значения", Новый Массив());
		УзелБенчмарк.Статистика.Вставить("Количество", 0);
		УзелБенчмарк.Статистика.Вставить("Мин", Статистика.Мин);
		УзелБенчмарк.Статистика.Вставить("Q1", Статистика.НижнийКвартиль);
		УзелБенчмарк.Статистика.Вставить("Медиана", Статистика.Медиана);
		УзелБенчмарк.Статистика.Вставить("Среднее", Статистика.Среднее);
		УзелБенчмарк.Статистика.Вставить("Q3", Статистика.ВерхнийКвартиль);
		УзелБенчмарк.Статистика.Вставить("Макс", Статистика.Макс);
		УзелБенчмарк.Статистика.Вставить("СтандартноеОтклонение", Статистика.СтандартноеОтклонение);
		УзелБенчмарк.Статистика.Вставить("СтандартнаяОшибкаСреднего", Статистика.СтандартнаяОшибкаСреднего);
		УзелБенчмарк.Статистика.Вставить("ОперацийВСекунду", Статистика.ОперацийВСекунду);
		УзелБенчмарк.Статистика.Вставить("Процентили", Новый Структура());
		
		// BSLLS:MagicNumber-off
		УзелБенчмарк.Статистика.Процентили.Вставить("P0", Статистика.Квантиль(0));
		УзелБенчмарк.Статистика.Процентили.Вставить("P25", Статистика.Квантиль(0.25)); 
		УзелБенчмарк.Статистика.Процентили.Вставить("P50", Статистика.Квантиль(0.5));
		УзелБенчмарк.Статистика.Процентили.Вставить("P67", Статистика.Квантиль(0.67));
		УзелБенчмарк.Статистика.Процентили.Вставить("P80", Статистика.Квантиль(0.8));
		УзелБенчмарк.Статистика.Процентили.Вставить("P85", Статистика.Квантиль(0.85));
		УзелБенчмарк.Статистика.Процентили.Вставить("P90", Статистика.Квантиль(0.90));
		УзелБенчмарк.Статистика.Процентили.Вставить("P95", Статистика.Квантиль(0.95));
		УзелБенчмарк.Статистика.Процентили.Вставить("P100", Статистика.Квантиль(1));
		// BSLLS:MagicNumber-on

		УзелБенчмарк.Статистика.Вставить("Память", Новый Структура());
		УзелБенчмарк.Статистика.Память.Вставить("ВыделяемаяЗаОперацию", Статистика.ВыделяемаяПамять);

		Для Каждого Замер Из СтрокаРасшифровкиЗамеров.Замеры Цикл

			Если Замер.Этап = ЭтапыБенчмарка.Измерение Тогда
				УзелБенчмарк.Статистика.Значения.Добавить(Замер.НаносекундЗаОперацию);
			КонецЕсли;

			УзелЗамера = Новый Структура();
			УзелЗамера.Вставить("Этап", Замер.Этап);
			УзелЗамера.Вставить("НомерИтерации", Замер.НомерИтерации);
			УзелЗамера.Вставить("КоличествоОпераций", Замер.КоличествоОпераций);
			УзелЗамера.Вставить("Наносекунд", Замер.Наносекунд);
			УзелЗамера.Вставить("НаносекундЗаОперацию", Замер.НаносекундЗаОперацию);
			УзелЗамера.Вставить("ВыделяемаяПамять", Замер.ВыделяемаяПамять);
			УзелЗамера.Вставить("ВыделяемаяПамятьЗаОперацию", Замер.ВыделяемаяПамятьЗаОперацию);
			
			УзелБенчмарк.Замеры.Добавить(УзелЗамера);

		КонецЦикла;

		УзелБенчмарк.Статистика.Количество = УзелБенчмарк.Статистика.Значения.Количество();

		Для Каждого Параметр Из СтрокаРасшифровкиЗамеров.Параметры Цикл
			Значение = СериализацияОбъектовБенчмаркинга.ПодготовитьЗначение(Параметр.Значение);
			УзелБенчмарк.Параметры.Вставить(Параметр.Имя, Значение);
		КонецЦикла;

		УзелБенчмарки.Добавить(УзелБенчмарк);

	КонецЦикла;

	Данные = Новый Структура();
	Данные.Вставить("СредаОкружения", УзелСредаОкружения);
	Данные.Вставить("Бенчмарки", УзелБенчмарки);

	Возврат Данные;

КонецФункции

Процедура ПодготовитьМассивыДляЗаписиВXML(Данные)
		
	Для Каждого Строка Из Данные.Бенчмарки Цикл
		ПодготовитьМассивДляЗаписиВXML(Строка.Статистика.Значения, "Значение");
		ПодготовитьМассивДляЗаписиВXML(Строка.Замеры, "Замер");
	КонецЦикла;

	ПодготовитьМассивДляЗаписиВXML(Данные.Бенчмарки, "Бенчмарк");

КонецПроцедуры

Процедура ПодготовитьЗначенияДляЗаписиВXML(Данные)

	// В xml-parser не все простые типы корректно сериализуются
	Для Каждого Строка Из Данные.Бенчмарки Цикл
		Для Каждого Параметр Из Строка.Параметры Цикл
			Если СериализацияОбъектовБенчмаркинга.ЗначениеСериализуется(Параметр.Значение) Тогда
				Строка.Параметры[Параметр.Ключ] = XMLСтрока(Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьМассивДляЗаписиВXML(Массив, Имя)

	Для Инд = 0 По Массив.ВГраница() Цикл
		Значение = Массив[Инд];
		Массив[Инд] = Новый Структура(Имя, Значение);
	КонецЦикла;

КонецПроцедуры

Функция СобратьРезультатыБенчмарков(Данные, Конфигурация)

	// Расшифровка замеров
	МенеджерРасшифровкиРезультатов = Новый МенеджерРасшифровкиРезультатовБенчмарков();

	Для Каждого УзелБенчмарк Из Данные.Бенчмарки Цикл

		ДескрипторБенчмарка = Новый ДескрипторБенчмарка(Тип(УзелБенчмарк.Тип), УзелБенчмарк.Метод);
		ДескрипторБенчмарка.ИспользоватьКакЭталон(УзелБенчмарк.ЭтоЭталон);

		Если ЗначениеЗаполнено(УзелБенчмарк.Категория) Тогда
			ДескрипторБенчмарка.УстановитьКатегорию(УзелБенчмарк.Категория);
		КонецЕсли;

		СтрокаТаблицы = МенеджерРасшифровкиРезультатов.Добавить();
		СтрокаТаблицы.ДескрипторБенчмарка = ДескрипторБенчмарка;
		СтрокаТаблицы.ИсполняющаяСреда.Версия = УзелБенчмарк.ИсполняющаяСреда.Версия;
		СтрокаТаблицы.ИсполняющаяСреда.Алиас = УзелБенчмарк.ИсполняющаяСреда.Алиас;
		СтрокаТаблицы.ИсполняющаяСреда.Наименование = УзелБенчмарк.ИсполняющаяСреда.Наименование;

		ЗаполнитьПараметрыВСтроке(СтрокаТаблицы, УзелБенчмарк);
		ЗаполнитьЗамерыВСтроке(СтрокаТаблицы, УзелБенчмарк);

	КонецЦикла;

	МенеджерРасшифровкиРезультатов.ОпределитьЭталоны(Конфигурация);
	МенеджерРасшифровкиРезультатов.ОбновитьСтатистику();

	// Среда окружения
	УзелСредаОкружения = Данные.СредаОкружения;

	ИнформацияОПроцессоре = Новый ИнформацияОПроцессоре(Ложь);
	ИнформацияОПроцессоре.ИмяПроцессора = УзелСредаОкружения.ИмяПроцессора;
	ИнформацияОПроцессоре.КоличествоПроцессоров = УзелСредаОкружения.КоличествоПроцессоров;
	ИнформацияОПроцессоре.КоличествоЯдер = УзелСредаОкружения.КоличествоЯдер;
	ИнформацияОПроцессоре.КоличествоЛогическихПроцессоров = УзелСредаОкружения.КоличествоЛогическихПроцессоров;

	СредаОкружения = Новый СредаОкруженияБенчмарков();
	СредаОкружения.ВерсияБиблиотеки = УзелСредаОкружения.ВерсияBenchmarkOneScript;
	СредаОкружения.ВерсияОС = УзелСредаОкружения.ВерсияОС;
	СредаОкружения.ВерсияИсполняющейСреды = УзелСредаОкружения.ВерсияИсполняющейСреды;
	СредаОкружения.ИнформацияОПроцессоре = ИнформацияОПроцессоре;

	// Подготовка результата
	Результат = Новый Структура();
	Результат.Вставить("Расшифровка", МенеджерРасшифровкиРезультатов.ВТаблицу());
	Результат.Вставить("СредаОкружения", СредаОкружения);

	Возврат Результат;

КонецФункции

Процедура ЗаполнитьПараметрыВСтроке(СтрокаРезультата, УзелБенчмарк)
		
	ИменаПараметровБенчмарка = СтрокаРезультата.ДескрипторБенчмарка.ИменаПараметров();
	КоличествоПараметров = ИменаПараметровБенчмарка.Количество();

	Если КоличествоПараметров = 0 Тогда
		ПараметрыМетода = Новый Массив();
	Иначе
		ПараметрыМетода = Новый Массив(КоличествоПараметров);
	КонецЕсли;
	
	Для Каждого УзелПараметр Из УзелБенчмарк.Параметры Цикл

		Имя = УзелПараметр.Ключ;
		Значение = УзелПараметр.Значение;

		ИндексПараметра = ИменаПараметровБенчмарка.Найти(Имя);
		ЭтоПараметрМетода = Не ИндексПараметра = Неопределено;

		ПараметрБенчмарка = Новый ПараметрБенчмарка(Имя, Значение, ЭтоПараметрМетода);
		СтрокаРезультата.Параметры.Добавить(ПараметрБенчмарка);

		Если ЭтоПараметрМетода Тогда
			ПараметрыМетода[ИндексПараметра] = Значение;
		КонецЕсли;

	КонецЦикла;

	Если ПараметрыМетода.Количество() > 0 Тогда
		СтрокаРезультата.ДескрипторБенчмарка.ДобавитьПараметры(ПараметрыМетода);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьЗамерыВСтроке(СтрокаРезультата, УзелБенчмарк)

	Для Каждого УзелЗамер Из УзелБенчмарк.Замеры Цикл
	
		СтрокаЗамера = СтрокаРезультата.Замеры.Добавить();
		СтрокаЗамера.Этап = УзелЗамер.Этап;
		СтрокаЗамера.НомерИтерации = ВЧисло(УзелЗамер.НомерИтерации);
		СтрокаЗамера.КоличествоОпераций = ВЧисло(УзелЗамер.КоличествоОпераций);
		СтрокаЗамера.Наносекунд = ВЧисло(УзелЗамер.Наносекунд);
		СтрокаЗамера.НаносекундЗаОперацию = ВЧисло(УзелЗамер.НаносекундЗаОперацию);
		СтрокаЗамера.ВыделяемаяПамять = ВЧисло(УзелЗамер.ВыделяемаяПамять);
		СтрокаЗамера.ВыделяемаяПамятьЗаОперацию = ВЧисло(УзелЗамер.ВыделяемаяПамятьЗаОперацию);

	КонецЦикла;

КонецПроцедуры

Функция ВЧисло(Значение)
	Возврат XMLЗначение(Тип("Число"), Значение);
КонецФункции

#КонецОбласти