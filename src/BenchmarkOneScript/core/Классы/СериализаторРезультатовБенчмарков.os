#Использовать logos
#Использовать xml-parser

Перем _Лог; // Лог

#Область Конструктор

// Сериализатор результатов бенчмарков
Процедура ПриСозданииОбъекта()
	_Лог = Логирование.ПолучитьЛог("oscript.lib.benchmark.СериализаторРезультатовБенчмарков");
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Сериализует результаты бенчмарков в JSON-файл
//
// Параметры:
//   РезультатыБенчмарков - Структура - Данные результатов бенчмарков:
//     * Расшифровка - ТаблицаЗначений - см. МенеджерРасшифровкиРезультатовБенчмарков.НоваяТаблицаРасшифровки
//     * СредаОкружения - СредаОкруженияБенчмарков - Информация о среде выполнения бенчмарков
//   ПолноеИмяФайла - Строка - Полный путь к файлу, в который будут записаны результаты бенчмарков
Процедура СериализоватьВJSON(РезультатыБенчмарков, ПолноеИмяФайла) Экспорт

	_Лог.Отладка("Начало сериализации результатов в JSON-файл: %1", ПолноеИмяФайла);
	
	Данные = ПодготовитьРезультатыБенчмарковДляСериализации(РезультатыБенчмарков);

	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);

	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.ОткрытьФайл(ПолноеИмяФайла, "UTF-8", , ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	ЗаписьJSON.Закрыть();

	_Лог.Отладка("Сериализация в JSON-файл завершена: %1", ПолноеИмяФайла);

КонецПроцедуры

// Десериализует результаты бенчмарков из JSON-файла
//
// Параметры:
//   ПолноеИмяФайла - Строка - Полный путь к JSON-файлу с результатами бенчмарков
//   Конфигурация - КонфигурацияБенчмарков - Конфигурация бенчмарков
//
// Возвращаемое значение:
//   Структура:
//     * Расшифровка - см. МенеджерРасшифровкиРезультатовБенчмарков.НоваяТаблицаРасшифровки
//     * СредаОкружения - СредаОкруженияБенчмарков
Функция ДесериализоватьИзJSON(ПолноеИмяФайла, Конфигурация) Экспорт
		
	_Лог.Отладка("Начало десериализации из JSON-файла: %1", ПолноеИмяФайла);

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
	Данные = ПрочитатьJSON(ЧтениеJSON, Ложь);
	ЧтениеJSON.Закрыть();

	_Лог.Отладка("Десериализация из JSON-файла завершена: %1", ПолноеИмяФайла);

	Возврат СобратьРезультатыБенчмарков(Данные, Конфигурация);

КонецФункции

// Сериализует результаты бенчмарков в XML-файл
//
// Параметры:
//   РезультатыБенчмарков - Структура - Данные результатов бенчмарков:
//     * Расшифровка - ТаблицаЗначений - см. МенеджерРасшифровкиРезультатовБенчмарков.НоваяТаблицаРасшифровки
//     * СредаОкружения - СредаОкруженияБенчмарков - Информация о среде выполнения бенчмарков
//   ПолноеИмяФайла - Строка - Полный путь к файлу, в который будут записаны результаты бенчмарков
Процедура СериализоватьВXML(РезультатыБенчмарков, ПолноеИмяФайла) Экспорт

	_Лог.Отладка("Начало сериализации результатов в XML-файл: %1", ПолноеИмяФайла);
	
	Данные = ПодготовитьРезультатыБенчмарковДляСериализации(РезультатыБенчмарков);

	// Преобразование данных для корректной записи в XML
	ПодготовитьЗначенияДляЗаписиВXML(Данные);
	ПодготовитьМассивыДляЗаписиВXML(Данные);

	Данные = Новый Структура("Отчет", Данные);

	// Запись данных в XML-файл
	ПроцессорXML = Новый СериализацияДанныхXML(Ложь);
	ПроцессорXML.ЗаписатьВФайл(Данные, ПолноеИмяФайла, Истина);

	_Лог.Отладка("Сериализация в XML-файл завершена: %1", ПолноеИмяФайла);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Сериализация

Функция ПодготовитьРезультатыБенчмарковДляСериализации(РезультатыБенчмарков)

	Данные = Новый Структура();
	Данные.Вставить("СредаОкружения", ПодготовитьСредуОкруженияДляСериализации(РезультатыБенчмарков.СредаОкружения));
	Данные.Вставить("Бенчмарки", ПодготовитьРасшифровкуЗамеровДляСериализации(РезультатыБенчмарков.Расшифровка));

	Возврат Данные;

КонецФункции

Функция ПодготовитьСредуОкруженияДляСериализации(СредаОкружения)
		
	ИнформацияОПроцессоре = СредаОкружения.ИнформацияОПроцессоре;
	
	ДанныеОкружения = Новый Структура();
	ДанныеОкружения.Вставить("ВерсияBenchmarkOneScript", СредаОкружения.ВерсияБиблиотеки);
	ДанныеОкружения.Вставить("ВерсияОС", СредаОкружения.ВерсияОС);
	ДанныеОкружения.Вставить("ВерсияИсполняющейСреды", СредаОкружения.ВерсияИсполняющейСреды);
	ДанныеОкружения.Вставить("ИмяПроцессора", ИнформацияОПроцессоре.ИмяПроцессора);
	ДанныеОкружения.Вставить("КоличествоПроцессоров", ИнформацияОПроцессоре.КоличествоПроцессоров);
	ДанныеОкружения.Вставить("КоличествоЯдер", ИнформацияОПроцессоре.КоличествоЯдер);
	ДанныеОкружения.Вставить("КоличествоЛогическихПроцессоров", ИнформацияОПроцессоре.КоличествоЛогическихПроцессоров);

	Возврат ДанныеОкружения;

КонецФункции

Функция ПодготовитьРасшифровкуЗамеровДляСериализации(Расшифровка)
		
	ДанныеБенчмарки = Новый Массив();
	Для Каждого СтрокаРасшифровкиЗамеров Из Расшифровка Цикл	
		ДанныеБенчмарки.Добавить(ПодготовитьСтрокуРасшифровкиЗамеровДляСериализации(СтрокаРасшифровкиЗамеров));
	КонецЦикла;

	Возврат ДанныеБенчмарки;

КонецФункции

Функция ПодготовитьСтрокуРасшифровкиЗамеровДляСериализации(Строка)
	
	ДанныеИсполняющаяСреда = Новый Структура();
	ДанныеИсполняющаяСреда.Вставить("Версия", Строка.ИсполняющаяСреда.Версия);
	ДанныеИсполняющаяСреда.Вставить("Алиас", Строка.ИсполняющаяСреда.Алиас);
	ДанныеИсполняющаяСреда.Вставить("Наименование", Строка.ИсполняющаяСреда.Наименование);

	ДанныеБенчмарк = Новый Структура();
	ДанныеБенчмарк.Вставить("Тип", Строка(Строка.ДескрипторБенчмарка.ТипОбъекта()));
	ДанныеБенчмарк.Вставить("Метод", Строка.ДескрипторБенчмарка.Метод());
	ДанныеБенчмарк.Вставить("Категория", Строка.ДескрипторБенчмарка.Категория());
	ДанныеБенчмарк.Вставить("ЭтоЭталон", Строка.ДескрипторБенчмарка.ЭтоЭталон());
	ДанныеБенчмарк.Вставить("ИсполняющаяСреда", ДанныеИсполняющаяСреда);
	ДанныеБенчмарк.Вставить("Параметры", ПодготовитьПараметрыДляСериализации(Строка.Параметры));
	ДанныеБенчмарк.Вставить("Статистика", ПодготовитьСтатистикуДляСериализации(Строка.Статистика, Строка.Замеры));
	ДанныеБенчмарк.Вставить("Замеры", ПодготовитьЗамерыДляСериализации(Строка.Замеры));

	Для Каждого Параметр Из Строка.Параметры Цикл
		Значение = СериализацияОбъектовБенчмаркинга.ПодготовитьЗначение(Параметр.Значение);
		ДанныеБенчмарк.Параметры.Вставить(Параметр.Имя, Значение);
	КонецЦикла;

	Возврат ДанныеБенчмарк;

КонецФункции

Функция ПодготовитьПараметрыДляСериализации(Параметры)
		
	ДанныеПараметры = Новый Структура();

	Для Каждого Параметр Из Параметры Цикл
		Значение = СериализацияОбъектовБенчмаркинга.ПодготовитьЗначение(Параметр.Значение);
		ДанныеПараметры.Вставить(Параметр.Имя, Значение);
	КонецЦикла;

	Возврат ДанныеПараметры;

КонецФункции

Функция ПодготовитьСтатистикуДляСериализации(Статистика, Замеры)
	
	ДанныеСтатистика = Новый Структура();
	ДанныеСтатистика.Вставить("Значения", Новый Массив());
	ДанныеСтатистика.Вставить("Количество", 0);
	ДанныеСтатистика.Вставить("Мин", Статистика.Мин);
	ДанныеСтатистика.Вставить("Q1", Статистика.НижнийКвартиль);
	ДанныеСтатистика.Вставить("Медиана", Статистика.Медиана);
	ДанныеСтатистика.Вставить("Среднее", Статистика.Среднее);
	ДанныеСтатистика.Вставить("Q3", Статистика.ВерхнийКвартиль);
	ДанныеСтатистика.Вставить("Макс", Статистика.Макс);
	ДанныеСтатистика.Вставить("СтандартноеОтклонение", Статистика.СтандартноеОтклонение);
	ДанныеСтатистика.Вставить("СтандартнаяОшибкаСреднего", Статистика.СтандартнаяОшибкаСреднего);
	ДанныеСтатистика.Вставить("ОперацийВСекунду", Статистика.ОперацийВСекунду);
	ДанныеСтатистика.Вставить("Процентили", Новый Структура());
	
	// BSLLS:MagicNumber-off
	ДанныеСтатистика.Процентили.Вставить("P0", Статистика.Квантиль(0));
	ДанныеСтатистика.Процентили.Вставить("P25", Статистика.Квантиль(0.25)); 
	ДанныеСтатистика.Процентили.Вставить("P50", Статистика.Квантиль(0.5));
	ДанныеСтатистика.Процентили.Вставить("P67", Статистика.Квантиль(0.67));
	ДанныеСтатистика.Процентили.Вставить("P80", Статистика.Квантиль(0.8));
	ДанныеСтатистика.Процентили.Вставить("P85", Статистика.Квантиль(0.85));
	ДанныеСтатистика.Процентили.Вставить("P90", Статистика.Квантиль(0.90));
	ДанныеСтатистика.Процентили.Вставить("P95", Статистика.Квантиль(0.95));
	ДанныеСтатистика.Процентили.Вставить("P100", Статистика.Квантиль(1));
	// BSLLS:MagicNumber-on

	ДанныеСтатистика.Вставить("Память", Новый Структура());
	ДанныеСтатистика.Память.Вставить("ВыделяемаяЗаОперацию", Статистика.ВыделяемаяПамять);

	Для Каждого Замер Из Замеры Цикл
		Если Замер.Этап = ЭтапыБенчмарка.Измерение Тогда
			ДанныеСтатистика.Значения.Добавить(Замер.НаносекундЗаОперацию);
		КонецЕсли;
	КонецЦикла;

	ДанныеСтатистика.Количество = ДанныеСтатистика.Значения.Количество();

	Возврат ДанныеСтатистика;

КонецФункции

Функция ПодготовитьЗамерыДляСериализации(Замеры)

	ДанныеЗамеры = Новый Массив();

	Для Каждого Замер Из Замеры Цикл

		ДанныеЗамер = Новый Структура();
		ДанныеЗамер.Вставить("Этап", Замер.Этап);
		ДанныеЗамер.Вставить("НомерИтерации", Замер.НомерИтерации);
		ДанныеЗамер.Вставить("КоличествоОпераций", Замер.КоличествоОпераций);
		ДанныеЗамер.Вставить("Наносекунд", Замер.Наносекунд);
		ДанныеЗамер.Вставить("НаносекундЗаОперацию", Замер.НаносекундЗаОперацию);
		ДанныеЗамер.Вставить("ВыделяемаяПамять", Замер.ВыделяемаяПамять);
		ДанныеЗамер.Вставить("ВыделяемаяПамятьЗаОперацию", Замер.ВыделяемаяПамятьЗаОперацию);
		
		ДанныеЗамеры.Добавить(ДанныеЗамер);

	КонецЦикла;

	Возврат ДанныеЗамеры;

КонецФункции

Процедура ПодготовитьМассивыДляЗаписиВXML(Данные)
		
	Для Каждого Строка Из Данные.Бенчмарки Цикл
		ПодготовитьМассивДляЗаписиВXML(Строка.Статистика.Значения, "Значение");
		ПодготовитьМассивДляЗаписиВXML(Строка.Замеры, "Замер");
	КонецЦикла;

	ПодготовитьМассивДляЗаписиВXML(Данные.Бенчмарки, "Бенчмарк");

КонецПроцедуры

Процедура ПодготовитьЗначенияДляЗаписиВXML(Данные)

	// В xml-parser не все простые типы корректно сериализуются
	Для Каждого Строка Из Данные.Бенчмарки Цикл
		Для Каждого Параметр Из Строка.Параметры Цикл
			Если СериализацияОбъектовБенчмаркинга.ЗначениеСериализуется(Параметр.Значение) Тогда
				Строка.Параметры[Параметр.Ключ] = XMLСтрока(Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьМассивДляЗаписиВXML(Массив, Имя)

	Для Инд = 0 По Массив.ВГраница() Цикл
		Значение = Массив[Инд];
		Массив[Инд] = Новый Структура(Имя, Значение);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Десериализация

Функция СобратьРезультатыБенчмарков(Данные, Конфигурация)

	// Расшифровка замеров
	МенеджерРасшифровкиРезультатов = Новый МенеджерРасшифровкиРезультатовБенчмарков();

	ДескрипторыБенчмарков = Новый Соответствие();

	Для Каждого ДанныеБенчмарк Из Данные.Бенчмарки Цикл

		ДескрипторБенчмарка = СобратьДескрипторБенчмарка(ДанныеБенчмарк, ДескрипторыБенчмарков, Конфигурация);

		СтрокаТаблицы = МенеджерРасшифровкиРезультатов.Добавить();
		СтрокаТаблицы.ДескрипторБенчмарка = ДескрипторБенчмарка;
		СтрокаТаблицы.ИсполняющаяСреда.Версия = ДанныеБенчмарк.ИсполняющаяСреда.Версия;
		СтрокаТаблицы.ИсполняющаяСреда.Алиас = ДанныеБенчмарк.ИсполняющаяСреда.Алиас;
		СтрокаТаблицы.ИсполняющаяСреда.Наименование = ДанныеБенчмарк.ИсполняющаяСреда.Наименование;

		ЗаполнитьПараметрыВСтроке(СтрокаТаблицы, ДанныеБенчмарк);
		ЗаполнитьЗамерыВСтроке(СтрокаТаблицы, ДанныеБенчмарк);

	КонецЦикла;

	МенеджерРасшифровкиРезультатов.ОпределитьЭталоны(Конфигурация);
	МенеджерРасшифровкиРезультатов.ОбновитьСтатистику();

	// Среда окружения
	ДанныеОкружения = Данные.СредаОкружения;

	ИнформацияОПроцессоре = Новый ИнформацияОПроцессоре(Ложь);
	ИнформацияОПроцессоре.ИмяПроцессора = ДанныеОкружения.ИмяПроцессора;
	ИнформацияОПроцессоре.КоличествоПроцессоров = ДанныеОкружения.КоличествоПроцессоров;
	ИнформацияОПроцессоре.КоличествоЯдер = ДанныеОкружения.КоличествоЯдер;
	ИнформацияОПроцессоре.КоличествоЛогическихПроцессоров = ДанныеОкружения.КоличествоЛогическихПроцессоров;

	СредаОкружения = Новый СредаОкруженияБенчмарков();
	СредаОкружения.ВерсияБиблиотеки = ДанныеОкружения.ВерсияBenchmarkOneScript;
	СредаОкружения.ВерсияОС = ДанныеОкружения.ВерсияОС;
	СредаОкружения.ВерсияИсполняющейСреды = ДанныеОкружения.ВерсияИсполняющейСреды;
	СредаОкружения.ИнформацияОПроцессоре = ИнформацияОПроцессоре;

	// Подготовка результата
	Результат = Новый Структура();
	Результат.Вставить("Расшифровка", МенеджерРасшифровкиРезультатов.ВТаблицу());
	Результат.Вставить("СредаОкружения", СредаОкружения);

	Возврат Результат;

КонецФункции

Функция СобратьДескрипторБенчмарка(ДанныеБенчмарк, ДескрипторыБенчмарков, Конфигурация)
		
	Тип = Тип(ДанныеБенчмарк.Тип);
	ЭталоннаяВерсия = Конфигурация.ЭталоннаяВерсияИсполняющейСреды();
	
	Если ДескрипторыБенчмарков[Тип] = Неопределено Тогда
		ДескрипторыБенчмарков[Тип] = Новый Соответствие();
	КонецЕсли;

	ДескрипторБенчмарка = ДескрипторыБенчмарков[Тип][ДанныеБенчмарк.Метод];
	Если Не ДескрипторБенчмарка = Неопределено Тогда
		Возврат ДескрипторБенчмарка;
	КонецЕсли;

	ДескрипторБенчмарка = Новый ДескрипторБенчмарка(Тип, ДанныеБенчмарк.Метод);

	Если ДанныеБенчмарк.ЭтоЭталон И Не ЗначениеЗаполнено(ЭталоннаяВерсия) Тогда
		ДескрипторБенчмарка.ИспользоватьКакЭталон(ДанныеБенчмарк.ЭтоЭталон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеБенчмарк.Категория) Тогда
		ДескрипторБенчмарка.УстановитьКатегорию(ДанныеБенчмарк.Категория);
	КонецЕсли;

	ДескрипторыБенчмарков[Тип].Вставить(ДанныеБенчмарк.Метод, ДескрипторБенчмарка);

	Возврат ДескрипторБенчмарка;

КонецФункции

Процедура ЗаполнитьПараметрыВСтроке(СтрокаРезультата, ДанныеБенчмарк)
		
	ИменаПараметровБенчмарка = СтрокаРезультата.ДескрипторБенчмарка.ИменаПараметров();
	КоличествоПараметров = ИменаПараметровБенчмарка.Количество();

	Если КоличествоПараметров = 0 Тогда
		ПараметрыМетода = Новый Массив();
	Иначе
		ПараметрыМетода = Новый Массив(КоличествоПараметров);
	КонецЕсли;
	
	Для Каждого ДанныеПараметр Из ДанныеБенчмарк.Параметры Цикл

		Имя = ДанныеПараметр.Ключ;
		Значение = ДанныеПараметр.Значение;

		ИндексПараметра = ИменаПараметровБенчмарка.Найти(Имя);
		ЭтоПараметрМетода = Не ИндексПараметра = Неопределено;

		ПараметрБенчмарка = Новый ПараметрБенчмарка(Имя, Значение, ЭтоПараметрМетода);
		СтрокаРезультата.Параметры.Добавить(ПараметрБенчмарка);

		Если ЭтоПараметрМетода Тогда
			ПараметрыМетода[ИндексПараметра] = Значение;
		КонецЕсли;

	КонецЦикла;

	Если ПараметрыМетода.Количество() > 0 
		И ОтсутствуетНаборПараметровБенчмарка(СтрокаРезультата.ДескрипторБенчмарка, ПараметрыМетода) Тогда
		СтрокаРезультата.ДескрипторБенчмарка.ДобавитьПараметры(ПараметрыМетода);
	КонецЕсли;

КонецПроцедуры

Функция ОтсутствуетНаборПараметровБенчмарка(ДескрипторБенчмарка, ПараметрыМетода)
			
	НайденНабор = Ложь;
	Для Каждого НаборПараметров Из ДескрипторБенчмарка.НаборыПараметров() Цикл
		НайденНабор = Истина;
		Для Инд = 0 По НаборПараметров.ВГраница() Цикл
			Если Не НаборПараметров[Инд].Значение = ПараметрыМетода[Инд] Тогда
				НайденНабор = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Не НайденНабор;

КонецФункции

Процедура ЗаполнитьЗамерыВСтроке(СтрокаРезультата, ДанныеБенчмарк)

	Для Каждого ДанныеЗамер Из ДанныеБенчмарк.Замеры Цикл
	
		СтрокаЗамера = СтрокаРезультата.Замеры.Добавить();
		СтрокаЗамера.Этап = ДанныеЗамер.Этап;
		СтрокаЗамера.НомерИтерации = ВЧисло(ДанныеЗамер.НомерИтерации);
		СтрокаЗамера.КоличествоОпераций = ВЧисло(ДанныеЗамер.КоличествоОпераций);
		СтрокаЗамера.Наносекунд = ВЧисло(ДанныеЗамер.Наносекунд);
		СтрокаЗамера.НаносекундЗаОперацию = ВЧисло(ДанныеЗамер.НаносекундЗаОперацию);
		СтрокаЗамера.ВыделяемаяПамять = ВЧисло(ДанныеЗамер.ВыделяемаяПамять);
		СтрокаЗамера.ВыделяемаяПамятьЗаОперацию = ВЧисло(ДанныеЗамер.ВыделяемаяПамятьЗаОперацию);

	КонецЦикла;

КонецПроцедуры

Функция ВЧисло(Значение)
	Возврат XMLЗначение(Тип("Число"), Значение);
КонецФункции

#КонецОбласти

#КонецОбласти