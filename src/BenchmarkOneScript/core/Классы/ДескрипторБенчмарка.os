#Использовать delegate

Перем _Тип; // Тип - Тип объекта бенчмарков
Перем _Метод; // Строка - Метод бенчмарка
Перем _ЭтоЭталон; // Булево
Перем _Категория; // Строка
Перем _НаборыПараметров; // Массив из Массив из ПараметрБенчмарка
Перем _ИменаПараметров; // Массив из Строка

// Дескриптор бенчмарка
//
// Параметры:
//   Объект - Произвольный - Объект бенчмарков
//   Метод - Строка - Метод бенчмарка
Процедура ПриСозданииОбъекта(Объект, Метод)

	_Тип = ТипЗнч(Объект);
	_Метод = Метод;
	_НаборыПараметров = Новый Массив();
	_ЭтоЭталон = Ложь;
	_Категория = "";

	ИзвлечьИменаПараметров(Объект);
	
КонецПроцедуры

// Тип объекта бенчмарков
//
// Возвращаемое значение:
//   Тип
Функция ТипОбъекта() Экспорт
	Возврат _Тип;
КонецФункции

// Метод бенчмарка
//
// Возвращаемое значение:
//   Строка
Функция Метод() Экспорт
	Возврат _Метод;
КонецФункции

// Параметры, используемые для запуска бенчмарков с разными наборами входных данных
//
// Возвращаемое значение:
//   Массив из Массив из ПараметрБенчмарка
Функция НаборыПараметров() Экспорт
	Возврат Новый Массив(Новый ФиксированныйМассив(_НаборыПараметров));
КонецФункции

// Добавляет параметры в набор, позволяя запускать тесты с разными наборами входных данных
//
// Параметры:
//   Параметры - Произвольный, Массив из Произвольный
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ДобавитьПараметры(Параметры) Экспорт
	
	МассивПараметров = Новый Массив();

	Если ТипЗнч(Параметры) = Тип("Массив") Тогда

		Для ИндексПараметра = 0 По Параметры.ВГраница() Цикл
			Параметр = Новый ПараметрБенчмарка(_ИменаПараметров[ИндексПараметра], Параметры[ИндексПараметра], Истина);
			МассивПараметров.Добавить(Параметр);		
		КонецЦикла;

	Иначе

		Параметр = Новый ПараметрБенчмарка(_ИменаПараметров[0], Параметры, Истина);
		МассивПараметров.Добавить(Параметр);	

	КонецЕсли;

	_НаборыПараметров.Добавить(МассивПараметров);

	Возврат ЭтотОбъект;

КонецФункции

// Очищает набор параметров
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ОчиститьПараметры() Экспорт

	_НаборыПараметров.Очистить();

	Возврат ЭтотОбъект;

КонецФункции

// Бенчмарк используется в качестве эталонного
//
// Возвращаемое значение:
//   Булево
Функция ЭтоЭталон() Экспорт
	Возврат _ЭтоЭталон;
КонецФункции

// Использовать бенчмарк в качестве эталонного
//
// Результаты выполнения эталонного бенчмарка используются как базовая метрика 
// для оценки эффективности других тестов.
//
// Параметры:
//   Флаг - Булево - Флаг для пометки бенчмарка как эталонного
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ИспользоватьКакЭталон(Флаг = Истина) Экспорт

	_ЭтоЭталон = Флаг;

	Возврат ЭтотОбъект;

КонецФункции

// Категория бенчмарка
//
// Возвращаемое значение:
//   Строка
Функция Категория() Экспорт
	Возврат _Категория;
КонецФункции

// Устанавливает категорию для группировки бенчмарков в отчетах
// Позволяет логически объединять тесты по функциональности, типу нагрузки или другим критериям.
//
// Параметры:
//   Категория - Строка
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьКатегорию(Категория) Экспорт

	_Категория = Категория;

	Возврат ЭтотОбъект;

КонецФункции

// Имена параметров метода бенчмарка
//
// Возвращаемое значение:
//   Массив из Строка
Функция ИменаПараметров() Экспорт
	Возврат Новый Массив(Новый ФиксированныйМассив(_ИменаПараметров));
КонецФункции

// Делегат
//
// Параметры:
//   Объект - Произвольный - Объект бенчмарков
//   Параметры - Массив из Произвольный - Параметры вызываемого метода
//
// Возвращаемое значение:
//   Делегат
Функция Делегат(Объект, Параметры) Экспорт
	Возврат Делегаты.Создать(Объект, _Метод, Параметры);
КонецФункции

Процедура ИзвлечьИменаПараметров(Объект)

	РефлекторОбъекта = Новый РефлекторОбъекта(Объект);
	ТаблицаМетодов = РефлекторОбъекта.ПолучитьТаблицуМетодов(, Ложь);

	СвойстваМетода = ТаблицаМетодов.Найти(Метод(), "Имя");

	_ИменаПараметров = СвойстваМетода.Параметры.ВыгрузитьКолонку("Имя");

КонецПроцедуры