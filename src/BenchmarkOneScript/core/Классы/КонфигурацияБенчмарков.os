#Использовать asserts
#Использовать delegate

Перем _Стратегия; // см. СтратегииЗапускаБенчмарка
Перем _СтратегияПоУмолчанию; // см. СтратегииЗапускаБенчмарка
Перем _КоличествоИтераций; // Число
Перем _КоличествоИтерацийПоУмолчанию; // Число
Перем _КоличествоВызововЗаИтерацию; // Число
Перем _КоличествоВызововЗаИтерациюПоУмолчанию; // Число
Перем _КоличествоПрогревочныхИтераций; // Число
Перем _КоличествоПрогревочныхИтерацийПоУмолчанию; // Число
Перем _МинимальноеВремяИтерации; // Число - мс
Перем _МинимальноеВремяИтерацииПоУмолчанию; // Число - мс
Перем _МинимальноеКоличествоВызововЗаИтерацию; // Число
Перем _МинимальноеКоличествоВызововЗаИтерациюПоУмолчанию; // Число
Перем _СортировкаОтчета; // см. СортировкиОтчетаБенчмарков
Перем _СортировкаОтчетаПоУмолчанию; // см. СортировкиОтчетаБенчмарков
Перем _ТребуетсяМониторингПамяти; // Булево
Перем _ТребуетсяМониторингПамятиПоУмолчанию; // Булево
Перем _КаталогАртефактов; // Строка
Перем _КаталогАртефактовПоУмолчанию; // Строка
Перем _Параметры; // Массив из ПараметрБенчмарка
Перем _Обработчики; // Соответствие
Перем _Колонки; // Массив из Строка - см. КолонкиОтчетаБенчмарков
Перем _Экспортеры; // Массив из см. ЭкспортерыРезультатовБенчмарков
Перем _МодифицированныеПоля; // Соответствие

// Конфигурация бенчмарков
//
// Параметры:
//   Источник - Тип, Произвольный - Тип или экземпляр класса бенчмарков
Процедура ПриСозданииОбъекта(Источник = Неопределено)

	_СтратегияПоУмолчанию = СтратегииЗапускаБенчмарка.ПропускнаяСпособность;
	_КоличествоИтерацийПоУмолчанию = 15;
	_КоличествоВызововЗаИтерациюПоУмолчанию = 0;
	_КоличествоПрогревочныхИтерацийПоУмолчанию = 6;
	_МинимальноеВремяИтерацииПоУмолчанию = 100;
	_МинимальноеКоличествоВызововЗаИтерациюПоУмолчанию = 4;
	_СортировкаОтчетаПоУмолчанию = СортировкиОтчетаБенчмарков.ПоУмолчанию;
	_КаталогАртефактовПоУмолчанию = ".\BenchmarkArtifacts";
	_ТребуетсяМониторингПамятиПоУмолчанию = Ложь;
	
	_Параметры = Новый Массив();
	_Обработчики = Новый Соответствие();
	_Колонки = Новый Массив();
	_Экспортеры = Новый Массив();
	_МодифицированныеПоля = Новый Соответствие();

	_ТребуетсяМониторингПамяти = _ТребуетсяМониторингПамятиПоУмолчанию;

	УстановитьСтратегию(_СтратегияПоУмолчанию);
	УстановитьКоличествоИтераций(_КоличествоИтерацийПоУмолчанию);
	УстановитьКоличествоВызововЗаИтерацию(_КоличествоВызововЗаИтерациюПоУмолчанию);
	УстановитьКоличествоПрогревочныхИтераций(_КоличествоПрогревочныхИтерацийПоУмолчанию);
	УстановитьМинимальноеВремяИтерации(_МинимальноеВремяИтерацииПоУмолчанию);
	УстановитьМинимальноеКоличествоВызововЗаИтерацию(_МинимальноеКоличествоВызововЗаИтерациюПоУмолчанию);
	УстановитьСортировкуОтчета(_СортировкаОтчетаПоУмолчанию);
	УстановитьКаталогАртефактов(_КаталогАртефактовПоУмолчанию);

	_МодифицированныеПоля.Очистить();

	Если Не Источник = Неопределено Тогда
		ИзвлекательКонфигурацииБенчмарков.Извлечь(Источник, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

#Область ПрограммныйИнтерфейс

// Устанавливает количество итераций для основных этапов (ЭтапыБенчмарка.Измерение, ЭтапыБенчмарка.Память)
//
// Используется для тонкой настройки баланса между точностью измерений и временем выполнения теста.
// Увеличение итераций повышает стабильность результатов, но увеличивает общее время прогона.
//
// Параметры:
//   КоличествоИтераций - Число
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьКоличествоИтераций(КоличествоИтераций) Экспорт

	Ожидаем.Что(КоличествоИтераций, "Количество итераций").ИмеетТип("Число");
	Ожидаем.Что(КоличествоИтераций, "Количество итераций не может быть меньше 1").Больше(0);

	_КоличествоИтераций = КоличествоИтераций;
	УстановитьМодифицированность(ИмяПоля_КоличествоИтераций());

	Возврат ЭтотОбъект;

КонецФункции

// Количество итераций для основных этапов (ЭтапыБенчмарка.Измерение, ЭтапыБенчмарка.Память)
//
// Возвращаемое значение:
//   Число
Функция КоличествоИтераций() Экспорт

	Возврат _КоличествоИтераций;
	
КонецФункции

// Устанавливает количество вызовов за итерацию
//
// Используется для увеличения времени выполнения итерации, что повышает точность измерений
// для методов с очень быстрым временем выполнения.
//
// Если установлено "0", то количество будет рассчитано автоматически.
//
// Параметры:
//   КоличествоВызововЗаИтерацию - Число
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию) Экспорт

	Ожидаем.Что(КоличествоВызововЗаИтерацию, "Количество вызовов за итерацию").ИмеетТип("Число");
	Ожидаем.Что(КоличествоВызововЗаИтерацию, "Количество вызовов за итерацию не может быть меньше 0").БольшеИлиРавно(0);

	_КоличествоВызововЗаИтерацию = КоличествоВызововЗаИтерацию;
	УстановитьМодифицированность(ИмяПоля_КоличествоВызововЗаИтерацию());

	Возврат ЭтотОбъект;
	
КонецФункции

// Количество вызовов за итерацию
//
// Возвращаемое значение:
//   Число
Функция КоличествоВызововЗаИтерацию() Экспорт

	Возврат _КоличествоВызововЗаИтерацию;

КонецФункции

// Устанавливает количество прогревочных итераций для подготовки окружения перед выполнением 
// основных замеров бенчмарка.
//
// Прогревочные итерации используются для стабилизации системы: прогрев кэшей, 
// инициализация внешних ресурсов. Результаты этих итераций не учитываются в финальной статистике.
//
// - Если установлено "0", то прогревочный этап будет пропущен. 
// - Игнорируется для стратегии "ХолодныйЗапуск".
//
// Параметры:
//   КоличествоПрогревочныхИтераций - Число
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьКоличествоПрогревочныхИтераций(КоличествоПрогревочныхИтераций) Экспорт

	Ожидаем.Что(КоличествоПрогревочныхИтераций, "Количество прогревочных итераций").ИмеетТип("Число");
	Ожидаем.Что(КоличествоПрогревочныхИтераций, "Количество прогревочных итераций не может быть меньше 0").БольшеИлиРавно(0);

	_КоличествоПрогревочныхИтераций = КоличествоПрогревочныхИтераций;
	УстановитьМодифицированность(ИмяПоля_КоличествоПрогревочныхИтераций());

	Возврат ЭтотОбъект;
	
КонецФункции

// Количество прогревочных итераций для подготовки окружения перед выполнением основных замеров бенчмарка.
//
// Возвращаемое значение:
//   Число
Функция КоличествоПрогревочныхИтераций() Экспорт

	Возврат _КоличествоПрогревочныхИтераций;

КонецФункции

// Устанавливает минимальное время выполнения одной итерации бенчмарка в миллисекундах
//
// BenchmarkOneScript динамически подбирает количество вызовов за итерацию (см. АннотацияКоличествоВызововЗаИтерацию) так, 
// чтобы одна итерация длилась не меньше указанного времени. 
// Увеличивает стабильность замеров для коротких операций.
//
// Игнорируется для стратегии "ХолодныйЗапуск".
//
// Параметры:
//   МинимальноеВремяИтерации - Число - Миллисекунд
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьМинимальноеВремяИтерации(МинимальноеВремяИтерации) Экспорт

	Ожидаем.Что(МинимальноеВремяИтерации, "Минимальное время итерации").ИмеетТип("Число");
	Ожидаем.Что(МинимальноеВремяИтерации, "Минимальное время итерации не может быть меньше 1 мс").Больше(0);

	_МинимальноеВремяИтерации = МинимальноеВремяИтерации;
	УстановитьМодифицированность(ИмяПоля_МинимальноеВремяИтерации());

	Возврат ЭтотОбъект;

КонецФункции

// Минимальное время выполнения одной итерации бенчмарка в миллисекундах
//
// Возвращаемое значение:
//   Число - Миллисекунд
Функция МинимальноеВремяИтерации() Экспорт

	Возврат _МинимальноеВремяИтерации;

КонецФункции

// Устанавливает минимальное количество вызовов метода в течение одной итерации бенчмарка
//
// Гарантирует, что метод будет выполнен не менее указанного числа раз, 
// даже если автоматический расчет предполагает меньшее количество вызовов.
//
// Игнорируется для стратегии "ХолодныйЗапуск".
//
// Параметры:
//   МинимальноеКоличествоВызововЗаИтерацию - Число
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьМинимальноеКоличествоВызововЗаИтерацию(МинимальноеКоличествоВызововЗаИтерацию) Экспорт

	Ожидаем.Что(МинимальноеКоличествоВызововЗаИтерацию, "Минимальное количество вызовов за итерацию").ИмеетТип("Число");
	Ожидаем
		.Что(МинимальноеКоличествоВызововЗаИтерацию, "Минимальное количество вызовов за итерацию не может быть меньше 1")
		.Больше(0);

	_МинимальноеКоличествоВызововЗаИтерацию = МинимальноеКоличествоВызововЗаИтерацию;
	УстановитьМодифицированность(ИмяПоля_МинимальноеКоличествоВызововЗаИтерацию());

	Возврат ЭтотОбъект;

КонецФункции

// Минимальное количество вызовов метода в течение одной итерации бенчмарка
//
// Используется как начальное количество при расчете количества вызовов за итерацию.
// Игнорируется для стратегии "ХолодныйЗапуск".
//
// Возвращаемое значение:
//   Число
Функция МинимальноеКоличествоВызововЗаИтерацию() Экспорт

	Возврат _МинимальноеКоличествоВызововЗаИтерацию;

КонецФункции

// Устанавливает стратегию запуска бенчмарков
//
// Параметры:
//   Стратегия - см. СтратегииЗапускаБенчмарка
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьСтратегию(Стратегия) Экспорт

	_Стратегия = Стратегия;
	УстановитьМодифицированность(ИмяПоля_Стратегия());

	Возврат ЭтотОбъект;

КонецФункции

// Стратегия запуска бенчмарков
//
// Возвращаемое значение:
//   см. СтратегииЗапускаБенчмарка
Функция Стратегия() Экспорт

	Возврат _Стратегия;

КонецФункции

// Добавляет параметр в набор, позволяя запускать тесты с разными наборами входных данных
//
// Метод бенчмарка будет выполнен для каждой уникальной комбинации значений параметров.
// Позволяет анализировать производительность в зависимости от входных условий.
//
// Параметры:
//   Имя - Строка - Имя публичного поля класса бенчмарка
//   Значение - Произвольный
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ДобавитьПараметр(Имя, Значение) Экспорт

	_Параметры.Добавить(Новый ПараметрБенчмарка(Имя, Значение, Ложь));
	УстановитьМодифицированность(ИмяПоля_Параметры());

	Возврат ЭтотОбъект;

КонецФункции

// Параметры, используемые для запуска бенчмарков с разными наборами входных данных
// 
// Возвращаемое значение:
//   Массив из 

Функция Параметры() Экспорт

	Возврат Новый Массив(Новый ФиксированныйМассив(_Параметры));

КонецФункции

// Очищает набор параметров
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ОчиститьПараметры() Экспорт

	_Параметры.Очистить();
	УстановитьМодифицированность(ИмяПоля_Параметры());

	Возврат ЭтотОбъект;
	
КонецФункции

// Имена параметров (публичных полей класса)
//
// Возвращаемое значение:
//   Массив из Строка
Функция ИменаПараметров() Экспорт

	Имена = Новый Массив();

	Для Каждого Параметр Из _Параметры Цикл
		Имя = Параметр.Имя;
		Если Имена.Найти(Имя) = Неопределено Тогда
			Имена.Добавить(Имя);
		КонецЕсли;
	КонецЦикла;

	Возврат Имена;

КонецФункции

// Устанавливает сортировку результатов в отчете
//
// Параметры:
//   Сортировка - см. СортировкиОтчетаБенчмарков
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьСортировкуОтчета(Сортировка) Экспорт

	_СортировкаОтчета = Сортировка;
	УстановитьМодифицированность(ИмяПоля_СортировкаОтчета());

	Возврат ЭтотОбъект;

КонецФункции

// Сортировка результатов в отчете
//
// Возвращаемое значение:
//   см. СортировкиОтчетаБенчмарков
Функция СортировкаОтчета() Экспорт

	Возврат _СортировкаОтчета;

КонецФункции

// Добавляет этап мониторинга выделения памяти и сборок мусора (GC)
//
// При использовании этой аннотации в отчете будут отображаться:
// - Аллокации памяти в байтах за итерацию
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ДобавитьМониторингПамяти() Экспорт

	_ТребуетсяМониторингПамяти = Истина;
	УстановитьМодифицированность(ИмяПоля_ТребуетсяМониторингПамяти());

	Возврат ЭтотОбъект;
	
КонецФункции

// Требуется мониторинг выделения памяти и сборок мусора (GC)
//
// Возвращаемое значение:
//   Булево
Функция ТребуетсяМониторингПамяти() Экспорт

	Возврат _ТребуетсяМониторингПамяти;
	
КонецФункции

// Добавляет обработчик события
//
// Описание событий:
//
//   ПередВсеми   - Вызывается перед запуском всех бенчмарков.
//                  Используется для подготовки данных, инициализации ресурсов или настройки 
//                  окружения перед выполнением бенчмарков.
//
//                  Параметры события:
//                    * Контекст - Структура:
//                      ** Конфигурация - КонфигурацияБенчмарков
//                      ** ДескрипторыБенчмарков - КоллекцияДескрипторовБенчмарков
//
//   ПослеВсех    - Вызывается после запуска всех бенчмарков.
//                  Используется для финализации: освобождения ресурсов (закрытие соединений), записи итоговых отчетов 
//                  или выполнения других действий.
//
//                  Параметры события:
//                    * Контекст - Структура:
//                      ** ДескрипторыБенчмарков - КоллекцияДескрипторовБенчмарков
//                      ** Конфигурация - КонфигурацияБенчмарков
//                      ** СредаОкружения - СредаОкруженияБенчмарков
//                      ** РезультатыЗапусков - ТаблицаЗначений - см. ЗапускательБенчмарков.НоваяТаблицаРезультатовЗапусков
//                      ** Отчет - ОтчетБенчмарков
//
//   ПередКаждым  - Вызывается перед каждым запуском бенчмарка.
//                  Позволяет подготовить контекст для отдельного теста - например, сбросить состояние объекта, 
//                  сгенерировать тестовые данные или выполнить предварительные проверки.
//
//                  Параметры события:
//                    * Контекст - Структура:
//                      ** ДескрипторБенчмарка - ДескрипторБенчмарка
//                      ** ПараметрыМетода - Массив из Произвольный
//
//   ПослеКаждого - Вызывается после каждого запуска бенчмарка.
//                  Он используется для постобработки: валидации результатов, сброса временных значений 
//                  или освобождения ресурсов, которые создавались для конкретного теста.
//
//                  Параметры события:
//                    * Контекст - Структура:
//                      ** ДескрипторБенчмарка - ДескрипторБенчмарка
//                      ** Параметры - Массив из ПараметрБенчмарка
//                      ** Замеры - ТаблицаЗначений - см. ЗапускательБенчмарков.НоваяТаблицаЗамеров
//                      ** Статистика - СтатистикаБенчмарка
//
// Параметры:
//   ИмяСобытия - Строка - см. СобытияБенчмарков
//   Обработчик - Строка - Имя экспортного метода экземпляра класса бенчмарков
//              - Делегат - Делегат
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ДобавитьОбработчикСобытия(ИмяСобытия, Обработчик) Экспорт

	Если _Обработчики[ИмяСобытия] = Неопределено Тогда
		_Обработчики[ИмяСобытия] = Новый Соответствие();
	КонецЕсли;

	_Обработчики[ИмяСобытия][Обработчик] = Новый Структура("ЕстьПараметры");
	УстановитьМодифицированность(ИмяПоля_ОбработчикиСобытий());

	Возврат ЭтотОбъект;
	
КонецФункции

// Удаляет все обработчики для события
//
// Параметры:
//   ИмяСобытия - Строка - см. СобытияБенчмарков
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УдалитьОбработчикиСобытия(ИмяСобытия) Экспорт

	Если Не _Обработчики[ИмяСобытия] = Неопределено Тогда
		_Обработчики[ИмяСобытия].Очистить();
	КонецЕсли;

	Возврат ЭтотОбъект;

КонецФункции

// Удаляет все обработчики всех событий
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УдалитьОбработчикиСобытий() Экспорт

	_Обработчики.Очистить();
	УстановитьМодифицированность(ИмяПоля_ОбработчикиСобытий());

	Возврат ЭтотОбъект;

КонецФункции

// Обработчики событий
//
// Возвращаемое значение:
//   Соответствие из КлючИЗначение:
//     * Ключ - Строка - см. СобытияБенчмарков
//     * Значение - Массив из Строка - Массив экспортных методов экземпляра класса бенчмарков
//                - Массив из Делегат - Массив делегатов
Функция ОбработчикиСобытий() Экспорт

	События = Новый Соответствие();

	Для Каждого ОбработчикиСобытия Из _Обработчики Цикл

		Обработчики = Новый Массив();
		Для Каждого ОбработчикСобытия Из ОбработчикиСобытия.Значение Цикл
			Обработчики.Добавить(ОбработчикСобытия.Ключ);
		КонецЦикла;

		События[ОбработчикиСобытия.Ключ] = Обработчики;

	КонецЦикла;

	Возврат События;

КонецФункции

// Делегаты обработчиков по имени события
//
// Параметры:
//   ИмяСобытия - Строка - см. СобытияБенчмарков
//   ОбъектБенчмарков - Произвольный - Экземпляр класса бенчмарков
//   Контекст - Произвольный - Параметры, которые будут переданы в делегат
//
// Возвращаемое значение:
//   Массив из Делегат
Функция ДелегатыОбработчиковСобытия(ИмяСобытия, ОбъектБенчмарков, Контекст = Неопределено) Экспорт

	МассивДелегатов = Новый Массив();

	ОбработчикиСобытия = _Обработчики[ИмяСобытия];
	Если ОбработчикиСобытия = Неопределено Тогда
		Возврат МассивДелегатов;
	КонецЕсли;

	Для Каждого Строка Из ОбработчикиСобытия Цикл

		Обработчик = Строка.Ключ;
		Описание = Строка.Значение;

		Делегат = ДелегатОбработчика(Обработчик, ОбъектБенчмарков);
			
		Если Описание.ЕстьПараметры = Неопределено Тогда
			Описание.ЕстьПараметры = ЕстьПараметрыМетода(Делегат);
		КонецЕсли;

		Если Описание.ЕстьПараметры Тогда
			Делегат.УстановитьПараметры(Контекст);
		КонецЕсли;

		МассивДелегатов.Добавить(Делегат);

	КонецЦикла;

	Возврат МассивДелегатов;

КонецФункции

// Добавляет колонку отчета
//
// Параметры:
//   Колонка - Строка - см. КолонкиОтчетаБенчмарков
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ДобавитьКолонку(Колонка) Экспорт
	
	Если _Колонки.Найти(Колонка) = Неопределено Тогда
		_Колонки.Добавить(Колонка);
	КонецЕсли;

	УстановитьМодифицированность(ИмяПоля_Колонки());

	Возврат ЭтотОбъект;

КонецФункции

// Удаляет добавленную колонку отчета
//
// Параметры:
//   Колонка - Строка - см. КолонкиОтчетаБенчмарков
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УдалитьКолонку(Колонка) Экспорт

	Инд = _Колонки.Найти(Колонка);
	Если Не Инд = Неопределено Тогда
		_Колонки.Удалить(Инд);
	КонецЕсли;

	Возврат ЭтотОбъект;

КонецФункции

// Удаляет все добавленные колонки отчета
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УдалитьКолонки() Экспорт

	_Колонки.Очистить();
	УстановитьМодифицированность(ИмяПоля_Колонки());

	Возврат ЭтотОбъект;

КонецФункции

// Добавленные колонки отчета
//
// Возвращаемое значение:
//   Массив из Строка - см. КолонкиОтчетаБенчмарков
Функция Колонки() Экспорт
	Возврат Новый Массив(Новый ФиксированныйМассив(_Колонки));
КонецФункции

// Каталог артефактов
//
// Возвращаемое значение:
//   Строка
Функция КаталогАртефактов() Экспорт
	Возврат _КаталогАртефактов;
КонецФункции

// Устанавливает каталог артефактов
//
// Параметры:
//   КаталогАртефактов - Строка
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьКаталогАртефактов(КаталогАртефактов) Экспорт

	_КаталогАртефактов = КаталогАртефактов;
	УстановитьМодифицированность(ИмяПоля_КаталогАртефактов());

	Возврат ЭтотОбъект;

КонецФункции

// Добавляет экспортер
//
// Параметры:
//   Экспортер - см. ЭкспортерыРезультатовБенчмарков
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ДобавитьЭкспортер(Экспортер) Экспорт

	_Экспортеры.Добавить(Экспортер);
	УстановитьМодифицированность(ИмяПоля_Экспортеры());

	Возврат ЭтотОбъект;

КонецФункции

// Экспортеры
//
// Возвращаемое значение:
//   Массив из см. ЭкспортерыРезультатовБенчмарков
Функция Экспортеры() Экспорт
	Возврат Новый Массив(Новый ФиксированныйМассив(_Экспортеры));
КонецФункции

// Сброс всех экспортеров
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УдалитьЭкспортеры() Экспорт

	_Экспортеры.Очистить();
	УстановитьМодифицированность(ИмяПоля_Экспортеры());

	Возврат ЭтотОбъект;

КонецФункции

// Объединяет переданную конфигурацию с текущей конфигурацию

// Возвращаемое значение:
//   ЭтотОбъект
Функция Объединить(Конфигурация) Экспорт
	
	ТаблицаКонфигурации = Конфигурация.ВТаблицу();
	ЗначенияМодифицированных = Новый Соответствие();

	Для Каждого Строка Из ТаблицаКонфигурации Цикл
		Если Строка.Модифицирован Тогда
			ЗначенияМодифицированных.Вставить(Строка.Имя, Строка.Значение);
		КонецЕсли;
	КонецЦикла;

	// Стратегия
	Если Не ЗначенияМодифицированных[ИмяПоля_Стратегия()] = Неопределено Тогда
		УстановитьСтратегию(ЗначенияМодифицированных[ИмяПоля_Стратегия()]);
	КонецЕсли;

	// КоличествоИтераций
	Если Не ЗначенияМодифицированных[ИмяПоля_КоличествоИтераций()] = Неопределено Тогда
		УстановитьКоличествоИтераций(ЗначенияМодифицированных[ИмяПоля_КоличествоИтераций()]);
	КонецЕсли;

	// КоличествоВызововЗаИтерацию
	Если Не ЗначенияМодифицированных[ИмяПоля_КоличествоВызововЗаИтерацию()] = Неопределено Тогда
		УстановитьКоличествоВызововЗаИтерацию(ЗначенияМодифицированных[ИмяПоля_КоличествоВызововЗаИтерацию()]);
	КонецЕсли;

	// КоличествоПрогревочныхИтераций
	Если Не ЗначенияМодифицированных[ИмяПоля_КоличествоПрогревочныхИтераций()] = Неопределено Тогда
		УстановитьКоличествоПрогревочныхИтераций(ЗначенияМодифицированных[ИмяПоля_КоличествоПрогревочныхИтераций()]);
	КонецЕсли;

	// МинимальноеВремяИтерации
	Если Не ЗначенияМодифицированных[ИмяПоля_МинимальноеВремяИтерации()] = Неопределено Тогда
		УстановитьМинимальноеВремяИтерации(ЗначенияМодифицированных[ИмяПоля_МинимальноеВремяИтерации()]);
	КонецЕсли;

	// МинимальноеКоличествоВызововЗаИтерацию
	Если Не ЗначенияМодифицированных[ИмяПоля_МинимальноеКоличествоВызововЗаИтерацию()] = Неопределено Тогда
		УстановитьМинимальноеКоличествоВызововЗаИтерацию(ЗначенияМодифицированных[ИмяПоля_МинимальноеКоличествоВызововЗаИтерацию()]);
	КонецЕсли;

	// СортировкаОтчета
	Если Не ЗначенияМодифицированных[ИмяПоля_СортировкаОтчета()] = Неопределено Тогда
		УстановитьСортировкуОтчета(ЗначенияМодифицированных[ИмяПоля_СортировкаОтчета()]);
	КонецЕсли;

	// КаталогАртефактов
	Если Не ЗначенияМодифицированных[ИмяПоля_КаталогАртефактов()] = Неопределено Тогда
		УстановитьКаталогАртефактов(ЗначенияМодифицированных[ИмяПоля_КаталогАртефактов()]);
	КонецЕсли;
	
	// ТребуетсяМониторингПамяти
	Если ЗначенияМодифицированных[ИмяПоля_ТребуетсяМониторингПамяти()] = Истина Тогда
		ДобавитьМониторингПамяти();
	КонецЕсли;

	// Параметры
	Если Не ЗначенияМодифицированных[ИмяПоля_Параметры()] = Неопределено Тогда
		ОчиститьПараметры();
		Для Каждого Параметр Из ЗначенияМодифицированных[ИмяПоля_Параметры()] Цикл
			ДобавитьПараметр(Параметр.Имя, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;

	// ОбработчикиСобытий
	Если Не ЗначенияМодифицированных[ИмяПоля_ОбработчикиСобытий()] = Неопределено Тогда
		УдалитьОбработчикиСобытий();
		Для Каждого СтрокаСобытия Из ЗначенияМодифицированных[ИмяПоля_ОбработчикиСобытий()] Цикл
			Для Каждого Обработчик Из СтрокаСобытия.Значение Цикл
				ДобавитьОбработчикСобытия(СтрокаСобытия.Ключ, Обработчик);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// Колонки
	Если Не ЗначенияМодифицированных[ИмяПоля_Колонки()] = Неопределено Тогда
		УдалитьКолонки();
		Для Каждого Колонка Из ЗначенияМодифицированных[ИмяПоля_Колонки()] Цикл
			ДобавитьКолонку(Колонка);
		КонецЦикла;
	КонецЕсли;

	// Экспортеры
	Если Не ЗначенияМодифицированных[ИмяПоля_Экспортеры()] = Неопределено Тогда
		УдалитьЭкспортеры();
		Для Каждого Экспортер Из ЗначенияМодифицированных[ИмяПоля_Экспортеры()] Цикл
			ДобавитьЭкспортер(Экспортер);
		КонецЦикла;
	КонецЕсли;

	Возврат ЭтотОбъект;

КонецФункции

// Конвертация объекта конфигурации в таблицу значений
//
// Возвращаемое значение:
//   ТаблицаЗначение:
//     * Имя - Строка - Имя поля
//     * Значение - Произвольный - Значение поля
//     * Модифицирован - Булево - Индикатор модифицированности поля
Функция ВТаблицу() Экспорт

	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Значение");
	Таблица.Колонки.Добавить("Модифицирован", Новый ОписаниеТипов("Булево"));

	ДобавитьСтрокуВТаблицу(Таблица, ИмяПоля_Стратегия(), Стратегия());
	ДобавитьСтрокуВТаблицу(Таблица, ИмяПоля_КоличествоИтераций(), КоличествоИтераций());
	ДобавитьСтрокуВТаблицу(Таблица, ИмяПоля_КоличествоВызововЗаИтерацию(), КоличествоВызововЗаИтерацию());
	ДобавитьСтрокуВТаблицу(Таблица, ИмяПоля_КоличествоПрогревочныхИтераций(), КоличествоПрогревочныхИтераций());
	ДобавитьСтрокуВТаблицу(Таблица, ИмяПоля_МинимальноеВремяИтерации(), МинимальноеВремяИтерации());
	ДобавитьСтрокуВТаблицу(Таблица, ИмяПоля_МинимальноеКоличествоВызововЗаИтерацию(), МинимальноеКоличествоВызововЗаИтерацию());
	ДобавитьСтрокуВТаблицу(Таблица, ИмяПоля_СортировкаОтчета(), СортировкаОтчета());
	ДобавитьСтрокуВТаблицу(Таблица, ИмяПоля_КаталогАртефактов(), КаталогАртефактов());
	ДобавитьСтрокуВТаблицу(Таблица, ИмяПоля_ТребуетсяМониторингПамяти(), ТребуетсяМониторингПамяти());
	ДобавитьСтрокуВТаблицу(Таблица, ИмяПоля_Параметры(), Параметры());
	ДобавитьСтрокуВТаблицу(Таблица, ИмяПоля_ОбработчикиСобытий(), ОбработчикиСобытий());
	ДобавитьСтрокуВТаблицу(Таблица, ИмяПоля_Колонки(), Колонки());
	ДобавитьСтрокуВТаблицу(Таблица, ИмяПоля_Экспортеры(), Экспортеры());

	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДелегатОбработчика(Обработчик, ОбъектБенчмарков)

	Если ТипЗнч(Обработчик) = Тип("Делегат") Тогда
		Возврат Обработчик;
	Иначе
		Возврат Новый Делегат(ОбъектБенчмарков, Обработчик);
	КонецЕсли;

КонецФункции

Процедура УстановитьМодифицированность(ИмяПоля_)
	_МодифицированныеПоля[ИмяПоля_] = Истина;
КонецПроцедуры

Функция ЕстьПараметрыМетода(Делегат)

	РефлекторОбъекта = Новый РефлекторОбъекта(Делегат.Объект());
	ТаблицаМетодов = РефлекторОбъекта.ПолучитьТаблицуМетодов(, Ложь);
	СвойстваМетода = ТаблицаМетодов.Найти(Делегат.ИмяМетода(), "Имя");

	Возврат СвойстваМетода.Параметры.Количество() > 0;

КонецФункции

Функция ДобавитьСтрокуВТаблицу(Таблица, Имя, Значение) Экспорт

	Строка = Таблица.Добавить();
	Строка.Имя = Имя;
	Строка.Значение = Значение;
	Строка.Модифицирован = _МодифицированныеПоля[Имя];

	Возврат Строка;

КонецФункции

#Область ИменаПолей

Функция ИмяПоля_Стратегия()
	Возврат "Стратегия";
КонецФункции

Функция ИмяПоля_КоличествоИтераций()
	Возврат "КоличествоИтераций";
КонецФункции

Функция ИмяПоля_КоличествоВызововЗаИтерацию()
	Возврат "КоличествоВызововЗаИтерацию";
КонецФункции

Функция ИмяПоля_КоличествоПрогревочныхИтераций()
	Возврат "КоличествоПрогревочныхИтераций";
КонецФункции

Функция ИмяПоля_МинимальноеВремяИтерации()
	Возврат "МинимальноеВремяИтерации";
КонецФункции

Функция ИмяПоля_МинимальноеКоличествоВызововЗаИтерацию()
	Возврат "МинимальноеКоличествоВызововЗаИтерацию";
КонецФункции

Функция ИмяПоля_СортировкаОтчета()
	Возврат "СортировкаОтчета";
КонецФункции

Функция ИмяПоля_КаталогАртефактов()
	Возврат "КаталогАртефактов";
КонецФункции

Функция ИмяПоля_ТребуетсяМониторингПамяти()
	Возврат "ТребуетсяМониторингПамяти";
КонецФункции

Функция ИмяПоля_Параметры()
	Возврат "Параметры";
КонецФункции

Функция ИмяПоля_ОбработчикиСобытий()
	Возврат "ОбработчикиСобытий";
КонецФункции

Функция ИмяПоля_Колонки()
	Возврат "Колонки";
КонецФункции

Функция ИмяПоля_Экспортеры()
	Возврат "Экспортеры";
КонецФункции

#КонецОбласти

#КонецОбласти