#Использовать asserts

Перем _Стратегия; // см. СтратегииЗапускаБенчмарка
Перем _КоличествоИтераций; // Число
Перем _КоличествоВызововЗаИтерацию; // Число
Перем _КоличествоИтерацийПрогрева; // Число
Перем _МинимальноеВремяИтерации; // Число - мс
Перем _МинимальноеКоличествоВызововЗаИтерацию; // Число
Перем _СортировкаОтчета; // см. СортировкиОтчетаБенчмарков
Перем _ИспользуетсяМониторингПамяти; // Булево
Перем _Параметры; // Массив из ПараметрБенчмарка
Перем _ДелегатИнициализация; // Делегат
Перем _ДелегатЗавершение; // Делегат
Перем _ДелегатПередЗапуском; // Делегат
Перем _ДелегатПослеЗапуска; // Делегат

// Конфигурация бенчмарков
Процедура ПриСозданииОбъекта()

	КоличествоИтераций = 15;
	КоличествоВызововЗаИтерацию = 0;
	КоличествоИтерацийПрогрева = 6;
	МинимальноеВремяИтерации = 100;
	МинимальноеКоличествоВызововЗаИтерацию = 4;
	
	_Параметры = Новый Массив();
	_ИспользуетсяМониторингПамяти = Ложь;

	УстановитьСтратегию(СтратегииЗапускаБенчмарка.ПропускнаяСпособность);
	УстановитьКоличествоИтераций(КоличествоИтераций);
	УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию);
	УстановитьКоличествоИтерацийПрогрева(КоличествоИтерацийПрогрева);
	УстановитьМинимальноеВремяИтерации(МинимальноеВремяИтерации);
	УстановитьМинимальноеКоличествоВызововЗаИтерацию(МинимальноеКоличествоВызововЗаИтерацию);

КонецПроцедуры

// Количество выполняемых итераций для рабочего этапа
//
// Параметры:
//   КоличествоИтераций - Число
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьКоличествоИтераций(КоличествоИтераций) Экспорт

	Ожидаем.Что(КоличествоИтераций, "Количество итераций не может быть меньше 1").Больше(0);

	_КоличествоИтераций = КоличествоИтераций;

	Возврат ЭтотОбъект;

КонецФункции

// Возвращает количество итераций рабочего этапа
//
// Возвращаемое значение:
//   Число
Функция КоличествоИтераций() Экспорт

	Возврат _КоличествоИтераций;
	
КонецФункции

// Количество вызовов за итерацию
//
// Если установлено "0", то количество будет рассчитано автоматически
//
// Параметры:
//   КоличествоВызововЗаИтерацию - Число
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию) Экспорт

	Ожидаем.Что(КоличествоВызововЗаИтерацию, "Количество вызовов за итерацию не может быть меньше 0").БольшеИлиРавно(0);

	_КоличествоВызововЗаИтерацию = КоличествоВызововЗаИтерацию;

	Возврат ЭтотОбъект;
	
КонецФункции

// Количество вызовов за итерацию
//
// Возвращаемое значение:
//   Число
Функция КоличествоВызововЗаИтерацию() Экспорт

	Возврат _КоличествоВызововЗаИтерацию;

КонецФункции

// Устанавливает количество итераций для этапа Прогрева
//
// Если установлено "0", то этап Прогрева будет пропущен. 
// Игнорируется для стратегии "ХолодныйЗапуск".
//
// Параметры:
//   КоличествоИтерацийПрогрева - Число
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьКоличествоИтерацийПрогрева(КоличествоИтерацийПрогрева) Экспорт

	Ожидаем.Что(КоличествоИтерацийПрогрева, "Количество итераций Прогрева не может быть меньше 0").БольшеИлиРавно(0);

	_КоличествоИтерацийПрогрева = КоличествоИтерацийПрогрева;

	Возврат ЭтотОбъект;
	
КонецФункции

// Количество итераций для этапа Прогрева
//
// Если установлено "0", то этап Прогрева будет пропущен. 
// Игнорируется для стратегии "ХолодныйЗапуск".
//
// Возвращаемое значение:
//   Число
Функция КоличествоИтерацийПрогрева() Экспорт

	Возврат _КоличествоИтерацийПрогрева;

КонецФункции

// Устанавливает минимальное время итерации в миллисекундах
//
// Используется для расчета количества вызовов за итерацию.
// Игнорируется для стратегии "ХолодныйЗапуск".
//
// Параметры:
//   МинимальноеВремяИтерации - Число - Миллисекунд
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьМинимальноеВремяИтерации(МинимальноеВремяИтерации) Экспорт

	Ожидаем.Что(МинимальноеВремяИтерации, "Минимальное время итерации не может быть меньше 1 мс").Больше(0);

	_МинимальноеВремяИтерации = МинимальноеВремяИтерации;

	Возврат ЭтотОбъект;

КонецФункции

// Минимальное время итерации в миллисекундах
//
// Используется для расчета количества вызовов за итерацию.
// Игнорируется для стратегии "ХолодныйЗапуск".
//
// Возвращаемое значение:
//   Число - Миллисекунд
Функция МинимальноеВремяИтерации() Экспорт

	Возврат _МинимальноеВремяИтерации;

КонецФункции

// Устанавливает минимальное количество вызовов за итерацию
//
// Используется как начальное количество при расчете количества вызовов за итерацию.
// Игнорируется для стратегии "ХолодныйЗапуск".
//
// Параметры:
//   МинимальноеКоличествоВызововЗаИтерацию - Число
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьМинимальноеКоличествоВызововЗаИтерацию(МинимальноеКоличествоВызововЗаИтерацию) Экспорт

	Ожидаем
		.Что(МинимальноеКоличествоВызововЗаИтерацию, "Минимальное количество вызовов за итерацию не может быть меньше 1")
		.Больше(0);

	_МинимальноеКоличествоВызововЗаИтерацию = МинимальноеКоличествоВызововЗаИтерацию;

	Возврат ЭтотОбъект;

КонецФункции

// Минимальное количество вызовов за итерацию
//
// Используется как начальное количество при расчете количества вызовов за итерацию.
// Игнорируется для стратегии "ХолодныйЗапуск".
//
// Возвращаемое значение:
//   Число
Функция МинимальноеКоличествоВызововЗаИтерацию() Экспорт

	Возврат _МинимальноеКоличествоВызововЗаИтерацию;

КонецФункции

// Устанавливает стратегию запуска бенчмарков
//
// Параметры:
//   Стратегия - см. СтратегииЗапускаБенчмарка
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьСтратегию(Стратегия) Экспорт

	_Стратегия = Стратегия;

	Возврат ЭтотОбъект;

КонецФункции

// Стратегия запуска бенчмарков
//
// Возвращаемое значение:
//   см. СтратегииЗапускаБенчмарка
Функция Стратегия() Экспорт

	Возврат _Стратегия;

КонецФункции

// Добавляет параметр в набор, который будет использован для построения комбинаций 
// параметров из публичных полей и метода бенчмарка.
//
// Параметры:
//   Имя - Строка - Имя публичного поля класса бенчмарка
//   Значение - Произвольный
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ДобавитьПараметр(Имя, Значение) Экспорт

	_Параметры.Добавить(Новый ПараметрБенчмарка(Имя, Значение, Ложь));

	Возврат ЭтотОбъект;

КонецФункции

// Набор параметров, используемый для построения комбинаций параметров
// из публичных полей и метода бенчмарка.
// 
// Возвращаемое значение:
//   Массив из ПараметрБенчмарка
Функция Параметры() Экспорт

	Возврат Новый Массив(Новый ФиксированныйМассив(_Параметры));

КонецФункции

// Очищает набор параметров
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ОчиститьПараметры() Экспорт

	_Параметры.Очистить();

	Возврат ЭтотОбъект;
	
КонецФункции

// Имена параметров (публичных полей класса)
//
// Возвращаемое значение:
//   Массив из Строка
Функция ИменаПараметров() Экспорт

	Имена = Новый Массив();

	Для Каждого Параметр Из _Параметры Цикл
		Имя = Параметр.Имя;
		Если Имена.Найти(Имя) = Неопределено Тогда
			Имена.Добавить(Имя);
		КонецЕсли;
	КонецЦикла;

	Возврат Имена;

КонецФункции

// Устанавливает сортировку отчета
//
// Параметры:
//   Сортировка - см. СортировкиОтчетаБенчмарков
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьСортировкуОтчета(Сортировка) Экспорт

	_СортировкаОтчета = Сортировка;

	Возврат ЭтотОбъект;

КонецФункции

// Сортировка отчета
//
// Возвращаемое значение:
//   см. СортировкиОтчетаБенчмарков
Функция СортировкаОтчета() Экспорт

	Возврат _СортировкаОтчета;

КонецФункции

// Добавляет использование мониторинга памяти
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ДобавитьМониторингПамяти() Экспорт

	_ИспользуетсяМониторингПамяти = Истина;

	Возврат ЭтотОбъект;
	
КонецФункции

// Использование мониторинга памяти
//
// Возвращаемое значение:
//   Булево
Функция ИспользуетсяМониторингПамяти() Экспорт

	Возврат _ИспользуетсяМониторингПамяти;
	
КонецФункции

// Устанавливает обработчик запускаемый перед запуском бенчмарка
//
// Параметры:
//   Делегат - Делегат
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьОбработчикПередЗапуском(Делегат) Экспорт
	
	КоличествоТребуемыхПараметров = 2;

	ПроверитьДелегат(Делегат, КоличествоТребуемыхПараметров);

	_ДелегатПередЗапуском = Делегат;

	Возврат ЭтотОбъект;
	
КонецФункции

// Обработчик запускаемый перед запуском бенчмарка
//
// Возвращаемое значение:
//   Делегат, Неопределено
Функция ОбработчикПередЗапуском() Экспорт

	Возврат _ДелегатПередЗапуском;

КонецФункции

// Устанавливает обработчик запускаемый после запуска бенчмарка
//
// Параметры:
//   Делегат - Делегат
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьОбработчикПослеЗапуска(Делегат) Экспорт

	КоличествоТребуемыхПараметров = 1;

	ПроверитьДелегат(Делегат, КоличествоТребуемыхПараметров);

	_ДелегатПослеЗапуска = Делегат;

	Возврат ЭтотОбъект;
	
КонецФункции

// Обработчик запускаемый после запуска бенчмарка
//
// Возвращаемое значение:
//   Делегат, Неопределено
Функция ОбработчикПослеЗапуска() Экспорт
	
	Возврат _ДелегатПослеЗапуска;

КонецФункции

// Устанавливает обработчик инициализации
//
// Параметры:
//   Делегат - Делегат
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьОбработчикИнициализации(Делегат) Экспорт

	КоличествоТребуемыхПараметров = 1;

	ПроверитьДелегат(Делегат, КоличествоТребуемыхПараметров);

	_ДелегатИнициализация = Делегат;

	Возврат ЭтотОбъект;
	
КонецФункции

// Обработчик инициализации
//
// Возвращаемое значение:
//   Делегат, Неопределено
Функция ОбработчикИнициализации() Экспорт
	
	Возврат _ДелегатИнициализация;

КонецФункции

// Устанавливает обработчик завершения
//
// Параметры:
//   Делегат - Делегат
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция УстановитьОбработчикЗавершения(Делегат) Экспорт

	КоличествоТребуемыхПараметров = 0;

	ПроверитьДелегат(Делегат, КоличествоТребуемыхПараметров);

	_ДелегатЗавершение = Делегат;

	Возврат ЭтотОбъект;
	
КонецФункции

// Обработчик завершения
//
// Возвращаемое значение:
//   Делегат, Неопределено
Функция ОбработчикЗавершения() Экспорт
	
	Возврат _ДелегатЗавершение;

КонецФункции

Процедура ПроверитьДелегат(Делегат, КоличествоТребуемыхПараметров)

	РефлекторОбъекта = Новый РефлекторОбъекта(Делегат.Объект());
	ТаблицаМетодов = РефлекторОбъекта.ПолучитьТаблицуМетодов(, Ложь);
	СвойстваМетода = ТаблицаМетодов.Найти(Делегат.ИмяМетода(), "Имя");

	Если КоличествоТребуемыхПараметров = 0 Тогда
		ТекстСообщения = СтрШаблон("Метод %1 не должен принимать параметры", СвойстваМетода.Имя);
	Иначе
		ТекстСообщения = СтрШаблон("Метод %1 должен принимать %2 параметр(а)", СвойстваМетода.Имя, КоличествоТребуемыхПараметров);
	КонецЕсли;

	Ожидаем.Что(СвойстваМетода, "Делегат не найден").Не_().ЭтоНеопределено();
	Ожидаем
		.Что(СвойстваМетода.Параметры.Количество(), ТекстСообщения)
		.Равно(КоличествоТребуемыхПараметров);

КонецПроцедуры