#Использовать logos
#Использовать asserts

Перем _Лог; // Лог

// Сериализатор конфигурации бенчмарков
Процедура ПриСозданииОбъекта()
	_Лог = Логирование.ПолучитьЛог("oscript.lib.benchmark.СериализаторКонфигурацииБенчмарков");
КонецПроцедуры

#Область ПрограммныйИнтерфейс

// Сериализует конфигурацию бенчмарков в JSON-файл
//
// Параметры:
//   Конфигурация - КонфигурацияБенчмарков - Конфигурация бенчмарков
//   ИмяФайла - Строка - Имя файла, в который будет записана конфигурация.
Процедура СериализоватьВJSON(Конфигурация, ИмяФайла) Экспорт

	_Лог.Отладка("Начало формирования файла: %1", ИмяФайла);
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);

	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.ОткрытьФайл(ИмяФайла, "UTF-8", , ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Конвертировать(Конфигурация));
	ЗаписьJSON.Закрыть();

	_Лог.Отладка("Завершение формирования файла: %1", ИмяФайла);

КонецПроцедуры

// Десериализует конфигурацию бенчмарков из JSON-файла
//
// Параметры:
//   ИмяФайла - Строка - Имя файла, из которого будет прочитана конфигурация.
//
// Возвращаемое значение:
//   КонфигурацияБенчмарков
Функция ДесериализоватьИзJSON(ИмяФайла) Экспорт
		
	_Лог.Отладка("Начало чтения файла: %1", ИмяФайла);

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ИмяФайла, "UTF-8");
	Данные = ПрочитатьJSON(ЧтениеJSON, Ложь);
	ЧтениеJSON.Закрыть();
		
	_Лог.Отладка("Завершение чтения файла: %1", ИмяФайла);

	Возврат СобратьКонфигурацию(Данные);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Конвертировать(Конфигурация)

	Данные = Новый Структура();

	Для Каждого СтрокаТаблицы Из Конфигурация.ВТаблицу() Цикл
	
		Если СериализацияОбъектовБенчмаркинга.ЗначениеСериализуется(СтрокаТаблицы.Значение)
			Или СтрокаТаблицы.Имя = "Колонки" Тогда
			Значение = СтрокаТаблицы.Значение;
		ИначеЕсли СтрокаТаблицы.Имя = "Параметры" Тогда
			Значение = КонвертироватьПараметры(СтрокаТаблицы.Значение);
		ИначеЕсли СтрокаТаблицы.Имя = "ОбработчикиСобытий" Тогда
			Значение = КонвертироватьОбработчикиСобытий(СтрокаТаблицы.Значение);
		ИначеЕсли СтрокаТаблицы.Имя = "Экспортеры" Тогда
			Значение = КонвертироватьЭкспортеры(СтрокаТаблицы.Значение);
		ИначеЕсли СтрокаТаблицы.Имя = "ВерсииИсполняющейСреды" Тогда
			Значение = КонвертироватьВерсииИсполняющейСреды(СтрокаТаблицы.Значение);
		Иначе
			ВызватьИсключение СтрШаблон("Не реализована конвертация параметра '%1'", СтрокаТаблицы.Имя);
		КонецЕсли;

		Данные.Вставить(СтрокаТаблицы.Имя, Значение);

	КонецЦикла;

	Возврат Данные;

КонецФункции

Функция КонвертироватьПараметры(Параметры)
	
	Результат = Новый Массив();

	Для Каждого ПараметрБенчмарка Из Параметры Цикл

		Значение = Новый Структура();
		Значение.Вставить("Имя", ПараметрБенчмарка.Имя);
		Значение.Вставить("Значение", ПараметрБенчмарка.Значение);
		Значение.Вставить("ЭтоПараметрМетода", ПараметрБенчмарка.ЭтоПараметрМетода);

		Результат.Добавить(Значение);

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция КонвертироватьОбработчикиСобытий(ОбработчикиСобытий)
	
	Результат = Новый Массив();

	Для Каждого Строка Из ОбработчикиСобытий Цикл

		Ожидаем.Что(Строка.Обработчик, "Делегат не может быть экспортирован в файл").Не_().ИмеетТип("Делегат");

		Значение = Новый Структура();
		Значение.Вставить("Событие", Строка.Событие);
		Значение.Вставить("Обработчик", Строка.Обработчик);

		Результат.Добавить(Значение);

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция КонвертироватьЭкспортеры(Экспортеры)
	
	Результат = Новый Массив();

	Для Каждого Экспортер Из Экспортеры Цикл
		Результат.Добавить(Строка(ТипЗнч(Экспортер)));
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция КонвертироватьВерсииИсполняющейСреды(Версии)
	
	Результат = Новый Массив();

	Для Каждого СтрокаВерсия Из Версии Цикл
		Версия = Новый Структура();
		Версия.Вставить("Версия", СтрокаВерсия.Версия);
		Версия.Вставить("Наименование", СтрокаВерсия.Наименование);
		Версия.Вставить("ЭтоЭталон", СтрокаВерсия.ЭтоЭталон);

		Результат.Добавить(Версия);
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция СобратьКонфигурацию(Данные)

	Конфигурация = Новый КонфигурацияБенчмарков();
	Конфигурация.УстановитьКоличествоИтераций(Данные.КоличествоИтераций);
	Конфигурация.УстановитьКоличествоВызововЗаИтерацию(Данные.КоличествоВызововЗаИтерацию);
	Конфигурация.УстановитьКоличествоПрогревочныхИтераций(Данные.КоличествоПрогревочныхИтераций);
	Конфигурация.УстановитьМинимальноеВремяИтерации(Данные.МинимальноеВремяИтерации);
	Конфигурация.УстановитьМинимальноеКоличествоВызововЗаИтерацию(Данные.МинимальноеКоличествоВызововЗаИтерацию);
	Конфигурация.УстановитьСтратегию(Данные.Стратегия);
	Конфигурация.УстановитьСортировкуОтчета(Данные.СортировкаОтчета);
	Конфигурация.УстановитьКаталогАртефактов(Данные.КаталогАртефактов);

	Если Данные.ТребуетсяМониторингПамяти Тогда
		Конфигурация.ДобавитьМониторингПамяти();
	КонецЕсли;

	Для Каждого Параметр Из Данные.Параметры Цикл
		Конфигурация.ДобавитьПараметр(Параметр.Имя, Параметр.Значение);
	КонецЦикла;

	Для Каждого ДанныеСобытия Из Данные.ОбработчикиСобытий Цикл
		Конфигурация.ДобавитьОбработчикСобытия(ДанныеСобытия.Событие, ДанныеСобытия.Обработчик);
	КонецЦикла;

	Для Каждого Колонка Из Данные.Колонки Цикл
		Конфигурация.ДобавитьКолонку(Колонка);
	КонецЦикла;

	Для Каждого Экспортер Из Данные.Экспортеры Цикл
		Конфигурация.ДобавитьЭкспортер(Новый(Тип(Экспортер)));
	КонецЦикла;

	Для Каждого ВерсияИсполняющейСреды Из Данные.ВерсииИсполняющейСреды Цикл
		Конфигурация.ДобавитьВерсиюИсполняющейСреды(
			ВерсияИсполняющейСреды.Версия,
			ВерсияИсполняющейСреды.Наименование,
			ВерсияИсполняющейСреды.ЭтоЭталон
		);
	КонецЦикла;

	Возврат Конфигурация;

КонецФункции

#КонецОбласти