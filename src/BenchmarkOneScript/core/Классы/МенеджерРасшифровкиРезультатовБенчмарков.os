Перем _Таблица; // см. НоваяТаблицаРасшифровки

// Расшифровка результатов бенчмарков.
//
// Параметры:
//   РасшифровкаРезультатов - см. НоваяТаблицаРасшифровки
//                          - Неопределено
Процедура ПриСозданииОбъекта(РасшифровкаРезультатов = Неопределено)
	
	_Таблица = РасшифровкаРезультатов;

	Если _Таблица = Неопределено Тогда
		_Таблица = НоваяТаблицаРасшифровки();
	КонецЕсли;

КонецПроцедуры

#Область ПрограммныйИнтерфейс

// Возвращает таблицу с расшифровкой замеров бенчмарков.
//
// Возвращаемое значение:
//   см. НоваяТаблицаРасшифровки
Функция ВТаблицу() Экспорт
	Возврат _Таблица;
КонецФункции

// Создает новую строку в таблице расшифровки.
//
// Возвращаемое значение:
//   СтрокаТаблицыЗначения
Функция Добавить() Экспорт

	СтрокаТаблицы = _Таблица.Добавить();
	СтрокаТаблицы.Параметры = Новый Массив();
	СтрокаТаблицы.Замеры = НоваяТаблицаЗамеров();
	СтрокаТаблицы.Статистика = Новый СтатистикаБенчмарка();
	СтрокаТаблицы.ИсполняющаяСреда = НоваяИсполняющаяСреда();

	Возврат СтрокаТаблицы;

КонецФункции

// Связывает каждую строку замеров с эталонной строкой.
//
// Алгоритм поиска эталонов (в порядке приоритета):
//  1. При наличии эталонной версии исполняющей среды:
//     - Ищет строку бенчмарка с идентичным именем и набором параметров в соответствующей эталонной среде
//  2. При отсутствии эталонной среды, но при наличии эталонного бенчмарка:
//     - Ищет строку бенчмарка в пределах текущей категории бенчмарков, наборов параметров и исполняющей среды
//
// Параметры:
//   Конфигурация - КонфигурацияБенчмарков
Процедура ОпределитьЭталоны(Конфигурация) Экспорт

	ЭталоннаяВерсия = Конфигурация.ЭталоннаяВерсияИсполняющейСреды();

	Для Каждого СтрокаРасшифровкиЗамеров Из _Таблица Цикл
		СтрокаРасшифровкиЗамеров.Эталон = НайтиЭталонДляСтроки(СтрокаРасшифровкиЗамеров, ЭталоннаяВерсия);
	
		Если Не ЗначениеЗаполнено(ЭталоннаяВерсия) Тогда
			СтрокаРасшифровкиЗамеров.ЭтоЭталон = СтрокаРасшифровкиЗамеров.ДескрипторБенчмарка.ЭтоЭталон();
		Иначе
			СтрокаРасшифровкиЗамеров.ЭтоЭталон = 
				ЭталоннаяВерсия = СтрокаРасшифровкиЗамеров.ИсполняющаяСреда.Версия 
				Или ЭталоннаяВерсия = СтрокаРасшифровкиЗамеров.ИсполняющаяСреда.Алиас;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Пересчитывает статистические показатели для всех замеров в таблице
Процедура ОбновитьСтатистику() Экспорт
	Для Каждого СтрокаРасшифровкиЗамеров Из _Таблица Цикл
		СтрокаРасшифровкиЗамеров.Статистика.Прочитать(СтрокаРасшифровкиЗамеров.Замеры);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиЭталонДляСтроки(ВходнаяСтрока, ЭталоннаяВерсияИсполняющейСреды)

	Для Каждого СтрокаЭталон Из _Таблица Цикл

		ЭтоЭталон = СтрокаЭталон.ДескрипторБенчмарка.ЭтоЭталон();
		ЭтоРазныеСтроки = Не СтрокаЭталон = ВходнаяСтрока;
		ИмяМетодаСовпадает = СтрокаЭталон.ДескрипторБенчмарка.Метод() = ВходнаяСтрока.ДескрипторБенчмарка.Метод();
		КатегорияСовпадает = СтрокаЭталон.ДескрипторБенчмарка.Категория() = ВходнаяСтрока.ДескрипторБенчмарка.Категория();
		ПараметрыСовпадают = ПараметрыСовпадают(СтрокаЭталон, ВходнаяСтрока);
		ВерсияИсполняющейСредыСовпадает = СтрокаЭталон.ИсполняющаяСреда.Версия = ВходнаяСтрока.ИсполняющаяСреда.Версия;
		ЭталоннаяВерсияИсполняющейСредыУказана = ЗначениеЗаполнено(ЭталоннаяВерсияИсполняющейСреды);
		ЭталоннаяВерсияИсполняющейСредыСовпадает = ЭталоннаяВерсияИсполняющейСреды = СтрокаЭталон.ИсполняющаяСреда.Версия 
			Или ЭталоннаяВерсияИсполняющейСреды = СтрокаЭталон.ИсполняющаяСреда.Алиас;

		ПоискПоЭталоннойСреде = ЭталоннаяВерсияИсполняющейСредыУказана 
			И ЭталоннаяВерсияИсполняющейСредыСовпадает 
			И ИмяМетодаСовпадает;

		ПоискПоЭталонномуБенчмарку = Не ЭталоннаяВерсияИсполняющейСредыУказана 
			И ЭтоЭталон 
			И КатегорияСовпадает 
			И ВерсияИсполняющейСредыСовпадает;

		НайденЭталон = ЭтоРазныеСтроки 
			И ПараметрыСовпадают
			И (ПоискПоЭталоннойСреде Или ПоискПоЭталонномуБенчмарку);

		Если НайденЭталон Тогда
			Возврат СтрокаЭталон;
		КонецЕсли;

	КонецЦикла;

КонецФункции

Функция ПараметрыСовпадают(СтрокаПервая, СтрокаВторая)
		
	Если СтрокаПервая.Параметры.Количество() <> СтрокаВторая.Параметры.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;

	ПараметрыСовпадают = Истина;
	Для Каждого ПараметрПервой Из СтрокаПервая.Параметры Цикл

		ПараметрНайден = Ложь;
		Для Каждого ПараметрВторой Из СтрокаВторая.Параметры Цикл
			Если ПараметрПервой.Имя = ПараметрВторой.Имя
				И ПараметрПервой.Значение = ПараметрВторой.Значение Тогда
				ПараметрНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если Не ПараметрНайден Тогда
			ПараметрыСовпадают = Ложь;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат ПараметрыСовпадают;

КонецФункции

// Пустая таблица расшифровки
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * ДескрипторБенчмарка - ДескрипторБенчмарка
//     * Параметры - Массив из ПараметрБенчмарка
//     * Статистика - СтатистикаБенчмарка
//     * Эталон - СтрокаТаблицыЗначений, Неопределено
//     * ЭтоЭталон - Булево
//     * Замеры - см. НоваяТаблицаЗамеров
//     * ИсполняющаяСреда - см. НоваяИсполняющаяСреда
Функция НоваяТаблицаРасшифровки()

	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("ДескрипторБенчмарка");
	Таблица.Колонки.Добавить("Параметры");
	Таблица.Колонки.Добавить("Статистика");
	Таблица.Колонки.Добавить("Эталон");
	Таблица.Колонки.Добавить("ЭтоЭталон");
	Таблица.Колонки.Добавить("Замеры");
	Таблица.Колонки.Добавить("ИсполняющаяСреда");

	Возврат Таблица;
	
КонецФункции

// Пустая таблица замеров
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * Этап - см. ЭтапыБенчмарка
//     * НомерИтерации - Число
//     * КоличествоОпераций - Число
//     * Наносекунд - Число - Наносекунд за итерацию
//     * НаносекундЗаОперацию - Число - Наносекунд за операцию
//     * ВыделяемаяПамять - Число - Байт выделяемой памяти за итерацию
//     * ВыделяемаяПамятьЗаОперацию - Число - Байт выделяемой памяти за операцию
Функция НоваяТаблицаЗамеров()

	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Этап");
	Таблица.Колонки.Добавить("НомерИтерации");
	Таблица.Колонки.Добавить("КоличествоОпераций");
	Таблица.Колонки.Добавить("Наносекунд");
	Таблица.Колонки.Добавить("НаносекундЗаОперацию");
	Таблица.Колонки.Добавить("ВыделяемаяПамять");
	Таблица.Колонки.Добавить("ВыделяемаяПамятьЗаОперацию");

	Возврат Таблица;
	
КонецФункции

Функция НоваяИсполняющаяСреда()
	
	ИсполняющаяСреда = Новый Структура();
	ИсполняющаяСреда.Вставить("Версия", "");
	ИсполняющаяСреда.Вставить("Алиас", "");
	ИсполняющаяСреда.Вставить("Наименование", "");

	Возврат ИсполняющаяСреда;

КонецФункции

#КонецОбласти
