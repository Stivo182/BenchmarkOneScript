#Использовать asserts
#Использовать coloratos
#Использовать logos
#Использовать fs

Перем _ОбъектБенчмарков; // Экземпляр класса бенчмарков
Перем _Конфигурация; // КонфигурацияБенчмарков
Перем _ДескрипторыБенчмарков; // КоллекцияДескрипторовБенчмарков
Перем _СтатистикаСборщикаМусора; // СтатистикаСборщикаМусора
Перем _Хронометр; // Хронометр
Перем _Лог; // Лог

// Запускает бенчмарки
//
// Параметры:
//   Источник - Тип - Класс бенчмарков
//            - КоллекцияДескрипторовБенчмарков
//            - ДескрипторБенчмарка
//            - Произвольный - Экземпляр класса с бенчмарками
//   Конфигурация - КонфигурацияБенчмарков - Полностью заменяет текущую конфигурацию на переданную
Процедура ПриСозданииОбъекта(Источник, Конфигурация = Неопределено)

	Инициализировать(Источник, Конфигурация);

	_Лог = Логирование.ПолучитьЛог("oscript.lib.benchmark.ЗапускательБенчмарков");

КонецПроцедуры

#Область ПрограммныйИнтерфейс

// Запускает бенчмарки
// 
// Возвращаемое значение:
//   Структура:
//     * ИмяКласса - Строка - Имя класса
//     * ДескрипторыБенчмарков - КоллекцияДескрипторовБенчмарков
//     * Конфигурация - КонфигурацияБенчмарков
//     * СредаОкружения - СредаОкруженияБенчмарков
//     * Отчет - ОтчетБенчмарков
//     * РезультатыЗапусков - ТаблицаЗначений:
//       ** ДескрипторБенчмарка - ДескрипторБенчмарка
//       ** Параметры - Массив из ПараметрБенчмарка
//       ** Эталон - СтрокаТаблицыЗначений, Неопределено
//       ** Статистика - СтатистикаБенчмарка
//       ** Замеры - ТаблицаЗначений:
//          *** Этап - см. ЭтапыБенчмарка
//          *** НомерИтерации - Число
//          *** КоличествоОпераций - Число
//          *** Наносекунд - Число - Наносекунд за итерацию
//          *** НаносекундЗаОперацию - Число - Наносекунд за операцию
//          *** ВыделяемаяПамять - Число - Байт выделяемой памяти за итерацию
//          *** ВыделяемаяПамятьЗаОперацию - Число - Байт выделяемой памяти за операцию
Функция Запустить() Экспорт

	_Хронометр = Новый Хронометр();

	Если _Конфигурация.ТребуетсяМониторингПамяти() Тогда
		_СтатистикаСборщикаМусора = Новый СтатистикаСборщикаМусора();
	КонецЕсли;

	ПрогретьИнструментыЗамера();
	ПроверитьБенчмарки();

	Результат = ЗапуститьВсеБенчмарки();
	
	ВывестиРезультатыБенчмарков(Результат);
	ЭкспортироватьРезультаты(Результат);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура Инициализировать(Источник, Конфигурация)

	Если ТипЗнч(Источник) = Тип("Тип") Тогда

		_ОбъектБенчмарков = Новый(Источник);

	ИначеЕсли ТипЗнч(Источник) = Тип("КоллекцияДескрипторовБенчмарков") Тогда

		Ожидаем.Что(Источник.Количество(), "Коллекция дескрипторов бенчмарков пустая").Больше(0);
		
		ТипОбъекта = Источник.ПолучитьПервый().ТипОбъекта();
		_ОбъектБенчмарков = Новый(ТипОбъекта);
		_ДескрипторыБенчмарков = Источник;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДескрипторБенчмарка") Тогда

		_ОбъектБенчмарков = Новый(Источник.ТипОбъекта());
		_ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков();
		_ДескрипторыБенчмарков.Добавить(Источник);

	Иначе

		_ОбъектБенчмарков = Источник;

	КонецЕсли;
	
	Если Не Конфигурация = Неопределено Тогда
		_Конфигурация = Конфигурация;
	Иначе
		_Конфигурация = Новый КонфигурацияБенчмарков(_ОбъектБенчмарков);
	КонецЕсли;

	Если _ДескрипторыБенчмарков = Неопределено Тогда
		_ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(_ОбъектБенчмарков);
	КонецЕсли;

КонецПроцедуры

Функция ЗапуститьВсеБенчмарки()

	КонтекстСобытия = Новый Структура();
	КонтекстСобытия.Вставить("Конфигурация", _Конфигурация);
	КонтекстСобытия.Вставить("ДескрипторыБенчмарков", _ДескрипторыБенчмарков);

	ВызватьОбработчикСобытия(СобытияБенчмарков.ПередВсеми, КонтекстСобытия);

	РезультатыЗапусков = НоваяТаблицаРезультатовЗапусков();
	Для Каждого ДескрипторБенчмарка Из _ДескрипторыБенчмарков.ВМассив() Цикл

		КомбинацииПараметров = КомбинаторПараметровБенчмарка.Комбинировать(ДескрипторБенчмарка, _Конфигурация);
		
		Если КомбинацииПараметров.Количество() = 0 Тогда
			КомбинацииПараметров.Добавить(Новый Массив());
		КонецЕсли;

		Для Каждого Параметры Из КомбинацииПараметров Цикл

			РезультатЗапуска = ЗапуститьБенчмарк(ДескрипторБенчмарка, Параметры);

			СтрокаРезультата = РезультатыЗапусков.Добавить();
			СтрокаРезультата.ДескрипторБенчмарка = ДескрипторБенчмарка;
			СтрокаРезультата.Параметры = Параметры;
			СтрокаРезультата.Замеры = РезультатЗапуска.Замеры;
			СтрокаРезультата.Статистика = РезультатЗапуска.Статистика;

		КонецЦикла;

	КонецЦикла;

	ЗаполнитьЭталоны(РезультатыЗапусков);

	Результат = ПодготовитьРезультат(РезультатыЗапусков);
	
	ВызватьОбработчикСобытия(СобытияБенчмарков.ПослеВсех, Результат);

	Возврат Результат;

КонецФункции

Функция ЗапуститьБенчмарк(ДескрипторБенчмарка, Параметры)

	ВывестиЗаголовокБенчмарка(ДескрипторБенчмарка, Параметры);

	ПараметрыМетода = ПараметрыМетодаБенчмарка(ДескрипторБенчмарка, Параметры);
	УстановитьПараметрыОбъекта(Параметры);
	
	КонтекстСобытия = Новый Структура();
	КонтекстСобытия.Вставить("ДескрипторБенчмарка", ДескрипторБенчмарка);
	КонтекстСобытия.Вставить("ПараметрыМетода", ПараметрыМетода);

	ВызватьОбработчикСобытия(СобытияБенчмарков.ПередКаждым, КонтекстСобытия);

	Делегат = ДескрипторБенчмарка.Делегат(_ОбъектБенчмарков, ПараметрыМетода);
	
	Если _Конфигурация.Стратегия() = СтратегииЗапускаБенчмарка.ХолодныйЗапуск Тогда

		КоличествоВызововЗаИтерацию = 1;

	Иначе

		КоличествоВызововЗаИтерацию = РассчитатьКоличествоВызововЗаИтерацию(Делегат);
		ЗапуститьЭтапПрогрева(Делегат, КоличествоВызововЗаИтерацию);

	КонецЕсли;

	Замеры = НоваяТаблицаЗамеров();

	ЗапуститьЭтапИзмерения(Делегат, КоличествоВызововЗаИтерацию, Замеры);

	Если _Конфигурация.ТребуетсяМониторингПамяти() Тогда
		ЗапуститьМониторингПамяти(Делегат, КоличествоВызововЗаИтерацию, Замеры);
	КонецЕсли;

	Статистика = Новый СтатистикаБенчмарка(Замеры);

	КонтекстСобытия = Новый Структура();
	КонтекстСобытия.Вставить("ДескрипторБенчмарка", ДескрипторБенчмарка);
	КонтекстСобытия.Вставить("Параметры", Параметры);
	КонтекстСобытия.Вставить("Замеры", Замеры);
	КонтекстСобытия.Вставить("Статистика", Статистика);

	ВызватьОбработчикСобытия(СобытияБенчмарков.ПослеКаждого, КонтекстСобытия);
	
	ЦветнойВывод.Вывести(Символы.ПС);
	ЦветнойВывод.ВывестиСтроку("// Статистика", "Малиновый");
	ЦветнойВывод.ВывестиСтроку(Статистика.ВСтроку(), "Серый");

	Возврат Новый Структура("Замеры, Статистика", Замеры, Статистика);

КонецФункции

Функция РассчитатьКоличествоВызововЗаИтерацию(Делегат)

	КоличествоВызововЗаИтерацию = _Конфигурация.КоличествоВызововЗаИтерацию();
	Если Не КоличествоВызововЗаИтерацию = 0 Тогда
		Возврат КоличествоВызововЗаИтерацию;
	КонецЕсли;
	
	МинимальноеКоличествоВызовов = _Конфигурация.МинимальноеКоличествоВызововЗаИтерацию();
	ЦелевоеВремяИтерации = ЕдиницыИзмеренийБенчмарков.Конвертировать(
		_Конфигурация.МинимальноеВремяИтерации(), 
		ЕдиницыИзмеренийБенчмарков.Миллисекунда,
		ЕдиницыИзмеренийБенчмарков.Наносекунда
	);
	
	КоличествоВызовов = МинимальноеКоличествоВызовов;	
	НомерИтерации = 0;
	ВремяПредыдущейОперации = 0;
	ДопустимаяПогрешность = 0.05;
	МаксимальноеКоличествоПроверокНаПогрешность = 5;

	Пока Истина Цикл

		НомерИтерации = НомерИтерации + 1;
		РезультатИтерации = ВыполнитьИтерацию(Делегат, ЭтапыБенчмарка.Оценка, НомерИтерации, КоличествоВызовов);
		
		ВремяИтерации = РезультатИтерации.Наносекунд;
		ВремяОперации = РезультатИтерации.НаносекундЗаОперацию;

		Погрешность = (ВремяПредыдущейОперации - ВремяОперации) / (ВремяОперации + ВремяПредыдущейОперации);
		Погрешность = ?(Погрешность < 0, -Погрешность, Погрешность);

		Если ВремяИтерации < ЦелевоеВремяИтерации Тогда
			КоличествоВызовов = КоличествоВызовов * 2;
			ВремяПредыдущейОперации = ВремяОперации;
			Продолжить;
		КонецЕсли;

		Если Погрешность > ДопустимаяПогрешность И НомерИтерации < МаксимальноеКоличествоПроверокНаПогрешность Тогда
			ВремяПредыдущейОперации = ВремяОперации;
			Продолжить;
		КонецЕсли;

		Прервать;

	КонецЦикла;

	Возврат КоличествоВызовов;

КонецФункции

Процедура ЗапуститьЭтапПрогрева(Делегат, КоличествоВызововЗаИтерацию)

	КоличествоПрогревочныхИтераций = _Конфигурация.КоличествоПрогревочныхИтераций();

	Если КоличествоПрогревочныхИтераций = 0 Тогда
		Возврат;
	КонецЕсли;

	Для НомерИтерации = 1 По КоличествоПрогревочныхИтераций Цикл

		ВыполнитьИтерацию(Делегат, ЭтапыБенчмарка.Прогрев, НомерИтерации, КоличествоВызововЗаИтерацию);	

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапуститьЭтапИзмерения(Делегат, КоличествоВызововЗаИтерацию, Замеры)

	Для НомерИтерации = 1 По _Конфигурация.КоличествоИтераций() Цикл

		РезультатИтерации = ВыполнитьИтерацию(Делегат, ЭтапыБенчмарка.Измерение, НомерИтерации, КоличествоВызововЗаИтерацию);
		ЗаполнитьЗначенияСвойств(Замеры.Добавить(), РезультатИтерации);

	КонецЦикла;

КонецПроцедуры

Процедура ЗапуститьМониторингПамяти(Делегат, КоличествоВызововЗаИтерацию, Замеры)

	Для НомерИтерации = 1 По _Конфигурация.КоличествоИтераций() Цикл

		РезультатИтерации = ВыполнитьИтерацию(Делегат, ЭтапыБенчмарка.Память, НомерИтерации, КоличествоВызововЗаИтерацию);
		ЗаполнитьЗначенияСвойств(Замеры.Добавить(), РезультатИтерации);

	КонецЦикла;

КонецПроцедуры

Процедура ПрогретьИнструментыЗамера()

	ТребуетсяМониторингПамяти = _Конфигурация.ТребуетсяМониторингПамяти();
	КоличествоИтераций = 5;

	Для НомерИтерации = 1 По КоличествоИтераций Цикл

		_Хронометр.Старт();
		_Хронометр.Стоп();

		Если ТребуетсяМониторингПамяти Тогда
			_СтатистикаСборщикаМусора.Начать();
			_СтатистикаСборщикаМусора.Завершить();
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Функция ВыполнитьИтерацию(Делегат, Этап, НомерИтерации, КоличествоВызовов)

	Наносекунд = 0;
	ВыделяемаяПамять = 0;
	
	Если Этап = ЭтапыБенчмарка.Память Тогда	
		ВыделяемаяПамять = ЗамеритьПамять(Делегат, КоличествоВызовов);
	Иначе
		Наносекунд = ЗамеритьВремя(Делегат, КоличествоВызовов);
	КонецЕсли;

	РезультатИтерации = НовыйРезультатИтерации();
	РезультатИтерации.Этап = Этап;
	РезультатИтерации.НомерИтерации = НомерИтерации;
	РезультатИтерации.КоличествоОпераций = КоличествоВызовов;
	РезультатИтерации.Наносекунд = Наносекунд;
	РезультатИтерации.НаносекундЗаОперацию = Наносекунд / КоличествоВызовов;
	РезультатИтерации.ВыделяемаяПамять = ВыделяемаяПамять;
	РезультатИтерации.ВыделяемаяПамятьЗаОперацию = ВыделяемаяПамять / КоличествоВызовов;

	Если НомерИтерации = 1 Тогда
		Консоль.Вывести(Символы.ПС);
	КонецЕсли;

	ЦветнойВывод.ВывестиСтроку(ПредставлениеРезультатаИтерации(РезультатИтерации), "Серый");

	Возврат РезультатИтерации;

КонецФункции

Функция ЗамеритьВремя(Делегат, КоличествоВызовов)

	Рефлектор = Новый Рефлектор();
	Объект = Делегат.Объект();
	ИмяМетода = Делегат.ИмяМетода();
	Параметры = Делегат.Параметры();
	ОсталосьВызовов = КоличествоВызовов;

	_Лог.Отладка("Начало замера времени <%1>", ИмяМетода);
	_Хронометр.Старт(); // Хронометр должен быть "прогрет"

	Пока ОсталосьВызовов > 0 Цикл
		Рефлектор.ВызватьМетод(Объект, ИмяМетода, Параметры);
		ОсталосьВызовов = ОсталосьВызовов - 1;
	КонецЦикла;

	_Хронометр.Стоп();
	_Лог.Отладка("Окончание замера времени <%1>", ИмяМетода);

	Возврат _Хронометр.Наносекунд;

КонецФункции

Функция ЗамеритьПамять(Делегат, КоличествоВызовов)

	Рефлектор = Новый Рефлектор();
	Объект = Делегат.Объект();
	ИмяМетода = Делегат.ИмяМетода();
	Параметры = Делегат.Параметры();
	ОсталосьВызовов = КоличествоВызовов;
	
	_Лог.Отладка("Начало замера памяти <%1>", ИмяМетода);
	_СтатистикаСборщикаМусора.Начать(); // Объект должен быть "прогрет"

	Пока ОсталосьВызовов > 0 Цикл
		Рефлектор.ВызватьМетод(Объект, ИмяМетода, Параметры);
		ОсталосьВызовов = ОсталосьВызовов - 1;
	КонецЦикла;

	_СтатистикаСборщикаМусора.Завершить();
	_Лог.Отладка("Завершение замера памяти <%1>", ИмяМетода);

	Возврат _СтатистикаСборщикаМусора.ВыделеноБайт;

КонецФункции

Процедура ВызватьОбработчикСобытия(ИмяСобытия, Контекст = Неопределено) Экспорт
	
	МассивДелегатов = _Конфигурация.ДелегатыОбработчиковСобытия(ИмяСобытия, _ОбъектБенчмарков, Контекст);	

	Для Каждого Делегат Из МассивДелегатов Цикл

		_Лог.Отладка("Начало вызова обработчика <%1> события <%2>", Делегат.ИмяМетода(), ИмяСобытия);

		Делегат.Исполнить();

		_Лог.Отладка("Завершение вызова обработчика <%1> события <%2>", Делегат.ИмяМетода(), ИмяСобытия);

	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыМетодаБенчмарка(ДескрипторБенчмарка, Параметры)

	ИменаПараметров = ДескрипторБенчмарка.ИменаПараметров();

	Если ИменаПараметров.Количество() = 0 Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ПараметрыМетода = Новый Массив(ИменаПараметров.Количество());
	
	Для Каждого Параметр Из Параметры Цикл
		Если Параметр.ЭтоПараметрМетода Тогда
			ПараметрыМетода[ИменаПараметров.Найти(Параметр.Имя)] = Параметр.Значение;
		КонецЕсли;	
	КонецЦикла;

	Возврат ПараметрыМетода;

КонецФункции

// Устанавливает значения публичным полям объекта
//
// Параметры:
//   Параметры - Массив из ПараметрБенчмарка
Процедура УстановитьПараметрыОбъекта(Параметры)

	Для Каждого Параметр Из Параметры Цикл		
		Если Не Параметр.ЭтоПараметрМетода Тогда
			_ОбъектБенчмарков[Параметр.Имя] = Параметр.Значение;
		КонецЕсли;		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьЭталоны(РезультатыЗапусков)

	Для Каждого Строка Из РезультатыЗапусков Цикл
		Если Не Строка.ДескрипторБенчмарка.ЭтоЭталон() Тогда
			Строка.Эталон = НайтиЭталон(РезультатыЗапусков, Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиЭталон(РезультатыЗапусков, СтрокаПоиска)

	Для Каждого СтрокаЭталон Из РезультатыЗапусков Цикл

		Если СтрокаЭталон = СтрокаПоиска Тогда
			Продолжить;
		КонецЕсли;

		Если Не СтрокаЭталон.ДескрипторБенчмарка.ЭтоЭталон() Тогда
			Продолжить;
		КонецЕсли;

		Если Не СтрокаПоиска.ДескрипторБенчмарка.Категория() = СтрокаЭталон.ДескрипторБенчмарка.Категория() Тогда
			Продолжить;
		КонецЕсли;

		ПараметрыСовпадают = Истина;
		Для Каждого Параметр Из СтрокаПоиска.Параметры Цикл

			ПараметрНайден = Ложь;
			Для Каждого ПараметрЭталона Из СтрокаЭталон.Параметры Цикл
				Если Параметр.Имя = ПараметрЭталона.Имя
					И  Параметр.Значение = ПараметрЭталона.Значение Тогда
					ПараметрНайден = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если Не ПараметрНайден Тогда
				ПараметрыСовпадают = Ложь;
				Прервать;
			КонецЕсли;

		КонецЦикла;

		Если ПараметрыСовпадают Тогда
			Возврат СтрокаЭталон;
		КонецЕсли;

	КонецЦикла;

КонецФункции

Процедура ПроверитьБенчмарки()

	БылЭталонПоКатегории = Новый Соответствие();
	НаличиеТиповОбъектов = Новый Соответствие();

	Для Каждого ДескрипторБенчмарка Из _ДескрипторыБенчмарков.ВМассив() Цикл

		НаличиеТиповОбъектов[ДескрипторБенчмарка.ТипОбъекта()] = Истина;

		Ожидаем
			.Что(НаличиеТиповОбъектов, "Не поддерживается запуск с разными типами объектов бенчмарков")
			.ИмеетДлину(1);

		Если ДескрипторБенчмарка.ЭтоЭталон() Тогда

			Категория = ДескрипторБенчмарка.Категория();

			Ожидаем
				.Что(БылЭталонПоКатегории[Категория], "Может быть только один эталонный бенчмарк в пределах категории")
				.ЭтоНеопределено();

			БылЭталонПоКатегории[Категория] = Истина;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ПредставлениеРезультатаИтерации(РезультатИтерации)

	ДлинаЭтапа = Макс(
		СтрДлина(ЭтапыБенчмарка.Оценка),
		СтрДлина(ЭтапыБенчмарка.Прогрев),
		СтрДлина(ЭтапыБенчмарка.Измерение),
		СтрДлина(ЭтапыБенчмарка.Память)
	);
	
	ДлинаЭтапа = ДлинаЭтапа + 1;

	Представление = СтрШаблон("%1 %2: %3 op, ",
		Лев(РезультатИтерации.Этап + "              ", ДлинаЭтапа),
		Лев("" + РезультатИтерации.НомерИтерации + " ", 2),
		Формат(РезультатИтерации.КоличествоОпераций, "ЧГ=")
	);

	Если РезультатИтерации.Этап = ЭтапыБенчмарка.Память Тогда

		Возврат Представление + СтрШаблон(
			"%1, %2/op",
			ПредставленияПоказателейБенчмарков.ПредставлениеЧитаемое(
				РезультатИтерации.ВыделяемаяПамять, 
				ЕдиницыИзмеренийБенчмарков.Байт
			),		
			ПредставленияПоказателейБенчмарков.ПредставлениеЧитаемое(
				РезультатИтерации.ВыделяемаяПамятьЗаОперацию, 
				ЕдиницыИзмеренийБенчмарков.Байт
			)
		);

	Иначе

		Возврат Представление + СтрШаблон(
			"%1, %2/op",
			ПредставленияПоказателейБенчмарков.ПредставлениеЧитаемое(
				РезультатИтерации.Наносекунд,
				ЕдиницыИзмеренийБенчмарков.Наносекунда
			),		
			ПредставленияПоказателейБенчмарков.ПредставлениеЧитаемое(
				РезультатИтерации.НаносекундЗаОперацию,
				ЕдиницыИзмеренийБенчмарков.Наносекунда
			)
		);

	КонецЕсли;

КонецФункции

Функция ПодготовитьРезультат(РезультатыЗапусков)

	ПостроительОтчета = Новый ПостроительОтчетаБенчмарков(_ДескрипторыБенчмарков, _Конфигурация, РезультатыЗапусков);
	Отчет = ПостроительОтчета.Сформировать();

	Результат = Новый Структура();
	Результат.Вставить("ИмяКласса", Строка(ТипЗнч(_ОбъектБенчмарков)));
	Результат.Вставить("ДескрипторыБенчмарков", _ДескрипторыБенчмарков);
	Результат.Вставить("Конфигурация", _Конфигурация);
	Результат.Вставить("СредаОкружения", Новый СредаОкруженияБенчмарков());
	Результат.Вставить("РезультатыЗапусков", РезультатыЗапусков);
	Результат.Вставить("Отчет", Отчет);

	Возврат Результат;

КонецФункции

Процедура ЭкспортироватьРезультаты(РезультатыЗапусков)
	
	КаталогАртефактов = _Конфигурация.КаталогАртефактов();
	МаскаФайлов = СтрШаблон("%1-*", РезультатыЗапусков.ИмяКласса);
	Экспортеры = _Конфигурация.Экспортеры();

	Если Не ЗначениеЗаполнено(КаталогАртефактов) Или Экспортеры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФС.ОбеспечитьКаталог(КаталогАртефактов);
	ФС.УдалитьФайлы(КаталогАртефактов, МаскаФайлов);

	Для Каждого Экспортер Из _Конфигурация.Экспортеры() Цикл
		Экспортер.Записать(РезультатыЗапусков);
	КонецЦикла;

	Артефакты = НайтиФайлы(КаталогАртефактов, МаскаФайлов);
	Если Артефакты.Количество() Тогда
		ЦветнойВывод.Вывести(Символы.ПС);
		ЦветнойВывод.ВывестиСтроку( "// Артефакты", "Малиновый");
	КонецЕсли;

	Для Каждого Артефакт Из Артефакты Цикл
		ЦветнойВывод.ВывестиСтроку(Артефакт.ПолноеИмя, "ТемноЖелтый");
	КонецЦикла;

КонецПроцедуры

Процедура ВывестиЗаголовокБенчмарка(ДескрипторБенчмарка, Параметры)

	Текст = СтрШаблон("// Бенчмарк: %1.%2", ДескрипторБенчмарка.ТипОбъекта(), ДескрипторБенчмарка.Метод());

	ЦветнойВывод.Вывести(Символы.ПС);
	ЦветнойВывод.ВывестиСтроку(Текст, "Малиновый");

	Цвет = "ТемноЖелтый";

	// Параметры
	Если Параметры.Количество() > 0 Тогда

		ЦветнойВывод.Вывести("// Параметры: ", Цвет);

		ЭтоПервыйПараметр = Истина;
		Для Каждого Параметр Из Параметры Цикл	

			Если Не ЭтоПервыйПараметр Тогда
				ЦветнойВывод.Вывести(", ", Цвет);
			КонецЕсли;
			
			ЦветнойВывод.Вывести(СтрШаблон("%1=%2", Параметр.Имя, Строка(Параметр.Значение)), Цвет);
			
			ЭтоПервыйПараметр = Ложь;

		КонецЦикла;
		
		ЦветнойВывод.ВывестиСтроку("");
		
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиРезультатыБенчмарков(Результат)

	ТекстСреды = Результат.СредаОкружения.ВСтроку();
	ТекстСреды = СтрЗаменить(ТекстСреды, Символы.ПС, " \" + Символы.ПС);

	ЦветнойВывод.Вывести(Символы.ПС);
	ЦветнойВывод.ВывестиСтроку("// Сводка", "Малиновый");
	ЦветнойВывод.ВывестиСтроку(ТекстСреды, "ТемноЖелтый");
	ЦветнойВывод.Вывести(Символы.ПС);
	ЦветнойВывод.ВывестиСтроку(Результат.Отчет.КакMarkdown(), "Бирюза");
	ЦветнойВывод.Вывести(Символы.ПС);
	ЦветнойВывод.ВывестиСтроку("// Легенда", "Малиновый");
	ЦветнойВывод.ВывестиСтроку(Результат.Отчет.Легенда(), "Синий");

КонецПроцедуры

Функция НовыйРезультатИтерации()

	Результат = Новый Структура();
	Результат.Вставить("Этап", "");
	Результат.Вставить("НомерИтерации", 0);
	Результат.Вставить("КоличествоОпераций", 0);
	Результат.Вставить("Наносекунд", 0);
	Результат.Вставить("НаносекундЗаОперацию",0);
	Результат.Вставить("ВыделяемаяПамять", 0);
	Результат.Вставить("ВыделяемаяПамятьЗаОперацию", 0);

	Возврат Результат;

КонецФункции

// Таблица замеров
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * Этап - см. ЭтапыБенчмарка
//     * НомерИтерации - Число
//     * КоличествоОпераций - Число
//     * Наносекунд - Число - Наносекунд за итерацию
//     * НаносекундЗаОперацию - Число - Наносекунд за операцию
//     * ВыделяемаяПамять - Число - Байт выделяемой памяти за итерацию
//     * ВыделяемаяПамятьЗаОперацию - Число - Байт выделяемой памяти за операцию
Функция НоваяТаблицаЗамеров()

	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Этап");
	Таблица.Колонки.Добавить("НомерИтерации");
	Таблица.Колонки.Добавить("КоличествоОпераций");
	Таблица.Колонки.Добавить("Наносекунд");
	Таблица.Колонки.Добавить("НаносекундЗаОперацию");
	Таблица.Колонки.Добавить("ВыделяемаяПамять");
	Таблица.Колонки.Добавить("ВыделяемаяПамятьЗаОперацию");

	Возврат Таблица;
	
КонецФункции

// Таблица результатов запусков
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * ДескрипторБенчмарка - ДескрипторБенчмарка
//     * Параметры - Массив из ПараметрБенчмарка
//     * Статистика - СтатистикаБенчмарка
//     * Эталон - СтрокаТаблицыЗначений, Неопределено
//     * Замеры - см. НоваяТаблицаЗамеров
Функция НоваяТаблицаРезультатовЗапусков()

	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("ДескрипторБенчмарка");
	Таблица.Колонки.Добавить("Параметры");
	Таблица.Колонки.Добавить("Статистика");
	Таблица.Колонки.Добавить("Эталон");
	Таблица.Колонки.Добавить("Замеры");

	Возврат Таблица;
	
КонецФункции

#КонецОбласти