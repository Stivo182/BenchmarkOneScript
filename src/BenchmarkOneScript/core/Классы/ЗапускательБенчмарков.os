#Использовать fs
#Использовать asserts
#Использовать tempfiles
#Использовать logos
#Использовать delegate

Перем _ОбъектБенчмарков; // Экземпляр класса с бенчмарками
Перем _Конфигурация; // КонфигурацияБенчмарков
Перем _ДескрипторыБенчмарков; // КоллекцияДескрипторовБенчмарков
Перем _МенеджерВременныхФайлов; // МенеджерВременныхФайлов
Перем _СтатистикаСборщикаМусора; // СтатистикаСборщикаМусора
Перем _Хронометр; // Хронометр
Перем _Лог; // Лог

// Запускает бенчмарки
//
// Параметры:
//   ИсточникБенчмарков - Тип - Класс, содержащий бенчмарки
//                      - КоллекцияДескрипторовБенчмарков
//                      - ДескрипторБенчмарка
//                      - Произвольный - Экземпляр класса с бенчмарками
//   Конфигурация - КонфигурацияБенчмарков - Конфигурация бенчмарков
Процедура ПриСозданииОбъекта(ИсточникБенчмарков, Конфигурация = Неопределено)

	ОберткаИсточника = Новый ОберткаИсточникаБенчмарков(ИсточникБенчмарков);
	
	_ОбъектБенчмарков = ОберткаИсточника.ОбъектБенчмарков();
	_ДескрипторыБенчмарков = ОберткаИсточника.Дескрипторы();
	_Хронометр = Новый Хронометр();

	Если Не Конфигурация = Неопределено Тогда
		_Конфигурация = Конфигурация;
	Иначе
		_Конфигурация = Новый КонфигурацияБенчмарков(_ОбъектБенчмарков);
	КонецЕсли;

	Если _Конфигурация.ТребуетсяМониторингПамяти() Тогда
		_СтатистикаСборщикаМусора = Новый СтатистикаСборщикаМусора();
	КонецЕсли;

	_МенеджерВременныхФайлов = Новый МенеджерВременныхФайлов();
	_Лог = Логирование.ПолучитьЛог("oscript.lib.benchmark.ЗапускательБенчмарков");

КонецПроцедуры

#Область ПрограммныйИнтерфейс

// Запускает бенчмарки
// 
// Возвращаемое значение:
//   Структура:
//     * ИмяКласса - Строка - Имя класса
//     * ДескрипторыБенчмарков - КоллекцияДескрипторовБенчмарков
//     * Конфигурация - КонфигурацияБенчмарков
//     * Отчет - ОтчетБенчмарков
//     * СредаОкружения - СредаОкруженияБенчмарков
//     * Расшифровка - ТаблицаЗначений:
//       ** ДескрипторБенчмарка - ДескрипторБенчмарка
//       ** Параметры - Массив из ПараметрБенчмарка
//       ** Эталон - СтрокаТаблицыЗначений, Неопределено
//       ** ЭтоЭталон - Булево
//       ** Статистика - СтатистикаБенчмарка
//       ** ИсполняющаяСреда - Структура:
//          *** Версия - Строка
//          *** Алиас - Строка
//          *** Наименование - Строка
//       ** Замеры - ТаблицаЗначений:
//          *** Этап - см. ЭтапыБенчмарка
//          *** НомерИтерации - Число
//          *** КоличествоОпераций - Число
//          *** Наносекунд - Число - Наносекунд за итерацию
//          *** НаносекундЗаОперацию - Число - Наносекунд за операцию
//          *** ВыделяемаяПамять - Число - Байт выделяемой памяти за итерацию
//          *** ВыделяемаяПамятьЗаОперацию - Число - Байт выделяемой памяти за операцию
Функция Запустить() Экспорт

	ЭтоВоркер = Бенчмаркинг.ЭтоВоркер();
	ЗапускатьВТекущейСреде = _Конфигурация.ИсполняющаяСредаОграниченаТекущей() Или ЭтоВоркер;

	Валидатор = Новый ВалидаторЗапускаБенчмарков(_ДескрипторыБенчмарков, _Конфигурация);
	Если Не Валидатор.ЗапускВозможен() Тогда
		ВызватьИсключение Валидатор.ПолучитьТекстОшибок();
	КонецЕсли;

	Если ЗапускатьВТекущейСреде Тогда
		Результат = ЗапуститьВсеБенчмарки();
	Иначе
		Результат = ЗапуститьБенчмаркиВКаждойВерсии();
	КонецЕсли;

	Если Не ЭтоВоркер Тогда
		ВывестиРезультатыБенчмарков(Результат);
	КонецЕсли;

	ЭкспортироватьРезультаты(Результат);
	
	_МенеджерВременныхФайлов.Удалить();

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗапускВДругихСредах

Функция ЗапуститьБенчмаркиВКаждойВерсии()
	
	ПередаваемаяКонфигурация = _Конфигурация
		.Скопировать()
		.УстановитьКаталогАртефактов(_МенеджерВременныхФайлов.НовоеИмяФайла())
		.УдалитьЭкспортеры()
		.ДобавитьЭкспортер(ЭкспортерыРезультатовБенчмарков.Json);

	МенеджерРасшифровкиРезультатов = Новый МенеджерРасшифровкиРезультатовБенчмарков();
	Результат = НовыйРезультат(МенеджерРасшифровкиРезультатов);
	Результат.СредаОкружения.ВерсияИсполняющейСреды = "";

	Для Каждого ИсполняющаяСреда Из _Конфигурация.ВерсииИсполняющейСреды() Цикл
		ЗапуститьВИсполняющейСреде(ИсполняющаяСреда, ПередаваемаяКонфигурация, Результат.Расшифровка);
	КонецЦикла;

	МенеджерРасшифровкиРезультатов.ОпределитьЭталоны(_Конфигурация);

	Построитель = Новый ПостроительОтчетаБенчмарков(_ДескрипторыБенчмарков, _Конфигурация, Результат.Расшифровка);
	Результат.Отчет = Построитель.Сформировать();

	Возврат Результат;

КонецФункции

Процедура ЗапуститьВИсполняющейСреде(ИсполняющаяСреда, Конфигурация, РасшифровкаРезультатов)
			
	ТаймаутМинут = 10;
	МиллисекундВМинуте = 60000;
	КаталогАртефактов = Конфигурация.КаталогАртефактов();

	_Лог.Отладка("Запуск процесса в исполняющей среде версии <%1>", ИсполняющаяСреда.Версия);

	ФС.ОбеспечитьПустойКаталог(КаталогАртефактов);

	ВывестиЗаголовок(ИсполняющаяСреда.Версия);
	ВывестиКонфигурацию();

	Процесс = ПодготовитьПроцесс(Конфигурация, ИсполняющаяСреда.Версия);
	Процесс.Запустить();

	ВремяНачала = ТекущаяУниверсальнаяДата();

	Пока Не ПроверитьЗавершениеПроцесса(Процесс) Цикл
		ПрошлоМинут = (ТекущаяУниверсальнаяДата() - ВремяНачала) / МиллисекундВМинуте;
		Если ПрошлоМинут >= ТаймаутМинут Тогда
			Процесс.Завершить();
			ВызватьИсключение СтрШаблон("Превышено время ожидания (%1 мин.) завершения дочернего процесса", ТаймаутМинут);
		КонецЕсли;
	КонецЦикла;

	Если Процесс.КодВозврата <> 0 Тогда
		ВызватьИсключение СтрШаблон("Завершение процесса с ошибкой в исполняющей среде версии <%1>", ИсполняющаяСреда.Версия);
	КонецЕсли;

	ПрочитатьРасшифровкуЗамеровИзJSON(РасшифровкаРезультатов, КаталогАртефактов, ИсполняющаяСреда);

	_Лог.Отладка("Завершение процесса в исполняющей среде версии <%1>", ИсполняющаяСреда.Версия);

КонецПроцедуры

Функция ПодготовитьПроцесс(Конфигурация, Версия)
	
	Тип = _ДескрипторыБенчмарков.ПолучитьПервый().ТипОбъекта();
	ИмяФайлаИсполняющейСреды = ИмяФайлаИсполняющейСреды(Версия);
	ИмяФайлаТочкиВхода = ТочкаВходаКонсольногоПриложения();
	ИмяФайлаКонфигурации = ПолучитьИмяФайлаКонфигурацииДляПроцесса(Конфигурация);
	ИмяФайлаТипа = Новый РасширениеТипа(Тип).Источник;
	КаталогБиблиотек = ИсполняющаяСредаБенчмарков.КаталогБиблиотек();

	ПеременныеСреды = ПеременныеСреды();
	ПеременныеСреды.Вставить("OSCRIPT_CONFIG", СтрШаблон("lib.system=%1; systemlanguage=ru", КаталогБиблиотек));
	
	СтрокаКоманды = Новый Массив();

	// oscript.exe
	СтрокаКоманды.Добавить(ИмяФайлаИсполняющейСреды);

	// benchos
	СтрокаКоманды.Добавить(ОбернутьВКавычки(ИмяФайлаТочкиВхода));

	// run
	СтрокаКоманды.Добавить("run");

	// --worker
	СтрокаКоманды.Добавить("--worker");

	// --config
	СтрокаКоманды.Добавить("--config");
	СтрокаКоманды.Добавить(ОбернутьВКавычки(ИмяФайлаКонфигурации));

	// FILE
	СтрокаКоманды.Добавить(ОбернутьВКавычки(ИмяФайлаТипа));

	СтрокаКоманды = СтрСоединить(СтрокаКоманды, " ");

	_Лог.Отладка("Строка запуска: " + СтрокаКоманды);

	Попытка
		Процесс = СоздатьПроцесс(СтрокаКоманды, ".", Истина, , , ПеременныеСреды);
	Исключение
		ТекстОшибки = ИнформацияОбОшибке().ПодробноеОписаниеОшибки();
		ВызватьИсключение СтрШаблон("Не удалось запустить процесс бенчмаркинга для версии <%1>.
			|Ошибка: %2", 
			Версия,
			ТекстОшибки);
	КонецПопытки;

	Возврат Процесс;

КонецФункции

Функция ПроверитьЗавершениеПроцесса(Процесс)

	ПериодОпросаВМиллисекундах = 100;
		
	Приостановить(ПериодОпросаВМиллисекундах);

	Если Процесс.ПотокВывода.ЕстьДанные Тогда
		СтрокаВывода = Процесс.ПотокВывода.Прочитать();
		ВывестиСтроку(СтрокаВывода);
	КонецЕсли;

	Если Процесс.ПотокОшибок.ЕстьДанные Тогда
		СтрокаВывода = Процесс.ПотокОшибок.Прочитать();
		ВывестиСтроку(СтрокаВывода);
	КонецЕсли;

	Возврат Процесс.Завершен;

КонецФункции

Функция ПолучитьИмяФайлаКонфигурацииДляПроцесса(Конфигурация)

	ПутьКФайлу = _МенеджерВременныхФайлов.СоздатьФайл("json");

	Сериализатор = Новый СериализаторКонфигурацииБенчмарков();
	Сериализатор.СериализоватьВJSON(Конфигурация, ПутьКФайлу);

	Возврат ПутьКФайлу;
	
КонецФункции

Функция ТочкаВходаКонсольногоПриложения()
	Возврат Новый Файл(ОбъединитьПути(ТекущийСценарий().Каталог, "../../cmd/main.os")).ПолноеИмя;
КонецФункции

Функция ИмяФайлаИсполняющейСреды(Версия)

	Если ФС.ФайлСуществует(Версия) Тогда
		Возврат Версия;
	КонецЕсли;

	КаталогУстановки = ИсполняющаяСредаБенчмарков.КаталогУстановки();
	Если КаталогУстановки = Неопределено Тогда
		ВызватьИсключение "Не найден каталог с установленными версиями OneScript.
		|Убедитесь, что OVM (OneScript Version Manager) установлен и переменная OVM_INSTALL_PATH настроена корректно.";
	КонецЕсли;

	_Лог.Отладка(СтрШаблон("Каталог с установленными версиями OneScript: %1", КаталогУстановки));
	
	ИмяФайла = ИсполняющаяСредаБенчмарков.НайтиИсполняемыйФайл(Версия);

	Если ИмяФайла = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не найден OneScript версии %1 в каталоге OVM (OneScript Version Manager)", Версия);
	КонецЕсли;
			
	Возврат ИмяФайла;

КонецФункции

Процедура ПрочитатьРасшифровкуЗамеровИзJSON(РасшифровкаРезультатов, Каталог, ИсполняющаяСреда)
	
	Сериализатор = Новый СериализаторРезультатовБенчмарков();

	Файлы = НайтиФайлы(Каталог, "*-report.json");
	Для Каждого Файл Из Файлы Цикл
		Данные = Сериализатор.ДесериализоватьИзJSON(Файл.ПолноеИмя, _Конфигурация);
		Для Каждого СтрокаРезультата Из Данные.Расшифровка Цикл
			НоваяСтрокаТаблицы = РасшифровкаРезультатов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаРезультата);
			НоваяСтрокаТаблицы.ИсполняющаяСреда.Алиас = ИсполняющаяСреда.Версия; // Заменяем current	
			НоваяСтрокаТаблицы.ИсполняющаяСреда.Наименование = ИсполняющаяСреда.Наименование;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ЗапускВТекущейСреде

Функция ЗапуститьВсеБенчмарки()

	ПрогретьИнструментыЗамера();

	Если Не Бенчмаркинг.ЭтоВоркер() Тогда
		ВывестиЗаголовок();
		ВывестиКонфигурацию();
	КонецЕсли;

	// Инициализация результатов
	МенеджерРасшифровкиРезультатов = Новый МенеджерРасшифровкиРезультатовБенчмарков();
	Результат = НовыйРезультат(МенеджерРасшифровкиРезультатов);
	
	// Событие ПередВсеми
	КонтекстСобытия = Новый Структура();
	КонтекстСобытия.Вставить("Конфигурация", _Конфигурация);
	КонтекстСобытия.Вставить("ДескрипторыБенчмарков", _ДескрипторыБенчмарков);

	ВызватьОбработчикСобытия(СобытияБенчмарков.ПередВсеми, КонтекстСобытия);

	// Запуск бенчмарков
	ПараметрыКонфигурации = _Конфигурация.Параметры();
	ПараметрыКонфигурацииИзИсточников = ПрочитатьИсточникиПараметровПолей();

	Для Каждого ДескрипторБенчмарка Из _ДескрипторыБенчмарков.ВМассив() Цикл

		НаборыПараметров = Новый Массив();
		ДополнитьМассив(НаборыПараметров, ПараметрыКонфигурации);
		ДополнитьМассив(НаборыПараметров, ПараметрыКонфигурацииИзИсточников);
		ДополнитьМассив(НаборыПараметров, ДескрипторБенчмарка.НаборыПараметров());
		ДополнитьМассив(НаборыПараметров, ПрочитатьИсточникиПараметровМетодаБенчмарка(ДескрипторБенчмарка));

		КомбинацииПараметров = КомбинаторПараметровБенчмарка.Комбинировать(НаборыПараметров);
		
		Если КомбинацииПараметров.Количество() = 0 Тогда
			КомбинацииПараметров.Добавить(Новый Массив());
		КонецЕсли;

		Для Каждого Параметры Из КомбинацииПараметров Цикл
			ЗапуститьБенчмарк(ДескрипторБенчмарка, Параметры, МенеджерРасшифровкиРезультатов);
		КонецЦикла;

	КонецЦикла;

	// Подготовка результатов
	МенеджерРасшифровкиРезультатов.ОпределитьЭталоны(_Конфигурация);
	МенеджерРасшифровкиРезультатов.ОбновитьСтатистику();
	
	Построитель = Новый ПостроительОтчетаБенчмарков(_ДескрипторыБенчмарков, _Конфигурация, Результат.Расшифровка);
	Результат.Отчет = Построитель.Сформировать();
	
	// Событие ПослеВсех
	ВызватьОбработчикСобытия(СобытияБенчмарков.ПослеВсех, Результат);

	Возврат Результат;

КонецФункции

Процедура ЗапуститьБенчмарк(ДескрипторБенчмарка, Параметры, МенеджерРасшифровкиРезультатов)

	ВывестиЗаголовокБенчмарка(ДескрипторБенчмарка);
	ВывестиПараметры(Параметры);

	ПараметрыМетода = ПараметрыМетодаБенчмарка(ДескрипторБенчмарка, Параметры);
	УстановитьПараметрыОбъекта(Параметры);

	// Инициализация результата
	Результат = МенеджерРасшифровкиРезультатов.Добавить();
	Результат.ДескрипторБенчмарка = ДескрипторБенчмарка;
	Результат.Параметры = Параметры;
	Результат.Статистика = Новый СтатистикаБенчмарка();

	Если Бенчмаркинг.ЭтоВоркер() Тогда
		Результат.ИсполняющаяСреда.Версия = Новый СистемнаяИнформация().Версия;
		Результат.ИсполняющаяСреда.Алиас = "current";
	КонецЕсли;
	
	// Событие ПередКаждым
	КонтекстСобытия = Новый Структура();
	КонтекстСобытия.Вставить("ДескрипторБенчмарка", ДескрипторБенчмарка);
	КонтекстСобытия.Вставить("ПараметрыМетода", ПараметрыМетода);

	ВызватьОбработчикСобытия(СобытияБенчмарков.ПередКаждым, КонтекстСобытия);

	// Запуск итераций
	Делегат = ДескрипторБенчмарка.Делегат(_ОбъектБенчмарков, ПараметрыМетода);

	Если _Конфигурация.Стратегия() = СтратегииЗапускаБенчмарка.ХолодныйЗапуск Тогда
		КоличествоВызововЗаИтерацию = 1;
	Иначе
		КоличествоВызововЗаИтерацию = РассчитатьКоличествоВызововЗаИтерацию(Делегат);
		ЗапуститьЭтапПрогрева(Делегат, КоличествоВызововЗаИтерацию);
	КонецЕсли;

	ЗапуститьЭтапИзмерения(Делегат, КоличествоВызововЗаИтерацию, Результат.Замеры);

	Если _Конфигурация.ТребуетсяМониторингПамяти() Тогда
		ЗапуститьМониторингПамяти(Делегат, КоличествоВызововЗаИтерацию, Результат.Замеры);
	КонецЕсли;

	// Сбор статистики
	Результат.Статистика.Прочитать(Результат.Замеры);
	ВывестиСтатистику(Результат.Статистика);

	// Событие ПослеКаждого
	КонтекстСобытия = Новый Структура();
	КонтекстСобытия.Вставить("ДескрипторБенчмарка", ДескрипторБенчмарка);
	КонтекстСобытия.Вставить("Параметры", Параметры);
	КонтекстСобытия.Вставить("Замеры", Результат.Замеры);
	КонтекстСобытия.Вставить("Статистика", Результат.Статистика);

	ВызватьОбработчикСобытия(СобытияБенчмарков.ПослеКаждого, КонтекстСобытия);
	
КонецПроцедуры

Функция РассчитатьКоличествоВызововЗаИтерацию(Делегат)

	КоличествоВызововЗаИтерацию = _Конфигурация.КоличествоВызововЗаИтерацию();
	Если Не КоличествоВызововЗаИтерацию = 0 Тогда
		Возврат КоличествоВызововЗаИтерацию;
	КонецЕсли;
	
	МинимальноеКоличествоВызовов = _Конфигурация.МинимальноеКоличествоВызововЗаИтерацию();
	ЦелевоеВремяИтерации = ЕдиницыИзмеренийБенчмарков.Конвертировать(
		_Конфигурация.МинимальноеВремяИтерации(), 
		ЕдиницыИзмеренийБенчмарков.Миллисекунда,
		ЕдиницыИзмеренийБенчмарков.Наносекунда
	);
	
	КоличествоВызовов = МинимальноеКоличествоВызовов;	
	НомерИтерации = 0;
	ВремяПредыдущейОперации = 0;
	ДопустимаяПогрешность = 0.05;
	МаксимальноеКоличествоПроверокНаПогрешность = 5;

	Пока Истина Цикл

		НомерИтерации = НомерИтерации + 1;
		РезультатИтерации = ВыполнитьИтерацию(Делегат, ЭтапыБенчмарка.Оценка, НомерИтерации, КоличествоВызовов);
		
		ВремяИтерации = РезультатИтерации.Наносекунд;
		ВремяОперации = РезультатИтерации.НаносекундЗаОперацию;

		Погрешность = (ВремяПредыдущейОперации - ВремяОперации) / (ВремяОперации + ВремяПредыдущейОперации);
		Погрешность = ?(Погрешность < 0, -Погрешность, Погрешность);

		Если ВремяИтерации < ЦелевоеВремяИтерации Тогда
			КоличествоВызовов = КоличествоВызовов * 2;
			ВремяПредыдущейОперации = ВремяОперации;
			Продолжить;
		КонецЕсли;

		Если Погрешность > ДопустимаяПогрешность И НомерИтерации < МаксимальноеКоличествоПроверокНаПогрешность Тогда
			ВремяПредыдущейОперации = ВремяОперации;
			Продолжить;
		КонецЕсли;

		Прервать;

	КонецЦикла;

	Возврат КоличествоВызовов;

КонецФункции

Процедура ЗапуститьЭтапПрогрева(Делегат, КоличествоВызововЗаИтерацию)

	КоличествоПрогревочныхИтераций = _Конфигурация.КоличествоПрогревочныхИтераций();

	Если КоличествоПрогревочныхИтераций = 0 Тогда
		Возврат;
	КонецЕсли;

	Для НомерИтерации = 1 По КоличествоПрогревочныхИтераций Цикл

		ВыполнитьИтерацию(Делегат, ЭтапыБенчмарка.Прогрев, НомерИтерации, КоличествоВызововЗаИтерацию);	

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапуститьЭтапИзмерения(Делегат, КоличествоВызововЗаИтерацию, Замеры)

	Для НомерИтерации = 1 По _Конфигурация.КоличествоИтераций() Цикл

		РезультатИтерации = ВыполнитьИтерацию(Делегат, ЭтапыБенчмарка.Измерение, НомерИтерации, КоличествоВызововЗаИтерацию);
		ЗаполнитьЗначенияСвойств(Замеры.Добавить(), РезультатИтерации);

	КонецЦикла;

КонецПроцедуры

Процедура ЗапуститьМониторингПамяти(Делегат, КоличествоВызововЗаИтерацию, Замеры)

	Для НомерИтерации = 1 По _Конфигурация.КоличествоИтераций() Цикл

		РезультатИтерации = ВыполнитьИтерацию(Делегат, ЭтапыБенчмарка.Память, НомерИтерации, КоличествоВызововЗаИтерацию);
		ЗаполнитьЗначенияСвойств(Замеры.Добавить(), РезультатИтерации);

	КонецЦикла;

КонецПроцедуры

Процедура ПрогретьИнструментыЗамера()

	ТребуетсяМониторингПамяти = _Конфигурация.ТребуетсяМониторингПамяти();
	КоличествоИтераций = 5;

	Для НомерИтерации = 1 По КоличествоИтераций Цикл

		_Хронометр.Старт();
		_Хронометр.Стоп();

		Если ТребуетсяМониторингПамяти Тогда
			_СтатистикаСборщикаМусора.Начать();
			_СтатистикаСборщикаМусора.Завершить();
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Функция ВыполнитьИтерацию(Делегат, Этап, НомерИтерации, КоличествоВызовов)

	Наносекунд = 0;
	ВыделяемаяПамять = 0;
	
	Если Этап = ЭтапыБенчмарка.Память Тогда	
		ВыделяемаяПамять = ЗамеритьПамять(Делегат, КоличествоВызовов);
	Иначе
		Наносекунд = ЗамеритьВремя(Делегат, КоличествоВызовов);
	КонецЕсли;

	РезультатИтерации = НовыйРезультатИтерации();
	РезультатИтерации.Этап = Этап;
	РезультатИтерации.НомерИтерации = НомерИтерации;
	РезультатИтерации.КоличествоОпераций = КоличествоВызовов;
	РезультатИтерации.Наносекунд = Наносекунд;
	РезультатИтерации.НаносекундЗаОперацию = Наносекунд / КоличествоВызовов;
	РезультатИтерации.ВыделяемаяПамять = ВыделяемаяПамять;
	РезультатИтерации.ВыделяемаяПамятьЗаОперацию = ВыделяемаяПамять / КоличествоВызовов;

	Если НомерИтерации = 1 Тогда
		ВывестиСтроку(" ");
	КонецЕсли;

	ВывестиСтроку(ПредставлениеРезультатаИтерации(РезультатИтерации), "Серый");

	Возврат РезультатИтерации;

КонецФункции

Функция ЗамеритьВремя(Делегат, КоличествоВызовов)

	Рефлектор = Новый Рефлектор();
	Объект = Делегат.Объект();
	ИмяМетода = Делегат.ИмяМетода();
	Параметры = Делегат.Параметры();
	ОсталосьВызовов = КоличествоВызовов;

	_Лог.Отладка("Начало замера времени <%1>", ИмяМетода);
	_Хронометр.Старт(); // Хронометр должен быть "прогрет"

	Пока ОсталосьВызовов > 0 Цикл
		Рефлектор.ВызватьМетод(Объект, ИмяМетода, Параметры);
		ОсталосьВызовов = ОсталосьВызовов - 1;
	КонецЦикла;

	_Хронометр.Стоп();
	_Лог.Отладка("Окончание замера времени <%1>", ИмяМетода);

	Возврат _Хронометр.Наносекунд;

КонецФункции

Функция ЗамеритьПамять(Делегат, КоличествоВызовов)

	Рефлектор = Новый Рефлектор();
	Объект = Делегат.Объект();
	ИмяМетода = Делегат.ИмяМетода();
	Параметры = Делегат.Параметры();
	ОсталосьВызовов = КоличествоВызовов;
	
	_Лог.Отладка("Начало замера памяти <%1>", ИмяМетода);
	_СтатистикаСборщикаМусора.Начать(); // Объект должен быть "прогрет"

	Пока ОсталосьВызовов > 0 Цикл
		Рефлектор.ВызватьМетод(Объект, ИмяМетода, Параметры);
		ОсталосьВызовов = ОсталосьВызовов - 1;
	КонецЦикла;

	_СтатистикаСборщикаМусора.Завершить();
	_Лог.Отладка("Завершение замера памяти <%1>", ИмяМетода);

	Возврат _СтатистикаСборщикаМусора.ВыделеноБайт;

КонецФункции

Процедура ВызватьОбработчикСобытия(ИмяСобытия, Контекст = Неопределено) Экспорт
	
	МассивДелегатов = _Конфигурация.ДелегатыОбработчиковСобытия(ИмяСобытия, _ОбъектБенчмарков, Контекст);	

	Для Каждого Делегат Из МассивДелегатов Цикл

		_Лог.Отладка("Начало вызова обработчика <%1> события <%2>", Делегат.ИмяМетода(), ИмяСобытия);

		Делегат.Исполнить();

		_Лог.Отладка("Завершение вызова обработчика <%1> события <%2>", Делегат.ИмяМетода(), ИмяСобытия);

	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыМетодаБенчмарка(ДескрипторБенчмарка, Параметры)

	ИменаПараметров = ДескрипторБенчмарка.ИменаПараметров();

	Если ИменаПараметров.Количество() = 0 Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ПараметрыМетода = Новый Массив(ИменаПараметров.Количество());
	
	Для Каждого Параметр Из Параметры Цикл
		Если Параметр.ЭтоПараметрМетода Тогда
			ПараметрыМетода[ИменаПараметров.Найти(Параметр.Имя)] = Параметр.Значение;
		КонецЕсли;	
	КонецЦикла;

	Возврат ПараметрыМетода;

КонецФункции

// Устанавливает значения публичным полям объекта
//
// Параметры:
//   Параметры - Массив из ПараметрБенчмарка
Процедура УстановитьПараметрыОбъекта(Параметры)

	ШаблонОшибки = "Не удалось задать значение поля <%1> для объекта <%2>";

	Для Каждого Параметр Из Параметры Цикл		
		Если Не Параметр.ЭтоПараметрМетода Тогда
			Попытка
				_ОбъектБенчмарков[Параметр.Имя] = Параметр.Значение;
			Исключение
				ВызватьИсключение СтрШаблон(ШаблонОшибки, Параметр.Имя, ТипЗнч(_ОбъектБенчмарков));
			КонецПопытки;
		КонецЕсли;		
	КонецЦикла;

КонецПроцедуры

Функция ПрочитатьИсточникиПараметровПолей()

	Результат = Новый Массив();

	Для Каждого ИсточникПараметров Из _Конфигурация.ИсточникиПараметров() Цикл
		Значения = ПрочитатьИсточникПараметров(ИсточникПараметров.Источник);
		Для Каждого Значение Из Значения Цикл
			Результат.Добавить(Новый ПараметрБенчмарка(ИсточникПараметров.ИмяПоля, Значение, Ложь));
		КонецЦикла;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция ПрочитатьИсточникиПараметровМетодаБенчмарка(ДескрипторБенчмарка)

	Результат = Новый Массив();

	Для Каждого ИсточникПараметров Из ДескрипторБенчмарка.ИсточникиПараметров() Цикл
		НаборыПараметров = ПрочитатьИсточникПараметров(ИсточникПараметров);
		Для Каждого Параметры Из НаборыПараметров Цикл
			Результат.Добавить(ПреобразоватьВПараметрыМетодаБенчмарка(ДескрипторБенчмарка, Параметры));
		КонецЦикла;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция ПреобразоватьВПараметрыМетодаБенчмарка(ДескрипторБенчмарка, Параметры)

	ИменаПараметров = ДескрипторБенчмарка.ИменаПараметров();
	КоличествоПараметровМетода = ИменаПараметров.Количество();

	Если КоличествоПараметровМетода = 0 Тогда
		Возврат Новый Массив();
	КонецЕсли;

	Если КоличествоПараметровМетода = 1 Тогда
		Параметр = Новый ПараметрБенчмарка(ИменаПараметров[0], Параметры, Истина);
		Результат = Новый Массив();
		Результат.Добавить(Параметр);
		Возврат Результат;
	КонецЕсли;

	ТипКоллекции = ТипЗнч(Параметры);

	Если ТипКоллекции = Тип("Массив") Тогда
		Возврат ПреобразоватьМассивВПараметрыМетодаБенчмарка(ДескрипторБенчмарка, Параметры);
	ИначеЕсли ТипКоллекции = Тип("Структура") Или ТипКоллекции = Тип("Соответствие") Тогда
		Возврат ПреобразоватьСтруктуруВПараметрыМетодаБенчмарка(ДескрипторБенчмарка, Параметры);
	ИначеЕсли ТипКоллекции = Тип("СтрокаТаблицыЗначений") Тогда
		Возврат ПреобразоватьСтрокуТаблицыЗначенийВПараметрыМетодаБенчмарка(ДескрипторБенчмарка, Параметры);
	Иначе
		ВызватьИсключение СтрШаблон(
			"Не поддерживается тип <%1> для передачи параметров в метод бенчмарка <%2>",
			ТипКоллекции,
			ДескрипторБенчмарка.Метод()
		);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПреобразоватьМассивВПараметрыМетодаБенчмарка(ДескрипторБенчмарка, Параметры)
	
	Результат = Новый Массив();
	ИменаПараметров = ДескрипторБенчмарка.ИменаПараметров();
	КоличествоПараметровМетода = ИменаПараметров.Количество();

	Если Параметры.Количество() <> КоличествоПараметровМетода Тогда		
		ВызватьИсключение СтрШаблон(
			"Количество переданных параметров должно совпадать количеству параметров метода бенчмарка <%1>",
			ДескрипторБенчмарка.Метод()
		);
	КонецЕсли;

	Для ИндексПараметра = 0 По Параметры.ВГраница() Цикл
		Параметр = Новый ПараметрБенчмарка(ИменаПараметров[ИндексПараметра], Параметры[ИндексПараметра], Истина);
		Результат.Добавить(Параметр);
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПреобразоватьСтруктуруВПараметрыМетодаБенчмарка(ДескрипторБенчмарка, Параметры)
		
	Результат = Новый Массив();
	ТипКоллекции = ТипЗнч(Параметры);

	Для Каждого ИмяПараметра Из ДескрипторБенчмарка.ИменаПараметров() Цикл

		Если ТипКоллекции = Тип("Структура") Тогда
			ОтсутствуетПараметр = Не Параметры.Свойство(ИмяПараметра);
		Иначе
			ОтсутствуетПараметр = Параметры[ИмяПараметра] = Неопределено;
		КонецЕсли;

		Если ОтсутствуетПараметр Тогда
			ВызватьИсключение СтрШаблон(
				"Отсутствует параметр <%1> метода бенчмарка <%2> в переданной коллекции <%3>",
				ИмяПараметра,
				ДескрипторБенчмарка.Метод(),
				ТипКоллекции
			);
		КонецЕсли;

		Параметр = Новый ПараметрБенчмарка(ИмяПараметра, Параметры[ИмяПараметра], Истина);
		Результат.Добавить(Параметр);

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПреобразоватьСтрокуТаблицыЗначенийВПараметрыМетодаБенчмарка(ДескрипторБенчмарка, Параметры)
		
	Результат = Новый Массив();
	Колонки = Параметры.Владелец().Колонки;

	Для Каждого ИмяПараметра Из ДескрипторБенчмарка.ИменаПараметров() Цикл

		Если Колонки.Найти(ИмяПараметра) = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				"Отсутствует параметр <%1> метода бенчмарка <%2> в переданной таблице",
				ИмяПараметра,
				ДескрипторБенчмарка.Метод()
			);
		КонецЕсли;

		Параметр = Новый ПараметрБенчмарка(ИмяПараметра, Параметры[ИмяПараметра], Истина);
		Результат.Добавить(Параметр);

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПрочитатьИсточникПараметров(Источник)
	
	Перем Делегат;

	Тип = ТипЗнч(Источник);
	Если ТипЗнч(Источник) = Тип("Делегат") Тогда
		Делегат = Источник;
	ИначеЕсли ТипЗнч(Источник) = Тип("Строка") Тогда
		Делегат = Новый Делегат(_ОбъектБенчмарков, Источник);
	Иначе
		ВызватьИсключение СтрШаблон("Не поддерживается тип <%1> в качестве источник параметров", Тип);
	КонецЕсли;

	ПолученноеЗначение = Делегат.Исполнить();
	
	Тип = ТипЗнч(ПолученноеЗначение);
	Если Не (Тип = Тип("Массив") Или Тип = Тип("ТаблицаЗначений")) Тогда
		Результат = Новый Массив();
		Результат.Добавить(ПолученноеЗначение);
		Возврат Результат;
	Иначе
		Возврат ПолученноеЗначение;
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеРезультатаИтерации(РезультатИтерации)

	ДлинаЭтапа = Макс(
		СтрДлина(ЭтапыБенчмарка.Оценка),
		СтрДлина(ЭтапыБенчмарка.Прогрев),
		СтрДлина(ЭтапыБенчмарка.Измерение),
		СтрДлина(ЭтапыБенчмарка.Память)
	);
	
	ДлинаЭтапа = ДлинаЭтапа + 1;

	Представление = СтрШаблон("%1 %2: %3 op, ",
		Лев(РезультатИтерации.Этап + "              ", ДлинаЭтапа),
		Лев("" + РезультатИтерации.НомерИтерации + " ", 2),
		Формат(РезультатИтерации.КоличествоОпераций, "ЧГ=")
	);

	Если РезультатИтерации.Этап = ЭтапыБенчмарка.Память Тогда

		Возврат Представление + СтрШаблон(
			"%1, %2/op",
			ПредставленияПоказателейБенчмарков.ПредставлениеЧитаемое(
				РезультатИтерации.ВыделяемаяПамять, 
				ЕдиницыИзмеренийБенчмарков.Байт
			),		
			ПредставленияПоказателейБенчмарков.ПредставлениеЧитаемое(
				РезультатИтерации.ВыделяемаяПамятьЗаОперацию, 
				ЕдиницыИзмеренийБенчмарков.Байт
			)
		);

	Иначе

		Возврат Представление + СтрШаблон(
			"%1, %2/op",
			ПредставленияПоказателейБенчмарков.ПредставлениеЧитаемое(
				РезультатИтерации.Наносекунд,
				ЕдиницыИзмеренийБенчмарков.Наносекунда
			),		
			ПредставленияПоказателейБенчмарков.ПредставлениеЧитаемое(
				РезультатИтерации.НаносекундЗаОперацию,
				ЕдиницыИзмеренийБенчмарков.Наносекунда
			)
		);

	КонецЕсли;

КонецФункции

#КонецОбласти

Процедура ЭкспортироватьРезультаты(Результаты)
	
	КаталогАртефактов = _Конфигурация.КаталогАртефактов();
	МаскаФайлов = СтрШаблон("%1-*", Результаты.ИмяКласса);
	Экспортеры = _Конфигурация.Экспортеры();

	Если Не ЗначениеЗаполнено(КаталогАртефактов) Или Экспортеры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФС.ОбеспечитьКаталог(КаталогАртефактов);
	ФС.УдалитьФайлы(КаталогАртефактов, МаскаФайлов);

	Для Каждого Экспортер Из _Конфигурация.Экспортеры() Цикл
		Экспортер.Записать(Результаты);
	КонецЦикла;

	Если Не Бенчмаркинг.ЭтоВоркер() Тогда
		Артефакты = НайтиФайлы(КаталогАртефактов, МаскаФайлов);
		Если Артефакты.Количество() Тогда
			ВывестиСтроку(" ");
			ВывестиСтроку("// Артефакты", "Малиновый");
		КонецЕсли;

		Для Каждого Артефакт Из Артефакты Цикл
			ВывестиСтроку(Артефакт.ПолноеИмя, "ТемноЖелтый");
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиРезультатыБенчмарков(Результат)

	// Среда окружения
	ТекстСреды = Результат.СредаОкружения.ВСтроку();
	ТекстСреды = СтрЗаменить(ТекстСреды, Символы.ПС, " \" + Символы.ПС);

	ВывестиСтроку(" ");
	ВывестиСтроку("// Сводка", "Малиновый");
	ВывестиСтроку(ТекстСреды, "ТемноЖелтый");

	// Отчет в Markdown
	ВывестиСтроку(" ");
	ВывестиСтроку(Результат.Отчет.КакMarkdown(), "Бирюза");

	// Легенда
	ВывестиСтроку(" ");
	ВывестиСтроку("// Легенда", "Малиновый");
	ВывестиСтроку(Результат.Отчет.Легенда(), "Синий");

КонецПроцедуры

Процедура ВывестиЗаголовок(Версия = "")
	
	Если Не ЗначениеЗаполнено(Версия) Тогда
		Версия = Новый СистемнаяИнформация().Версия;
	КонецЕсли;
	
	ВывестиСтроку(" ");
	ВывестиСтроку(СтрШаблон("*** Запуск бенчмарков в исполняющей среде OneScript <%1> ***", Версия), "Синий");

КонецПроцедуры

Процедура ВывестиКонфигурацию()

	ВывестиСтроку(" ");
	ВывестиСтроку("// Конфигурация", "Малиновый");
	ВывестиСтроку(_Конфигурация.ВСтроку(), "ТемноЖелтый");

КонецПроцедуры

Процедура ВывестиСтатистику(Статистика)

	ВывестиСтроку(" ");
	ВывестиСтроку("// Статистика", "Малиновый");
	ВывестиСтроку(Статистика.ВСтроку(), "Бирюза");

КонецПроцедуры

Процедура ВывестиЗаголовокБенчмарка(ДескрипторБенчмарка)
	
	Текст = СтрШаблон("// Бенчмарк: %1.%2", ДескрипторБенчмарка.ТипОбъекта(), ДескрипторБенчмарка.Метод());
	
	ВывестиСтроку(" ");
	ВывестиСтроку(Текст, "Малиновый");

КонецПроцедуры

Процедура ВывестиПараметры(Параметры)
		
	Цвет = "ТемноЖелтый";
	
	Если Параметры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Вывести("Параметры: ", Цвет);

	ЭтоПервыйПараметр = Истина;
	Для Каждого Параметр Из Параметры Цикл	

		Если Не ЭтоПервыйПараметр Тогда
			Вывести(", ", Цвет);
		КонецЕсли;
		
		Вывести(СтрШаблон("%1 = %2", Параметр.Имя, Строка(Параметр.Значение)), Цвет);
		
		ЭтоПервыйПараметр = Ложь;

	КонецЦикла;
	
	ВывестиСтроку("");	
	
КонецПроцедуры

Процедура ВывестиСтроку(Текст, Цвет = Неопределено)
	КонсольныйВыводБенчмаркера.ВывестиСтроку(Текст, Цвет);
КонецПроцедуры

Процедура Вывести(Текст, Цвет = Неопределено)
	КонсольныйВыводБенчмаркера.Вывести(Текст, Цвет);
КонецПроцедуры

Функция ОбернутьВКавычки(Строка)
	Кавычка = ?(ИсполняющаяСредаБенчмарков.ЭтоWindows(), """", "'");
	Возврат СтрШаблон("%2%1%2", Строка, Кавычка);
КонецФункции

Функция НовыйРезультатИтерации()

	Результат = Новый Структура();
	Результат.Вставить("Этап", "");
	Результат.Вставить("НомерИтерации", 0);
	Результат.Вставить("КоличествоОпераций", 0);
	Результат.Вставить("Наносекунд", 0);
	Результат.Вставить("НаносекундЗаОперацию",0);
	Результат.Вставить("ВыделяемаяПамять", 0);
	Результат.Вставить("ВыделяемаяПамятьЗаОперацию", 0);

	Возврат Результат;

КонецФункции

Функция НовыйРезультат(МенеджерРасшифровкиРезультатов) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("ИмяКласса", Строка(ТипЗнч(_ОбъектБенчмарков)));
	Результат.Вставить("ДескрипторыБенчмарков", _ДескрипторыБенчмарков);
	Результат.Вставить("Конфигурация", _Конфигурация);
	Результат.Вставить("Расшифровка", МенеджерРасшифровкиРезультатов.ВТаблицу());
	Результат.Вставить("Отчет", Неопределено);
	Результат.Вставить("СредаОкружения", Новый СредаОкруженияБенчмарков());
	
	Возврат Результат;

КонецФункции

Процедура ДополнитьМассив(Приемник, Источник)

	Для Каждого Значение Из Источник Цикл
		Приемник.Добавить(Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти