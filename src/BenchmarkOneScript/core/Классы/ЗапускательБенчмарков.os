#Использовать asserts
#Использовать coloratos

Перем _ОберткаБенчмаркКласса; // ОберткаБенчмаркКласса
Перем _Конфигурация; // КонфигурацияБенчмарков
Перем _СтатистикаСборщикаМусора; // СтатистикаСборщикаМусора
Перем _Хронометр; // Хронометр

#Область ПрограммныйИнтерфейс

// Запускает бенчмарки
//
// Параметры:
//   Источник - Тип, ОберткаБенчмаркКласса, Произвольный - Тип, объект или обертка бенчмарк-класса
//   Конфигурация - КонфигурацияБенчмарков
// 
// Возвращаемое значение:
//   Структура:
//     * Бенчмарки - Массив из Бенчмарк
//     * Конфигурация - КонфигурацияБенчмарков
//     * РезультатыЗапусков - см. НоваяТаблицаРезультатов
//     * Отчет - ОтчетБенчмарков
Функция Запустить(Источник, Конфигурация = Неопределено) Экспорт

	Если ТипЗнч(Источник) = Тип("ОберткаБенчмаркКласса") Тогда
		_ОберткаБенчмаркКласса = Источник;
	Иначе
		_ОберткаБенчмаркКласса = Новый ОберткаБенчмаркКласса(Источник);
	КонецЕсли;
	
	Если Не Конфигурация = Неопределено Тогда
		_Конфигурация = Конфигурация;
	Иначе
		_Конфигурация = _ОберткаБенчмаркКласса.Конфигурация();
	КонецЕсли;

	_Хронометр = Новый Хронометр();

	Если _Конфигурация.ИспользуетсяМониторингПамяти() Тогда
		_СтатистикаСборщикаМусора = Новый СтатистикаСборщикаМусора();
	КонецЕсли;

	ПрогретьИнструментыЗамера();

	Бенчмарки = _ОберткаБенчмаркКласса.Бенчмарки();
	ПроверитьБенчмарки(Бенчмарки);

	РезультатыЗапусков = ЗапуститьВсеБенчмарки(Бенчмарки);
	ЗаполнитьЭталоны(РезультатыЗапусков);

	ПостроительОтчета = Новый ПостроительОтчетаБенчмарков(Бенчмарки, _Конфигурация, РезультатыЗапусков);
	Отчет = ПостроительОтчета.Сформировать();

	Результат = Новый Структура();
	Результат.Вставить("Бенчмарки", Бенчмарки);
	Результат.Вставить("Конфигурация", _Конфигурация);
	Результат.Вставить("РезультатыЗапусков", РезультатыЗапусков);
	Результат.Вставить("Отчет", Отчет);

	ВывестиРезультатыБенчмарков(Результат);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗапуститьВсеБенчмарки(Бенчмарки)

	ВыполнитьОбработчикИнициализации();

	РезультатыЗапусков = НоваяТаблицаРезультатов();
	Для Каждого Бенчмарк Из Бенчмарки Цикл

		КомбинацииПараметров = КомбинаторПараметровБенчмарка.Комбинировать(Бенчмарк, _Конфигурация);
		
		Если КомбинацииПараметров.Количество() = 0 Тогда
			КомбинацииПараметров.Добавить(Новый Массив());
		КонецЕсли;

		Для Каждого Параметры Из КомбинацииПараметров Цикл

			Замеры = ЗапуститьБенчмарк(Бенчмарк, Параметры);

			РезультатЗапуска = РезультатыЗапусков.Добавить();
			РезультатЗапуска.Бенчмарк = Бенчмарк;
			РезультатЗапуска.Параметры = Параметры;
			РезультатЗапуска.Замеры = Замеры;
			РезультатЗапуска.Статистика = СтатистикаБенчмарков.СтатистикаЗамеров(Замеры);

		КонецЦикла;

	КонецЦикла;

	ВыполнитьОбработчикЗавершения();

	Возврат РезультатыЗапусков;

КонецФункции

Функция ЗапуститьБенчмарк(Бенчмарк, Параметры)

	ВывестиЗаголовокБенчмарка(Бенчмарк, Параметры);

	ПараметрыМетода = ПараметрыМетодаБенчмарка(Бенчмарк, Параметры);
	_ОберткаБенчмаркКласса.УстановитьПараметры(Параметры);
	
	ВыполнитьОбработчикПередЗапускомБенчмарка(Бенчмарк, ПараметрыМетода);

	Делегат = Бенчмарк.Делегат(ПараметрыМетода);
	
	Если _Конфигурация.Стратегия() = СтратегииЗапускаБенчмарка.ХолодныйЗапуск Тогда

		КоличествоВызововЗаИтерацию = 1;

	Иначе

		КоличествоВызововЗаИтерацию = РассчитатьКоличествоВызововЗаИтерацию(Делегат);
		ЗапуститьЭтапПрогрева(Делегат, КоличествоВызововЗаИтерацию);

	КонецЕсли;

	Замеры = НоваяТаблицаЗамеров();

	ЗапуститьЭтапИзмерения(Делегат, КоличествоВызововЗаИтерацию, Замеры);

	Если _Конфигурация.ИспользуетсяМониторингПамяти() Тогда
		ВыполнитьМониторингПамяти(Делегат, КоличествоВызововЗаИтерацию, Замеры);
	КонецЕсли;

	ВыполнитьОбработчикПослеЗапускаБенчмарка(Бенчмарк);

	Возврат Замеры;

КонецФункции

Функция РассчитатьКоличествоВызововЗаИтерацию(Делегат)

	КоличествоВызововЗаИтерацию = _Конфигурация.КоличествоВызововЗаИтерацию();
	Если Не КоличествоВызововЗаИтерацию = 0 Тогда
		Возврат КоличествоВызововЗаИтерацию;
	КонецЕсли;
	
	МинимальноеКоличествоВызовов = _Конфигурация.МинимальноеКоличествоВызововЗаИтерацию();
	ЦелевоеВремяИтерации = ЕдиницыИзмеренийБенчмарков.Конвертировать(
		_Конфигурация.МинимальноеВремяИтерации(), 
		ЕдиницыИзмеренийБенчмарков.Миллисекунда,
		ЕдиницыИзмеренийБенчмарков.Наносекунда
	);
	
	КоличествоВызовов = МинимальноеКоличествоВызовов;	
	НомерИтерации = 0;
	Пока Истина Цикл

		НомерИтерации = НомерИтерации + 1;
		РезультатИтерации = ВыполнитьИтерацию(Делегат, ЭтапыБенчмарка.Оценка, НомерИтерации, КоличествоВызовов);
		
		ВремяИтерации = РезультатИтерации.Наносекунд;

		Если ВремяИтерации < ЦелевоеВремяИтерации Тогда
			КоличествоВызовов = КоличествоВызовов * 2;
			Продолжить;
		КонецЕсли;

		Прервать;

	КонецЦикла;

	Консоль.Вывести(Символы.ПС);

	Возврат КоличествоВызовов;

КонецФункции

Процедура ЗапуститьЭтапПрогрева(Делегат, КоличествоВызововЗаИтерацию)

	КоличествоИтерацийПрогрева = _Конфигурация.КоличествоИтерацийПрогрева();

	Если КоличествоИтерацийПрогрева = 0 Тогда
		Возврат;
	КонецЕсли;

	Для НомерИтерации = 1 По КоличествоИтерацийПрогрева Цикл

		ВыполнитьИтерацию(Делегат, ЭтапыБенчмарка.Прогрев, НомерИтерации, КоличествоВызововЗаИтерацию);	

	КонецЦикла;
	
	Консоль.Вывести(Символы.ПС);
	
КонецПроцедуры

Процедура ЗапуститьЭтапИзмерения(Делегат, КоличествоВызововЗаИтерацию, Замеры)

	Для НомерИтерации = 1 По _Конфигурация.КоличествоИтераций() Цикл

		РезультатИтерации = ВыполнитьИтерацию(Делегат, ЭтапыБенчмарка.Результат, НомерИтерации, КоличествоВызововЗаИтерацию);
		ЗаполнитьЗначенияСвойств(Замеры.Добавить(), РезультатИтерации);

	КонецЦикла;
	
	Консоль.Вывести(Символы.ПС);

КонецПроцедуры

Процедура ВыполнитьМониторингПамяти(Делегат, КоличествоВызововЗаИтерацию, Замеры)

	Для НомерИтерации = 1 По _Конфигурация.КоличествоИтераций() Цикл

		РезультатИтерации = ВыполнитьИтерацию(Делегат, ЭтапыБенчмарка.Память, НомерИтерации, КоличествоВызововЗаИтерацию);
		ЗаполнитьЗначенияСвойств(Замеры.Добавить(), РезультатИтерации);

	КонецЦикла;
	
	Консоль.Вывести(Символы.ПС);

КонецПроцедуры

Процедура ПрогретьИнструментыЗамера()

	ИспользуетсяМониторингПамяти = _Конфигурация.ИспользуетсяМониторингПамяти();
	КоличествоИтераций = 5;

	Для НомерИтерации = 1 По КоличествоИтераций Цикл

		_Хронометр.Старт();
		_Хронометр.Стоп();

		Если ИспользуетсяМониторингПамяти Тогда
			_СтатистикаСборщикаМусора.Начать();
			_СтатистикаСборщикаМусора.Завершить();
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Функция ВыполнитьИтерацию(Делегат, Этап, ИндексИтерации, КоличествоВызовов)

	Наносекунд = 0;
	ВыделяемаяПамять = 0;
	
	Если Этап = ЭтапыБенчмарка.Память Тогда	
		ВыделяемаяПамять = ЗамеритьПамять(Делегат, КоличествоВызовов);
	Иначе
		Наносекунд = ЗамеритьВремя(Делегат, КоличествоВызовов);
	КонецЕсли;

	РезультатИтерации = Новый Структура();
	РезультатИтерации.Вставить("Этап", Этап);
	РезультатИтерации.Вставить("ИндексИтерации", ИндексИтерации);
	РезультатИтерации.Вставить("КоличествоОпераций", КоличествоВызовов);
	РезультатИтерации.Вставить("Наносекунд", Наносекунд);
	РезультатИтерации.Вставить("НаносекундЗаОперацию", Наносекунд / КоличествоВызовов);
	РезультатИтерации.Вставить("ВыделяемаяПамять", ВыделяемаяПамять);
	РезультатИтерации.Вставить("ВыделяемаяПамятьЗаОперацию", ВыделяемаяПамять / КоличествоВызовов);

	ЦветнойВывод.ВывестиСтроку(ПредставлениеРезультатаИтерации(РезультатИтерации), "Серый");

	Возврат РезультатИтерации;

КонецФункции

Функция ЗамеритьВремя(Делегат, КоличествоВызовов)

	Рефлектор = Новый Рефлектор();
	Объект = Делегат.Объект();
	ИмяМетода = Делегат.ИмяМетода();
	Параметры = Делегат.Параметры();
	ОсталосьВызовов = КоличествоВызовов;
	
	_Хронометр.Старт(); // Хронометр должен быть "прогрет"

	Пока ОсталосьВызовов > 0 Цикл
		Рефлектор.ВызватьМетод(Объект, ИмяМетода, Параметры);
		ОсталосьВызовов = ОсталосьВызовов - 1;
	КонецЦикла;

	_Хронометр.Стоп();

	Возврат _Хронометр.Наносекунд;

КонецФункции

Функция ЗамеритьПамять(Делегат, КоличествоВызовов)

	Рефлектор = Новый Рефлектор();
	Объект = Делегат.Объект();
	ИмяМетода = Делегат.ИмяМетода();
	Параметры = Делегат.Параметры();
	ОсталосьВызовов = КоличествоВызовов;
	
	_СтатистикаСборщикаМусора.Начать(); // Объект должен быть "прогрет"

	Пока ОсталосьВызовов > 0 Цикл
		Рефлектор.ВызватьМетод(Объект, ИмяМетода, Параметры);
		ОсталосьВызовов = ОсталосьВызовов - 1;
	КонецЦикла;

	_СтатистикаСборщикаМусора.Завершить();

	Возврат _СтатистикаСборщикаМусора.ВыделеноБайт;

КонецФункции

Функция ПараметрыМетодаБенчмарка(Бенчмарк, Параметры)

	ИменаПараметров = Бенчмарк.ИменаПараметров();

	Если ИменаПараметров.Количество() = 0 Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ПараметрыМетода = Новый Массив(ИменаПараметров.Количество());
	
	Для Каждого Параметр Из Параметры Цикл

		Если Параметр.ЭтоПараметрМетода Тогда
			ПараметрыМетода[ИменаПараметров.Найти(Параметр.Имя)] = Параметр.Значение;
		КонецЕсли;
		
	КонецЦикла;

	Возврат ПараметрыМетода;

КонецФункции

Процедура ЗаполнитьЭталоны(РезультатыЗапусков)

	Для Каждого Строка Из РезультатыЗапусков Цикл

		Если Не Строка.Бенчмарк.ЭтоЭталон() Тогда
			Строка.Эталон = НайтиЭталон(РезультатыЗапусков, Строка);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Функция НайтиЭталон(РезультатыЗапусков, СтрокаПоиска)

	Для Каждого СтрокаЭталон Из РезультатыЗапусков Цикл

		Если СтрокаЭталон = СтрокаПоиска Тогда
			Продолжить;
		КонецЕсли;

		Если Не СтрокаЭталон.Бенчмарк.ЭтоЭталон() Тогда
			Продолжить;
		КонецЕсли;

		Если Не СтрокаПоиска.Бенчмарк.Категория() = СтрокаЭталон.Бенчмарк.Категория() Тогда
			Продолжить;
		КонецЕсли;

		ПараметрыСовпадают = Истина;
		Для Каждого Параметр Из СтрокаПоиска.Параметры Цикл

			Если Параметр.ЭтоПараметрМетода Тогда
				Продолжить;
			КонецЕсли;

			ПараметрНайден = Ложь;
			Для Каждого ПараметрЭталона Из СтрокаЭталон.Параметры Цикл
				
				Если ПараметрЭталона.ЭтоПараметрМетода Тогда
					Продолжить;
				КонецЕсли;

				Если Параметр.Имя = ПараметрЭталона.Имя
					И  Параметр.Значение = ПараметрЭталона.Значение Тогда
					ПараметрНайден = Истина;
					Прервать;
				КонецЕсли;
	
			КонецЦикла;

			Если Не ПараметрНайден Тогда
				ПараметрыСовпадают = Ложь;
				Прервать;
			КонецЕсли;

		КонецЦикла;

		Если ПараметрыСовпадают Тогда
			Возврат СтрокаЭталон;
		КонецЕсли;

	КонецЦикла;

КонецФункции

Процедура ПроверитьБенчмарки(Бенчмарки)

	БылЭталонПоКатегории = Новый Соответствие();

	Для Каждого Бенчмарк Из Бенчмарки Цикл

		Если Бенчмарк.ЭтоЭталон() Тогда

			Категория = Бенчмарк.Категория();

			Ожидаем
				.Что(БылЭталонПоКатегории[Категория], "Может быть только один эталонный бенчмарк в пределах категории")
				.ЭтоНеопределено();

			БылЭталонПоКатегории[Категория] = Истина;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьОбработчикИнициализации()

	Делегат = _Конфигурация.ОбработчикИнициализации();
	Если Делегат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыДелегата = Новый Массив();
	ПараметрыДелегата.Добавить(_Конфигурация);

	Делегат.Исполнить(ПараметрыДелегата);
	
КонецПроцедуры

Процедура ВыполнитьОбработчикЗавершения()

	Делегат = _Конфигурация.ОбработчикЗавершения();
	Если Делегат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Делегат.Исполнить();
	
КонецПроцедуры

Процедура ВыполнитьОбработчикПередЗапускомБенчмарка(Бенчмарк, ПараметрыБенчмарка)

	Делегат = _Конфигурация.ОбработчикПередЗапуском();
	Если Делегат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыДелегата = Новый Массив();
	ПараметрыДелегата.Добавить(Бенчмарк);
	ПараметрыДелегата.Добавить(ПараметрыБенчмарка);

	Делегат.Исполнить(ПараметрыДелегата);
	
КонецПроцедуры

Процедура ВыполнитьОбработчикПослеЗапускаБенчмарка(Бенчмарк)

	Делегат = _Конфигурация.ОбработчикПослеЗапуска();
	Если Делегат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыДелегата = Новый Массив();
	ПараметрыДелегата.Добавить(Бенчмарк);

	Делегат.Исполнить(ПараметрыДелегата);
	
КонецПроцедуры

Функция ПредставлениеРезультатаИтерации(РезультатИтерации)

	ДлинаЭтапа = Макс(
		СтрДлина(ЭтапыБенчмарка.Оценка),
		СтрДлина(ЭтапыБенчмарка.Прогрев),
		СтрДлина(ЭтапыБенчмарка.Результат),
		СтрДлина(ЭтапыБенчмарка.Память)
	);
	
	ДлинаЭтапа = ДлинаЭтапа + 1;

	Представление = СтрШаблон("%1 %2: %3 op, ",
		Лев(РезультатИтерации.Этап + "              ", ДлинаЭтапа),
		Лев("" + РезультатИтерации.ИндексИтерации + " ", 2),
		Формат(РезультатИтерации.КоличествоОпераций, "ЧГ=")
	);

	Если РезультатИтерации.Этап = ЭтапыБенчмарка.Память Тогда

		Возврат Представление + СтрШаблон(
			"%1, %2/op",
			ПредставленияПоказателейБенчмарков.ПредставлениеЧитаемое(
				РезультатИтерации.ВыделяемаяПамять, 
				ЕдиницыИзмеренийБенчмарков.Байт
			),		
			ПредставленияПоказателейБенчмарков.ПредставлениеЧитаемое(
				РезультатИтерации.ВыделяемаяПамятьЗаОперацию, 
				ЕдиницыИзмеренийБенчмарков.Байт
			)
		);

	Иначе

		Возврат Представление + СтрШаблон(
			"%1, %2/op",
			ПредставленияПоказателейБенчмарков.ПредставлениеЧитаемое(
				РезультатИтерации.Наносекунд,
				ЕдиницыИзмеренийБенчмарков.Наносекунда
			),		
			ПредставленияПоказателейБенчмарков.ПредставлениеЧитаемое(
				РезультатИтерации.НаносекундЗаОперацию,
				ЕдиницыИзмеренийБенчмарков.Наносекунда
			)
		);

	КонецЕсли;

КонецФункции

Процедура ВывестиЗаголовокБенчмарка(Бенчмарк, Параметры)

	Текст = СтрШаблон(Символы.ПС + "// Benchmark: %1.%2", ТипЗнч(Бенчмарк.Объект()), Бенчмарк.Метод());
	ЦветнойВывод.ВывестиСтроку(Текст, "Малиновый");

	Цвет = "ТемноЖелтый";

	// Параметры
	Если Параметры.Количество() > 0 Тогда
		ЦветнойВывод.Вывести("// Params: ", Цвет);

		ЭтоПервыйПараметр = Истина;
		Для Каждого Параметр Из Параметры Цикл	
			Если Не ЭтоПервыйПараметр Тогда
				ЦветнойВывод.Вывести(", ", Цвет);
			КонецЕсли;
			
			ЦветнойВывод.Вывести(СтрШаблон("%1=%2", Параметр.Имя, Строка(Параметр.Значение)), Цвет);
			
			ЭтоПервыйПараметр = Ложь;
		КонецЦикла;
	КонецЕсли;

	ЦветнойВывод.ВывестиСтроку(Символы.ПС);

КонецПроцедуры

Процедура ВывестиРезультатыБенчмарков(Результат)

	ТекстСреды = Новый СредаОкруженияБенчмарков.ВСтроку();
	ТекстСреды = СтрЗаменить(ТекстСреды, Символы.ПС, " \" + Символы.ПС);

	ЦветнойВывод.ВывестиСтроку("// Summary" + Символы.ПС, "Малиновый");
	ЦветнойВывод.ВывестиСтроку(ТекстСреды, "ТемноЖелтый");
	ЦветнойВывод.Вывести(Символы.ПС);
	ЦветнойВывод.ВывестиСтроку(Результат.Отчет.КакMarkdown(), "Бирюза");

КонецПроцедуры

Функция НоваяТаблицаЗамеров()

	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Этап");
	Таблица.Колонки.Добавить("ИндексИтерации");
	Таблица.Колонки.Добавить("КоличествоОпераций");
	Таблица.Колонки.Добавить("Наносекунд");
	Таблица.Колонки.Добавить("НаносекундЗаОперацию");
	Таблица.Колонки.Добавить("ВыделяемаяПамять");
	Таблица.Колонки.Добавить("ВыделяемаяПамятьЗаОперацию");

	Возврат Таблица;
	
КонецФункции

Функция НоваяТаблицаРезультатов()

	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Бенчмарк");
	Таблица.Колонки.Добавить("Параметры");
	Таблица.Колонки.Добавить("Замеры");
	Таблица.Колонки.Добавить("Статистика");
	Таблица.Колонки.Добавить("Эталон");

	Возврат Таблица;
	
КонецФункции

#КонецОбласти