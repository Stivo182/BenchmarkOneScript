// BSLLS:UnusedLocalVariable-off
// BSLLS:ExportVariables-off

#Использовать fluent
#Использовать asserts

Перем Среднее Экспорт; // Число
Перем СтандартноеОтклонение Экспорт; // Число
Перем СтандартнаяОшибкаСреднего Экспорт; // Число
Перем Медиана Экспорт; // Число
Перем Мин Экспорт; // Число
Перем Макс Экспорт; // Число
Перем НижнийКвартиль Экспорт; // Число
Перем ВерхнийКвартиль Экспорт; // Число
Перем ОперацийВСекунду Экспорт; // Число
Перем ВыделяемаяПамять Экспорт; // Число

Перем _ЗамерыВремени; // Массив из Число
Перем _УпорядоченныеЗамерыВремени; // Массив из Число
Перем _ЗамерыПамяти; // Массив из Число
Перем _ИсходныеПоказатели; // Структура
Перем _ТекущаяЕдиницаВремени; // ЕдиницаИзмеренияБенчмарка

// Статистика бенчмарка
//
// Параметры:
//   Замеры - ТаблицаЗначений - см. ЗапускательБенчмарков.НоваяТаблицаЗамеров
//          - Структура:
//              * ЗамерыВремени - Массив из Число
//              * ЗамерыПамяти - Массив из Число
Процедура ПриСозданииОбъекта(Замеры = Неопределено)

	_ИсходныеПоказатели = Новый Структура();

	Для Каждого Имя Из ИменаПолейВремени() Цикл
		_ИсходныеПоказатели.Вставить(Имя, 0);
	КонецЦикла;

	Если Не Замеры = Неопределено Тогда
		Прочитать(Замеры);
	КонецЕсли;
	
КонецПроцедуры

#Область ПрограммныйИнтерфейс

// Квантиль
//
// Параметры:
//   Вероятность - Число
//
// Возвращаемое значение:
//   Число
Функция Квантиль(Вероятность) Экспорт

	Квантиль = МатематическиеФункцииБенчмарков.Квантиль(_УпорядоченныеЗамерыВремени, Вероятность);
	Квантиль = ЕдиницыИзмеренийБенчмарков.Конвертировать(
		Квантиль, 
		ЕдиницыИзмеренийБенчмарков.Наносекунда, 
		_ТекущаяЕдиницаВремени
	);

	Возврат Квантиль;

КонецФункции

// Читает замеры и формирует статистику
//
// Параметры:
//   Замеры - ТаблицаЗначений - см. ЗапускательБенчмарков.НоваяТаблицаЗамеров
//          - Структура:
//              * ЗамерыВремени - Массив из Число
//              * ЗамерыПамяти - Массив из Число
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция Прочитать(Замеры) Экспорт

	Если ТипЗнч(Замеры) = Тип("ТаблицаЗначений") Тогда	
		_ЗамерыВремени = ВыгрузитьЗамеры(Замеры, "НаносекундЗаОперацию", ЭтапыБенчмарка.Измерение);
		_ЗамерыПамяти = ВыгрузитьЗамеры(Замеры, "ВыделяемаяПамятьЗаОперацию", ЭтапыБенчмарка.Память);
	ИначеЕсли ТипЗнч(Замеры) = Тип("Структура") Тогда
		_ЗамерыВремени = Замеры.ЗамерыВремени;
		_ЗамерыПамяти = Замеры.ЗамерыПамяти;
	Иначе
		ВызватьИсключение СтрШаблон("Замеры с типом %1 не поддерживаются", ТипЗнч(Замеры));
	КонецЕсли;

	Ожидаем.Что(_ЗамерыВремени, "Набор замеров не должен быть пустым").Заполнено();
	
	_УпорядоченныеЗамерыВремени = УпорядоченныйМассив(_ЗамерыВремени);
	
	Рассчитать();

	Возврат ЭтотОбъект;

КонецФункции

// Конвертирует показатели времени в секунды
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ВСекунды() Экспорт
	КонвертироватьВремя(ЕдиницыИзмеренийБенчмарков.Секунда);
	Возврат ЭтотОбъект;
КонецФункции

// Конвертирует показатели времени в миллисекунды
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ВМиллисекунды() Экспорт
	КонвертироватьВремя(ЕдиницыИзмеренийБенчмарков.Миллисекунда);
	Возврат ЭтотОбъект;
КонецФункции

// Конвертирует показатели времени в наносекунды
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ВНаносекунды() Экспорт
	КонвертироватьВремя(ЕдиницыИзмеренийБенчмарков.Наносекунда);
	Возврат ЭтотОбъект;
КонецФункции

// Вычисляет отношение соответствующих элементов замеров времени и памяти текущей статистики 
// к элементам переданной статистики и возвращает новый объект СтатистикаБенчмарка с результатами.
//
// Параметры:
//   Статистика - СтатистикаБенчмарка
//
// Возвращаемое значение:
//   СтатистикаБенчмарка
Функция Разделить(Статистика) Экспорт
	
	ЗамерыВремени = МатематическиеФункцииБенчмарков.Разделить(_ЗамерыВремени, Статистика.ЗамерыВремени());
	ЗамерыПамяти = МатематическиеФункцииБенчмарков.Разделить(_ЗамерыПамяти, Статистика.ЗамерыПамяти());

	Замеры = Новый Структура("ЗамерыВремени, ЗамерыПамяти", ЗамерыВремени, ЗамерыПамяти);

	Возврат Новый СтатистикаБенчмарка(Замеры);

КонецФункции

// Замеры времени выполнения
//
// Возвращаемое значение:
//   Массив из Число
Функция ЗамерыВремени() Экспорт
	Возврат Новый Массив(Новый ФиксированныйМассив(_ЗамерыВремени));
КонецФункции

// Замеры памяти выполнения
//
// Возвращаемое значение:
//   Массив из Число
Функция ЗамерыПамяти() Экспорт
	Возврат Новый Массив(Новый ФиксированныйМассив(_ЗамерыПамяти));
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура Рассчитать()
	
	КоличествоИтераций = _ЗамерыВремени.Количество();
	НаносекундВСекунде = ЕдиницыИзмеренийБенчмарков.Секунда.ОтношениеКБазовой;

	_ИсходныеПоказатели.Среднее = МатематическиеФункцииБенчмарков.Среднее(_ЗамерыВремени);
	_ИсходныеПоказатели.СтандартноеОтклонение = МатематическиеФункцииБенчмарков.СтандартноеОтклонение(_ЗамерыВремени);
	_ИсходныеПоказатели.СтандартнаяОшибкаСреднего = МатематическиеФункцииБенчмарков.СтандартнаяОшибкаСреднего(
		_ИсходныеПоказатели.СтандартноеОтклонение,
		КоличествоИтераций
	);
		
	Квартили = МатематическиеФункцииБенчмарков.Квартили(_УпорядоченныеЗамерыВремени);

	_ИсходныеПоказатели.Мин = Квартили.Q0;
	_ИсходныеПоказатели.НижнийКвартиль = Квартили.Q1;
	_ИсходныеПоказатели.Медиана = Квартили.Q2;
	_ИсходныеПоказатели.ВерхнийКвартиль = Квартили.Q3;
	_ИсходныеПоказатели.Макс = Квартили.Q4;
	
	ОперацийВСекунду = ?(_ИсходныеПоказатели.Среднее = 0, 0, НаносекундВСекунде / _ИсходныеПоказатели.Среднее);
	ВыделяемаяПамять = МатематическиеФункцииБенчмарков.Среднее(_ЗамерыПамяти);
	
	КонвертироватьВремя(_ТекущаяЕдиницаВремени);

КонецПроцедуры

Процедура КонвертироватьВремя(Единица)

	Если Единица = Неопределено Тогда
		_ТекущаяЕдиницаВремени = ЕдиницыИзмеренийБенчмарков.Наносекунда;
	ИначеЕсли _ТекущаяЕдиницаВремени = Единица Тогда
		Возврат;
	Иначе
		_ТекущаяЕдиницаВремени = Единица;
	КонецЕсли;

	Для Каждого Имя Из ИменаПолейВремени() Цикл
		ЭтотОбъект[Имя] = ЕдиницыИзмеренийБенчмарков.Конвертировать(
			_ИсходныеПоказатели[Имя], 
			ЕдиницыИзмеренийБенчмарков.Наносекунда, 
			_ТекущаяЕдиницаВремени
		);
	КонецЦикла;

КонецПроцедуры

Функция ИменаПолейВремени()
	
	Результат = Новый Массив();
	Результат.Добавить("Среднее");
	Результат.Добавить("СтандартноеОтклонение");
	Результат.Добавить("СтандартнаяОшибкаСреднего");
	Результат.Добавить("Медиана");
	Результат.Добавить("НижнийКвартиль");
	Результат.Добавить("ВерхнийКвартиль");
	Результат.Добавить("Мин");
	Результат.Добавить("Макс");

	Возврат Результат;

КонецФункции

Функция ВыгрузитьЗамеры(Замеры, Колонка, Этап)

	Возврат ПроцессорыКоллекций.ИзКоллекции(Замеры)
		.Фильтровать("Элемент -> Элемент.Этап = Этап", Новый Структура("Этап", Этап))
		.Получить(Тип("ТаблицаЗначений"))
		.ВыгрузитьКолонку(Колонка);

КонецФункции

Функция УпорядоченныйМассив(Массив)

	Список = Новый СписокЗначений();
	Список.ЗагрузитьЗначения(Массив);
	Список.СортироватьПоЗначению();

	Возврат Список.ВыгрузитьЗначения();

КонецФункции

#КонецОбласти