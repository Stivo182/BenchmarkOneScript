// BSLLS:UnusedLocalVariable-off
// BSLLS:ExportVariables-off

#Использовать fluent
#Использовать asserts

Перем Среднее Экспорт; // Число
Перем СтандартноеОтклонение Экспорт; // Число
Перем СтандартнаяОшибкаСреднего Экспорт; // Число
Перем Медиана Экспорт; // Число
Перем Мин Экспорт; // Число
Перем Макс Экспорт; // Число
Перем НижнийКвартиль Экспорт; // Число
Перем ВерхнийКвартиль Экспорт; // Число
Перем ОперацийВСекунду Экспорт; // Число
Перем ВыделяемаяПамять Экспорт; // Число

Перем _ИсходныеДанные; // Структура
Перем _УпорядоченныеЗамерыВремени; // Массив из Число
Перем _ТекущаяЕдиницаВремени; // ЕдиницаИзмеренияБенчмарка

// Статистика бенчмарка
//
// Параметры:
//   Замеры - ТаблицаЗначений - см. ЗапускательБенчмарков.НоваяТаблицаЗамеров
Процедура ПриСозданииОбъекта(Замеры = Неопределено)

	_ИсходныеДанные = Новый Структура();

	Для Каждого Имя Из ИменаПолейВремени() Цикл
		_ИсходныеДанные.Вставить(Имя, 0);
	КонецЦикла;

	Если Не Замеры = Неопределено Тогда
		Прочитать(Замеры);
	КонецЕсли;
	
КонецПроцедуры

#Область ПрограммныйИнтерфейс

// Квантиль
//
// Параметры:
//   Вероятность - Число
//
// Возвращаемое значение:
//   Число
Функция Квантиль(Вероятность) Экспорт

	Квантиль = МатематическиеФункцииБенчмарков.Квантиль(_УпорядоченныеЗамерыВремени, Вероятность);
	Квантиль = ЕдиницыИзмеренийБенчмарков.Конвертировать(
		Квантиль, 
		ЕдиницыИзмеренийБенчмарков.Наносекунда, 
		_ТекущаяЕдиницаВремени
	);

	Возврат Квантиль;

КонецФункции

// Читает замеры и формирует статистику
//
// Параметры:
//   Замеры - ТаблицаЗначений - см. ЗапускательБенчмарков.НоваяТаблицаЗамеров
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция Прочитать(Замеры) Экспорт

	Ожидаем.Что(Замеры, "Набор замеров не должен быть пустым").Заполнено();
	
	КоличествоИтераций = Замеры.Количество();
	НаносекундВСекунде = ЕдиницыИзмеренийБенчмарков.Секунда.ОтношениеКБазовой;

	ЗамерыВремени = ВыгрузитьЗамеры(Замеры, "НаносекундЗаОперацию", ЭтапыБенчмарка.Измерение);
	ЗамерыПамяти = ВыгрузитьЗамеры(Замеры, "ВыделяемаяПамятьЗаОперацию", ЭтапыБенчмарка.Память);
		
	Квартили = МатематическиеФункцииБенчмарков.Квартили(ЗамерыВремени);

	_ИсходныеДанные.Среднее = МатематическиеФункцииБенчмарков.Среднее(ЗамерыВремени);
	_ИсходныеДанные.СтандартноеОтклонение = МатематическиеФункцииБенчмарков.СтандартноеОтклонение(ЗамерыВремени);
	_ИсходныеДанные.СтандартнаяОшибкаСреднего = МатематическиеФункцииБенчмарков.СтандартнаяОшибкаСреднего(
		_ИсходныеДанные.СтандартноеОтклонение,
		КоличествоИтераций
	);
	_ИсходныеДанные.Мин = Квартили.Q0;
	_ИсходныеДанные.НижнийКвартиль = Квартили.Q1;
	_ИсходныеДанные.Медиана = Квартили.Q2;
	_ИсходныеДанные.ВерхнийКвартиль = Квартили.Q3;
	_ИсходныеДанные.Макс = Квартили.Q4;
	
	ОперацийВСекунду = ?(_ИсходныеДанные.Среднее = 0, 0, НаносекундВСекунде / _ИсходныеДанные.Среднее);
	ВыделяемаяПамять = МатематическиеФункцииБенчмарков.Среднее(ЗамерыПамяти);

	_УпорядоченныеЗамерыВремени = ЗамерыВремени;
	
	ВНаносекунды();

	Возврат ЭтотОбъект;

КонецФункции

// Конвертирует показатели времени в секунды
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ВСекунды() Экспорт
	КонвертироватьВремя(ЕдиницыИзмеренийБенчмарков.Секунда);
	Возврат ЭтотОбъект;
КонецФункции

// Конвертирует показатели времени в миллисекунды
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ВМиллисекунды() Экспорт
	КонвертироватьВремя(ЕдиницыИзмеренийБенчмарков.Миллисекунда);
	Возврат ЭтотОбъект;
КонецФункции

// Конвертирует показатели времени в наносекунды
//
// Возвращаемое значение:
//   ЭтотОбъект
Функция ВНаносекунды() Экспорт
	КонвертироватьВремя(ЕдиницыИзмеренийБенчмарков.Наносекунда);
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура КонвертироватьВремя(Единица)

	Если _ТекущаяЕдиницаВремени = Единица Тогда
		Возврат;
	КонецЕсли;

	_ТекущаяЕдиницаВремени = Единица;
	
	Для Каждого Имя Из ИменаПолейВремени() Цикл
		ЭтотОбъект[Имя] = ЕдиницыИзмеренийБенчмарков.Конвертировать(
			_ИсходныеДанные[Имя], 
			ЕдиницыИзмеренийБенчмарков.Наносекунда, 
			Единица
		);
	КонецЦикла;

КонецПроцедуры

Функция ИменаПолейВремени()
	
	Результат = Новый Массив();
	Результат.Добавить("Среднее");
	Результат.Добавить("СтандартноеОтклонение");
	Результат.Добавить("СтандартнаяОшибкаСреднего");
	Результат.Добавить("Медиана");
	Результат.Добавить("НижнийКвартиль");
	Результат.Добавить("ВерхнийКвартиль");
	Результат.Добавить("Мин");
	Результат.Добавить("Макс");

	Возврат Результат;

КонецФункции

Функция ВыгрузитьЗамеры(Замеры, Колонка, Этап)

	Возврат ПроцессорыКоллекций.ИзКоллекции(Замеры)
		.Фильтровать("Элемент -> Элемент.Этап = Этап", Новый Структура("Этап", Этап))
		.СортироватьПо(Колонка)
		.Получить(Тип("ТаблицаЗначений"))
		.ВыгрузитьКолонку(Колонка);

КонецФункции

#КонецОбласти