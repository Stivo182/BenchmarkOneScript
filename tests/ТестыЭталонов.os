// BSLLS:DuplicateStringLiteral-off
// BSLLS:MagicNumber-off

#Использовать asserts
#Использовать fluent
#Использовать "helpers"

&Тест
Процедура Тест_ДолженНайтиЭталонныйБенчмаркОпределенныйВАннотации() Экспорт

	Тип = Тип("БенчмаркиСЭталоном");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).ИмеетДлину(2);
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Эталон]).ЭтоЛожь();
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.КоэффициентПроизводительности]).Заполнено();
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Эталон]).ЭтоИстина();
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.КоэффициентПроизводительности]).Равно(1);

КонецПроцедуры

&Тест
Процедура Тест_ДолженНайтиЭталонныйБенчмаркОпределенныйВКонфигурации() Экспорт

	Тип = Тип("ПустойБенчмарк");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(Тип);
	ДескрипторыБенчмарков.НайтиПоИмени("Бенчмарк").ИспользоватьКакЭталон();

	Результат = Бенчмаркинг.Запустить(ДескрипторыБенчмарков, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).ИмеетДлину(1);
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Эталон]).ЭтоИстина();
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.КоэффициентПроизводительности]).Равно(1);

КонецПроцедуры

&Тест
Процедура Тест_ДолженНайтиЭталонныйБенчмаркВКаждойКатегории() Экспорт
	
	Тип = Тип("БенчмаркиПоКатегориям");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(Тип);
	ДескрипторыБенчмарков.НайтиПоИмени("БенчмаркА1").ИспользоватьКакЭталон();
	ДескрипторыБенчмарков.НайтиПоИмени("БенчмаркБ1").ИспользоватьКакЭталон();

	ПараметрыМетода = Новый Массив();
	ПараметрыМетода.Добавить(Тип);
	ПараметрыМетода.Добавить(Конфигурация);
	ПараметрыМетода.Добавить(ДескрипторыБенчмарков);

	Результат = Бенчмаркинг.Запустить(ДескрипторыБенчмарков, Конфигурация);

	Таблица = Результат.Отчет.Таблица;
	СтрокаА1 = Таблица.Найти("БенчмаркА1", КолонкиОтчетаБенчмарков.Метод);
	СтрокаБ1 = Таблица.Найти("БенчмаркБ1", КолонкиОтчетаБенчмарков.Метод);

	Ожидаем.Что(СтрокаА1[КолонкиОтчетаБенчмарков.Эталон]).ЭтоИстина();
	Ожидаем.Что(СтрокаБ1[КолонкиОтчетаБенчмарков.Эталон]).ЭтоИстина();

КонецПроцедуры

&Тест
Процедура Тест_ДолженНайтиЭталонСредиЭталоннойВерсииИсполняющейСреды() Экспорт

	ТестированиеБенчмарков.ПодготовитьСреду("dev,stable");

	Тип = Тип("ПустойБенчмарк");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	Конфигурация.ДобавитьВерсиюИсполняющейСреды("dev", "dev");
	Конфигурация.ДобавитьВерсиюИсполняющейСреды("stable", "stable", Истина);

	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).ИмеетДлину(2);
	
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.ВерсияИсполняющейСреды]).Содержит("dev");
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Эталон]).ЭтоЛожь();
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.КоэффициентПроизводительности]).Больше(0);

	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.ВерсияИсполняющейСреды]).Содержит("stable");
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Эталон]).ЭтоИстина();
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.КоэффициентПроизводительности]).Равно(1);

КонецПроцедуры

&Тест
Процедура Тест_ДолженПроигнорироватьЭталонныйБенчмаркПриНаличииЭталоннойВерсииИсполняющейСреды() Экспорт

	Тип = Тип("БенчмаркиСЭталоном");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Конфигурация.ДобавитьВерсиюИсполняющейСреды("dev");
	Конфигурация.ДобавитьВерсиюИсполняющейСреды("stable", "stable", Истина);

	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);
	Расшифровка = Результат.Расшифровка;

	Ожидаем.Что(Расшифровка).ИмеетДлину(4);
	Ожидаем.Что(Расшифровка[0].ЭтоЭталон, "Бенчмарк (dev) не должен быть эталоном").ЭтоЛожь();
	Ожидаем.Что(Расшифровка[0].Эталон.ДескрипторБенчмарка.Метод(), "У Бенчмарк (dev) должен быть эталон Бенчмарк (stable)").Равно("Бенчмарк");
	Ожидаем.Что(Расшифровка[0].Эталон.ИсполняющаяСреда.Алиас, "У Бенчмарк (dev) должен быть эталон Бенчмарк (stable)").Равно("stable");
	Ожидаем.Что(Расшифровка[1].ЭтоЭталон, "БенчмаркЭталон (dev) не должен быть эталоном").ЭтоЛожь();
	Ожидаем.Что(Расшифровка[1].Эталон.ДескрипторБенчмарка.Метод(), "У БенчмаркЭталон (dev) должен быть эталон БенчмаркЭталон (stable)").Равно("БенчмаркЭталон");
	Ожидаем.Что(Расшифровка[1].Эталон.ИсполняющаяСреда.Алиас, "У БенчмаркЭталон (dev) должен быть эталон БенчмаркЭталон (stable)").Равно("stable");
	Ожидаем.Что(Расшифровка[2].ЭтоЭталон, "Бенчмарк (stable) должен быть эталоном").ЭтоИстина();
	Ожидаем.Что(Расшифровка[3].ЭтоЭталон, "БенчмаркЭталон (stable) должен быть эталоном").ЭтоИстина();

КонецПроцедуры

&Тест
Процедура Тест_ДолженНайтиЭталонныйБенчмаркВКорректнойВерсииИсполняющейСреды() Экспорт

	Тип = Тип("БенчмаркиСЭталоном");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Конфигурация.ДобавитьВерсиюИсполняющейСреды("dev");
	Конфигурация.ДобавитьВерсиюИсполняющейСреды("stable");

	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);
	Расшифровка = Результат.Расшифровка;

	Ожидаем.Что(Расшифровка).ИмеетДлину(4);
	Ожидаем.Что(Расшифровка[0].ЭтоЭталон, "Бенчмарк (dev) не должен быть эталоном").ЭтоЛожь();
	Ожидаем.Что(Расшифровка[0].Эталон.ДескрипторБенчмарка.Метод(), "У Бенчмарк (dev) должен быть эталон БенчмаркЭталон (dev)").Равно("БенчмаркЭталон");
	Ожидаем.Что(Расшифровка[0].Эталон.ИсполняющаяСреда.Алиас, "У Бенчмарк (dev) должен быть эталон БенчмаркЭталон (dev)").Равно("dev");
	Ожидаем.Что(Расшифровка[1].ЭтоЭталон, "БенчмаркЭталон (dev) должен быть эталоном").ЭтоИстина();
	Ожидаем.Что(Расшифровка[2].ЭтоЭталон, "Бенчмарк (dev) не должен быть эталоном").ЭтоЛожь();
	Ожидаем.Что(Расшифровка[2].Эталон.ДескрипторБенчмарка.Метод(), "У Бенчмарк (stable) должен быть эталон БенчмаркЭталон (stable)").Равно("БенчмаркЭталон");
	Ожидаем.Что(Расшифровка[2].Эталон.ИсполняющаяСреда.Алиас, "У Бенчмарк (stable) должен быть эталон БенчмаркЭталон (stable)").Равно("stable");
	Ожидаем.Что(Расшифровка[3].ЭтоЭталон, "БенчмаркЭталон (stable) должен быть эталоном").ЭтоИстина();

КонецПроцедуры

&Тест
Процедура Тест_ДолженПроверитьЗапретНаБолееОдногоЭталонногоБенчмарка() Экспорт

	Тип = Тип("БенчмаркиСЭталоном");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(Тип);
	ДескрипторыБенчмарков.Получить(0).ИспользоватьКакЭталон();
	ДескрипторыБенчмарков.Получить(1).ИспользоватьКакЭталон();
	
	ПараметрыМетода = Новый Массив();
	ПараметрыМетода.Добавить(ДескрипторыБенчмарков);
	ПараметрыМетода.Добавить(Конфигурация);

	Ожидаем
		.Что(Бенчмаркинг)
		.Метод("Запустить", ПараметрыМетода)
		.ВыбрасываетИсключение("Может быть только один эталонный бенчмарк");

КонецПроцедуры

&Тест
Процедура Тест_ДолженПроверитьЗапретНаБолееОдногоЭталонногоБенчмаркаВКатегории() Экспорт
	
	Тип = Тип("БенчмаркиПоКатегориям");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(Тип);
	ДескрипторыБенчмарков.Получить(0).ИспользоватьКакЭталон(); // А1
	ДескрипторыБенчмарков.Получить(1).ИспользоватьКакЭталон(); // А2

	ПараметрыМетода = Новый Массив();
	ПараметрыМетода.Добавить(ДескрипторыБенчмарков);
	ПараметрыМетода.Добавить(Конфигурация);

	Ожидаем
		.Что(Бенчмаркинг)
		.Метод("Запустить", ПараметрыМетода)
		.ВыбрасываетИсключение("В пределах одной категории может быть только один эталонный бенчмарк");

КонецПроцедуры

&Тест
Процедура Тест_ДолженПроверитьЗапретНаБолееОдногоЭталоннойВерсииИсполняющейСреды() Экспорт

	Тип = Тип("ПустойБенчмарк");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	Конфигурация.ДобавитьВерсиюИсполняющейСреды("dev", "dev", Истина);
	Конфигурация.ДобавитьВерсиюИсполняющейСреды("stable", "stable", Истина);
	
	ПараметрыМетода = Новый Массив();
	ПараметрыМетода.Добавить(Тип);
	ПараметрыМетода.Добавить(Конфигурация);

	Ожидаем
		.Что(Бенчмаркинг)
		.Метод("Запустить", ПараметрыМетода)
		.ВыбрасываетИсключение("Допускается только одна эталонная версия исполняющей среды");

КонецПроцедуры

&Тест
Процедура Тест_ДолженУбедитьсяВОтсутствииЭталонаКогдаИменаПараметровНеСовпадают() Экспорт

	Тип = Тип("БенчмаркиСЭталономИПараметрами");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	СтрокаБезЭталона = ПроцессорыКоллекций.ИзКоллекции(Результат.Расшифровка)
		.Фильтровать("Элемент -> Элемент.ДескрипторБенчмарка.Метод() = ""БенчмаркВ""")
		.ПолучитьПервый();

	Ожидаем.Что(СтрокаБезЭталона.Эталон, "Эталон не должен был быть найден").Не_().Заполнено();

КонецПроцедуры

&Тест
Процедура Тест_ДолженУбедитьсяВОтсутствииЭталонаКогдаЗначенияПараметровНеСовпадают() Экспорт

	Тип = Тип("БенчмаркиСЭталономИПараметрами");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	СтрокаБезЭталона = ПроцессорыКоллекций.ИзКоллекции(Результат.Расшифровка)
		.Фильтровать("Элемент -> Элемент.ДескрипторБенчмарка.Метод() = ""БенчмаркБ"" И Элемент.Параметры[1].Имя = ""Перем1"" И Элемент.Параметры[1].Значение = 2")
		.ПолучитьПервый();

	Ожидаем.Что(СтрокаБезЭталона, "Не найдена строка бенчмарка ""БенчмаркБ"" со значением параметра 2").Заполнено();
	Ожидаем.Что(СтрокаБезЭталона.Эталон, "Эталон не должен был быть найден").Не_().Заполнено();

КонецПроцедуры

&Тест
Процедура Тест_ДолженНайтиЭталонКогдаИменаИЗначенияПараметровСовпадают() Экспорт

	Тип = Тип("БенчмаркиСЭталономИПараметрами");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	// БенчмаркБ
	СтрокаБезЭталона = ПроцессорыКоллекций.ИзКоллекции(Результат.Расшифровка)
		.Фильтровать("Элемент -> Элемент.ДескрипторБенчмарка.Метод() = ""БенчмаркБ"" И Элемент.Параметры[1].Имя = ""Перем1"" И Элемент.Параметры[1].Значение = 1")
		.ПолучитьПервый();

	Ожидаем.Что(СтрокаБезЭталона, "Не найдена строка бенчмарка ""БенчмаркБ"" со значением параметра 1").Заполнено();
	Ожидаем.Что(СтрокаБезЭталона.Эталон, "Эталон должен был быть найден").Заполнено();
	Ожидаем.Что(СтрокаБезЭталона.Эталон.ДескрипторБенчмарка.Метод()).Равно("БенчмаркА");

КонецПроцедуры