// BSLLS:DuplicateStringLiteral-off
// BSLLS:MagicNumber-off

#Использовать asserts
#Использовать fluent
#Использовать delegate
#Использовать fs
#Использовать tempfiles
#Использовать "helpers"

Перем МенеджерВременныхФайлов; // МенеджерВременныхФайлов

&Инициализация
Процедура ПередВсеми() Экспорт
	МенеджерВременныхФайлов = Новый МенеджерВременныхФайлов();
КонецПроцедуры

&Завершение
Процедура ПослеВсех() Экспорт
	МенеджерВременныхФайлов.Удалить();
КонецПроцедуры

&После
Процедура ПослеЗапускаТеста() Экспорт
	
	КаталогАртефактов = ".\BenchmarkArtifacts";

	ФС.УдалитьФайлы(КаталогАртефактов);

КонецПроцедуры

&Тест
Процедура Тест_ЗапускБенчмарковИзКаталога() Экспорт
	
	Каталог = "./tests/fixtures/Классы/БенчмаркиЧерезКаталог";

	Результат = Бенчмаркинг.ЗапуститьИзКаталога(Каталог);

	Ожидаем.Что(Результат).ИмеетДлину(2);
	Ожидаем.Что(Результат.Найти("БенчмаркИзКаталога1", "ИмяФайла")).Заполнено();
	Ожидаем.Что(Результат.Найти("БенчмаркИзКаталога2", "ИмяФайла")).Заполнено();

КонецПроцедуры

&Тест
Процедура Тест_ЗапускБенчмарковИзКаталогаРекурсивно() Экспорт
	
	Каталог = "./tests/fixtures/Классы/БенчмаркиЧерезКаталог";

	Результат = Бенчмаркинг.ЗапуститьИзКаталога(Каталог, Истина);

	Ожидаем.Что(Результат).ИмеетДлину(3);
	Ожидаем.Что(Результат.Найти("БенчмаркИзКаталога1", "ИмяФайла")).Заполнено();
	Ожидаем.Что(Результат.Найти("БенчмаркИзКаталога2", "ИмяФайла")).Заполнено();
	Ожидаем.Что(Результат.Найти("БенчмаркИзВложенногоКаталога", "ИмяФайла")).Заполнено();

КонецПроцедуры

&Тест
Процедура Тест_ЗапускБенчмарковИзНесуществующегоКаталога() Экспорт
	
	Каталог = "./tests/fixtures/Классы/НесуществующийКаталог";

	Результат = Бенчмаркинг.ЗапуститьИзКаталога(Каталог);

	Ожидаем.Что(Результат).ИмеетДлину(0);

КонецПроцедуры

&Тест
Процедура Тест_ЗапускБенчмарковСОшибкой() Экспорт
	
	Каталог = "./tests/fixtures/Классы/БенчмаркиСОшибкой";

	Результат = Бенчмаркинг.ЗапуститьИзКаталога(Каталог);

	Ожидаем.Что(Результат).ИмеетДлину(2);
	Ожидаем.Что(Результат.Найти(Истина, "Успешно")).Заполнено();
	Ожидаем.Что(Результат.Найти(Ложь, "Успешно")).Заполнено();
	
КонецПроцедуры

&Тест
Процедура Тест_ПодключениеНесуществующегоКлассаБенчмарков() Экспорт
	
	ПутьКФайлу = "./tests/fixtures/Классы/БенчмаркНесуществующий.os";

	Тип = Бенчмаркинг.ПодключитьКласс(ПутьКФайлу);

	Ожидаем.Что(Тип).ЭтоНеопределено();

КонецПроцедуры

&Тест
Процедура Тест_ПодключениеКлассаБенчмарковБезБенчмарков() Экспорт
	
	ПутьКФайлу = "./tests/fixtures/Классы/БенчмаркБезБенчмарков.os";

	Тип = Бенчмаркинг.ПодключитьКласс(ПутьКФайлу);

	Ожидаем.Что(Тип).ЭтоНеопределено();

КонецПроцедуры

&Тест
Процедура Тест_ДолженПроверитьЗапретЗапускаСРазнымиТипамиОбъектов() Экспорт

	Коллекция1 = Новый КоллекцияДескрипторовБенчмарков(Тип("БенчмаркСПараметрамиМетода"));
	Коллекция2 = Новый КоллекцияДескрипторовБенчмарков(Тип("БенчмаркиПоКатегориям"));

	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков();
	ДескрипторыБенчмарков.Добавить(Коллекция1.ПолучитьПервый());
	ДескрипторыБенчмарков.Добавить(Коллекция2.ПолучитьПервый());
	
	ПараметрыМетода = Новый Массив();
	ПараметрыМетода.Добавить(ДескрипторыБенчмарков);

	Ожидаем
		.Что(Бенчмаркинг)
		.Метод("Запустить", ПараметрыМетода)
		.ВыбрасываетИсключение("Запрещается запускать бенчмарки с разными типами");

КонецПроцедуры

&Тест
Процедура Тест_ДолженЗапуститьБенчмаркЧерезДескриптор() Экспорт
	
	Тип = Тип("ПустойБенчмарк");

	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(Тип);
	Дескриптор = ДескрипторыБенчмарков.ПолучитьПервый();

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию();
	Результат = Бенчмаркинг.Запустить(Дескриптор, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Расшифровка).Заполнено();

КонецПроцедуры

&Тест
Процедура Тест_ПараметрыМетодаИзАннотаций() Экспорт
	
	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию();
	Результат = Бенчмаркинг.Запустить(Тип("БенчмаркСПараметрамиМетода"), Конфигурация);
	НаборыПараметров = Результат.ДескрипторыБенчмарков.ПолучитьПервый().НаборыПараметров();

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Парам1")]).Равно(10);
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Парам2")]).Равно(100);
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Парам1")]).Равно(20);
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Парам2")]).Равно(200);
	Ожидаем.Что(НаборыПараметров[0][0].ЭтоПараметрМетода).ЭтоИстина();

КонецПроцедуры

&Тест
Процедура Тест_ДолженПроверитьПараметрыМетодаИПоляИзАннотаций() Экспорт
	
	Тип = Тип("БенчмаркСПараметрамиМетодаИПоля");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).ИмеетДлину(4);
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("ПолеОбщее")]).Равно(1);
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Парам1")]).Равно(3);
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Парам2")]).Равно(4);
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("ПолеОбщее")]).Равно(1);
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Парам1")]).Равно(5);
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Парам2")]).Равно(6);
	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Параметр("ПолеОбщее")]).Равно(2);
	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Параметр("Парам1")]).Равно(3);
	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Параметр("Парам2")]).Равно(4);
	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Параметр("ПолеОбщее")]).Равно(2);
	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Параметр("Парам1")]).Равно(5);
	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Параметр("Парам2")]).Равно(6);

КонецПроцедуры

&Тест
Процедура Тест_УстановкаПараметровМетода() Экспорт
	
	Параметры1 = Новый Массив();
	Параметры1.Добавить(50);
	Параметры1.Добавить(150);

	Параметры2 = Новый Массив();
	Параметры2.Добавить(200);
	Параметры2.Добавить(250);

	Тип = Тип("БенчмаркСПараметрамиМетода");

	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(Тип);
	ДескрипторыБенчмарков.НайтиПоИмени("Бенчмарк")
		.ОчиститьПараметры()
		.ДобавитьПараметры(Параметры1)
		.ДобавитьПараметры(Параметры2);

	Результат = Бенчмаркинг.Запустить(ДескрипторыБенчмарков, ТестированиеБенчмарков.КонфигурацияПоУмолчанию());

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Парам1")]).Равно(50);
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Парам2")]).Равно(150);
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Парам1")]).Равно(200);
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Парам2")]).Равно(250);
	
КонецПроцедуры

&Тест
Процедура Тест_КатегорииИзАннотации() Экспорт

	Тип = Тип("БенчмаркиПоКатегориям");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	ИмяКолонки = КолонкиОтчетаБенчмарков.Категория;

	Ожидаем.Что(Результат.Отчет.Таблица).ИмеетДлину(4);
	Ожидаем.Что(Результат.Отчет.Таблица[0][ИмяКолонки]).Равно("А");
	Ожидаем.Что(Результат.Отчет.Таблица[1][ИмяКолонки]).Равно("А");
	Ожидаем.Что(Результат.Отчет.Таблица[2][ИмяКолонки]).Равно("Б");
	Ожидаем.Что(Результат.Отчет.Таблица[3][ИмяКолонки]).Равно("Б");

КонецПроцедуры

&Тест
Процедура Тест_УстановкаКатегории() Экспорт
	
	Тип = Тип("ПустойБенчмарк");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(Тип);
	ДескрипторыБенчмарков.ПолучитьПервый().УстановитьКатегорию("В");
	
	Результат = Бенчмаркинг.Запустить(ДескрипторыБенчмарков, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).ИмеетДлину(1);
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Категория]).Равно("В");

КонецПроцедуры

&Тест
Процедура Тест_СортировкаПоМетоду() Экспорт

	Тип = Тип("БенчмаркиССортировкой");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	Конфигурация.УстановитьСортировкуОтчета(СортировкиОтчетаБенчмарков.Метод);

	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркА");
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);
	
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркА");
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркБ");
	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркБ");
	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

	Ожидаем.Что(Результат.Отчет.Таблица[4][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркВ");
	Ожидаем.Что(Результат.Отчет.Таблица[4][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[5][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркВ");
	Ожидаем.Что(Результат.Отчет.Таблица[5][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

КонецПроцедуры

&Тест
Процедура Тест_СортировкаОтБыстрыхКМедленнымИзАннотации() Экспорт
	
	Тип = Тип("БенчмаркиССортировкой");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Конфигурация.УстановитьСортировкуОтчета(СортировкиОтчетаБенчмарков.ОтБыстрыхКМедленным);

	Обработчик = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеКаждого_УстановкаВремени");
	Конфигурация.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеКаждого, Обработчик);

	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркВ");
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркВ");
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркА");
	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркА");
	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

	Ожидаем.Что(Результат.Отчет.Таблица[4][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркБ");
	Ожидаем.Что(Результат.Отчет.Таблица[4][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[5][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркБ");
	Ожидаем.Что(Результат.Отчет.Таблица[5][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

КонецПроцедуры

&Тест
Процедура Тест_СортировкаОтМедленныхКБыстрым() Экспорт
	
	Тип = Тип("БенчмаркиССортировкой");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Конфигурация.УстановитьСортировкуОтчета(СортировкиОтчетаБенчмарков.ОтМедленныхКБыстрым);

	Обработчик = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеКаждого_УстановкаВремени");
	Конфигурация.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеКаждого, Обработчик);
	
	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркБ");
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркБ");
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркА");
	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркА");
	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

	Ожидаем.Что(Результат.Отчет.Таблица[4][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркВ");
	Ожидаем.Что(Результат.Отчет.Таблица[4][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[5][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркВ");
	Ожидаем.Что(Результат.Отчет.Таблица[5][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

КонецПроцедуры

&Тест
Процедура Тест_СортировкаПоУмолчанию() Экспорт
	
	Тип = Тип("БенчмаркиССортировкой");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	Конфигурация.УстановитьСортировкуОтчета(СортировкиОтчетаБенчмарков.ПоУмолчанию);

	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркБ");
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркВ");
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркА");
	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркБ");
	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

	Ожидаем.Что(Результат.Отчет.Таблица[4][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркВ");
	Ожидаем.Что(Результат.Отчет.Таблица[4][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

	Ожидаем.Что(Результат.Отчет.Таблица[5][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркА");
	Ожидаем.Что(Результат.Отчет.Таблица[5][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

КонецПроцедуры

&Тест
Процедура Тест_ФильтрацияВНабореДескрипторовБенчмарков() Экспорт

	Тип = Тип("БенчмаркиПоКатегориям");

	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(Тип);
	ДескрипторыБенчмарков.Фильтровать("Элемент -> Прав(Элемент.Метод(), 1) = ""2""");

	Ожидаем.Что(ДескрипторыБенчмарков.ВМассив().Количество()).Равно(2);
	Ожидаем.Что(ДескрипторыБенчмарков.Получить(0).Метод()).Равно("БенчмаркА2");
	Ожидаем.Что(ДескрипторыБенчмарков.Получить(1).Метод()).Равно("БенчмаркБ2");
	
КонецПроцедуры

&Тест
Процедура Тест_ЭкспортВMarkdown() Экспорт
	
	Тип = Тип("ДваБенчмаркаИПоле");
	ОбработчикПослеКаждого = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеКаждого_УстановкаВремени");
	ОбработчикПослеВсех = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеВсех_УстановкаМокСредыОкружения");

	ЧтениеТекста = Новый ЧтениеТекста("tests/fixtures/verified-report.md", "UTF-8");
	ТекстЭталон = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	Конфигурация.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеКаждого, ОбработчикПослеКаждого);
	Конфигурация.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеВсех, ОбработчикПослеВсех);
	Конфигурация.ДобавитьЭкспортер(ЭкспортерыРезультатовБенчмарков.Markdown);
	
	ПутьКФайлу = ОбъединитьПути(Конфигурация.КаталогАртефактов(), "ДваБенчмаркаИПоле-report.md");

	Бенчмаркинг.Запустить(Тип, Конфигурация);

	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, "UTF-8");
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Ожидаем.Что(Текст).Равно(ТекстЭталон);
	
КонецПроцедуры

&Тест
Процедура Тест_ЭкспортВJson() Экспорт
	
	Тип = Тип("ДваБенчмаркаИПоле");
	ОбработчикПослеКаждого = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеКаждого_УстановкаВремени");
	ОбработчикПослеВсех = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеВсех_УстановкаМокСредыОкружения");

	ЧтениеТекста = Новый ЧтениеТекста("tests/fixtures/verified-report.json", "UTF-8");
	ТекстЭталон = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Конфигурация
		.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеКаждого, ОбработчикПослеКаждого)
		.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеВсех, ОбработчикПослеВсех)
		.ДобавитьЭкспортер(ЭкспортерыРезультатовБенчмарков.Json)
		.УстановитьКоличествоИтераций(10);
	
	ПутьКФайлу = ОбъединитьПути(Конфигурация.КаталогАртефактов(), "ДваБенчмаркаИПоле-report.json");

	Бенчмаркинг.Запустить(Тип, Конфигурация);

	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, "UTF-8");
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Ожидаем.Что(Текст).Равно(ТекстЭталон);
	
КонецПроцедуры

&Тест
Процедура Тест_ЭкспортВXml() Экспорт
	
	Тип = Тип("ДваБенчмаркаИПоле");
	ОбработчикПослеКаждого = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеКаждого_УстановкаВремени");
	ОбработчикПослеВсех = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеВсех_УстановкаМокСредыОкружения");

	ЧтениеТекста = Новый ЧтениеТекста("tests/fixtures/verified-report.xml", "UTF-8");
	ТекстЭталон = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Конфигурация
		.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеКаждого, ОбработчикПослеКаждого)
		.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеВсех, ОбработчикПослеВсех)
		.ДобавитьЭкспортер(ЭкспортерыРезультатовБенчмарков.Xml)
		.УстановитьКоличествоИтераций(10);
	
	ПутьКФайлу = ОбъединитьПути(Конфигурация.КаталогАртефактов(), "ДваБенчмаркаИПоле-report.xml");

	Бенчмаркинг.Запустить(Тип, Конфигурация);

	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, "UTF-8");
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Ожидаем.Что(Текст).Равно(ТекстЭталон);
	
КонецПроцедуры

&Тест
Процедура Тест_ЭкспортВHtml() Экспорт
	
	Тип = Тип("ДваБенчмаркаИПоле");
	ОбработчикПослеКаждого = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеКаждого_УстановкаВремени");
	ОбработчикПослеВсех = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеВсех_УстановкаМокСредыОкружения");

	ЧтениеТекста = Новый ЧтениеТекста("tests/fixtures/verified-report.html", "UTF-8");
	ТекстЭталон = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	Конфигурация.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеКаждого, ОбработчикПослеКаждого);
	Конфигурация.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеВсех, ОбработчикПослеВсех);
	Конфигурация.ДобавитьЭкспортер(ЭкспортерыРезультатовБенчмарков.Html);
	
	ПутьКФайлу = ОбъединитьПути(Конфигурация.КаталогАртефактов(), "ДваБенчмаркаИПоле-report.html");

	Бенчмаркинг.Запустить(Тип, Конфигурация);

	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, "UTF-8");
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Ожидаем.Что(Текст).Равно(ТекстЭталон);
	
КонецПроцедуры

&Тест
Процедура Тест_ДолженПроверитьПередачуКонфигурацииПриЗапускеИзКаталога() Экспорт
	
	Каталог = "./tests/fixtures/Классы/БенчмаркиЧерезКаталог";
	Конфигурация = Новый КонфигурацияБенчмарков()
		.УстановитьКоличествоИтераций(2);

	Результат = Бенчмаркинг.ЗапуститьИзКаталога(Каталог, , Конфигурация);

	Ожидаем.Что(Результат, "Результат").Заполнено();
	Ожидаем.Что(Результат[0].Результат.Конфигурация.КоличествоИтераций()).Равно(2);

КонецПроцедуры

&Тест
Процедура Тест_ДолженПроверитьЗапускВРазныхВерсияхИсполняющейСреды() Экспорт

	ТестированиеБенчмарков.ПодготовитьСреду("dev,stable");

	Тип = Тип("ПустойБенчмарк");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	Конфигурация.ДобавитьВерсиюИсполняющейСреды("dev", "dev");
	Конфигурация.ДобавитьВерсиюИсполняющейСреды("stable", "stable");

	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).ИмеетДлину(2);
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.ВерсияИсполняющейСреды]).Содержит("dev");
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.ВерсияИсполняющейСреды]).Содержит("stable");

КонецПроцедуры

&Тест
Процедура Тест_ДолженПроверитьЗапретЗапускаПриНаличииНесериализуемыхПараметров() Экспорт

	Тип = Тип("БенчмаркСПараметрамиПоля");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Конфигурация
		.ОчиститьПараметры()
		.ДобавитьПараметр("Значение", Новый Структура("Тест", 1))
		.ДобавитьВерсиюИсполняющейСреды("dev")
		.ДобавитьВерсиюИсполняющейСреды("stable", , Истина);
	
	ПараметрыМетода = Новый Массив();
	ПараметрыМетода.Добавить(Тип);
	ПараметрыМетода.Добавить(Конфигурация);

	Ожидаем
		.Что(Бенчмаркинг)
		.Метод("Запустить", ПараметрыМетода)
		.ВыбрасываетИсключение(
			"Значение параметра <Значение> должно быть сериализуемым для определения эталонов между разными версиями OneScript"
		);

КонецПроцедуры

&Тест
Процедура Тест_ДолженПроверитьЗапретЗапускаПриНаличииДелегатовИДругихВерсиейИсполняющейСреды() Экспорт

	Тип = Тип("ПустойБенчмарк");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Конфигурация
		.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПередВсеми, Новый Делегат(ЭтотОбъект, "Тест"))
		.ДобавитьВерсиюИсполняющейСреды("dev");
	
	ПараметрыМетода = Новый Массив();
	ПараметрыМетода.Добавить(Тип);
	ПараметрыМетода.Добавить(Конфигурация);

	Ожидаем
		.Что(Бенчмаркинг)
		.Метод("Запустить", ПараметрыМетода)
		.ВыбрасываетИсключение(
			"Использование делегатов как обработчиков событий не поддерживается при запуске в разных версиях OneScript"
		);

КонецПроцедуры

&Тест
Процедура Тест_ДолженОбработатьОшибкуУстановкиПоляОбъектаКласса() Экспорт

	Тип = Тип("БенчмаркСПараметрамиПоля");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	Конфигурация.ДобавитьПараметр("ОшибочноеИмя", 100);
	
	ПараметрыМетода = Новый Массив();
	ПараметрыМетода.Добавить(Тип);
	ПараметрыМетода.Добавить(Конфигурация);

	Ожидаем
		.Что(Бенчмаркинг)
		.Метод("Запустить", ПараметрыМетода)
		.ВыбрасываетИсключение("Не удалось задать значение поля <ОшибочноеИмя> для объекта <БенчмаркСПараметрамиПоля>");

КонецПроцедуры

&Тест
Процедура Тест_ДолженПроверитьСериализациюРезультатовJson() Экспорт

	Тип = Тип("БенчмаркСПараметрамиМетодаИПоля");
	
	// Настройка дескриптора бенчмарка
	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(Тип);
	ДескрипторБенчмарка = ДескрипторыБенчмарков
		.ПолучитьПервый()
		.УстановитьКатегорию("Категория 1");

	// Настройка конфигурации
	ОбработчикУстановкаМок = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеВсех_УстановкаМокСредыОкружения");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Конфигурация
		.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеВсех, ОбработчикУстановкаМок)
		.ОчиститьПараметры()
		.ДобавитьПараметр("ПолеОбщее", Новый ТаблицаЗначений())
		.ДобавитьПараметр("ПолеОбщее", Новый БенчмаркСПараметрамиМетодаИПоля)
		.ДобавитьПараметр("ПолеОбщее", '19700101')
		.ДобавитьПараметр("ПолеОбщее", Неопределено);

	// Запуск и сериализация/десериализация
	Результат = Бенчмаркинг.Запустить(ДескрипторыБенчмарков, Конфигурация);

	ИмяФайла = МенеджерВременныхФайлов.НовоеИмяФайла();
	Сериализатор = Новый СериализаторРезультатовБенчмарков();
	Сериализатор.СериализоватьВJSON(Результат, ИмяФайла);
	РезультатПрочитанный = Сериализатор.ДесериализоватьИзJSON(ИмяФайла, Конфигурация);

	// Проверка
	Расшифровка = РезультатПрочитанный.Расшифровка;
	ДескрипторБенчмарка = Расшифровка[0].ДескрипторБенчмарка;
	НаборыПараметров = ДескрипторБенчмарка.НаборыПараметров();

	Ожидаем.Что(Расшифровка, "Количество строк в расшифровке").ИмеетДлину(8);
	Ожидаем.Что(ДескрипторБенчмарка.ТипОбъекта(), "Тип").Равно(Тип);
	Ожидаем.Что(ДескрипторБенчмарка.Метод(), "Метод").Равно("Бенчмарк");
	Ожидаем.Что(ДескрипторБенчмарка.Категория(), "Категория").Равно("Категория 1");
	Ожидаем.Что(НаборыПараметров, "Наборы параметров").ИмеетДлину(2);
	Ожидаем.Что(НаборыПараметров[0], "Набор параметров 1").ИмеетДлину(2);
	Ожидаем.Что(НаборыПараметров[0][0].Значение, "Набор параметров 1").Равно(3);
	Ожидаем.Что(НаборыПараметров[0][1].Значение, "Набор параметров 1").Равно(4);
	Ожидаем.Что(НаборыПараметров[1], "Набор параметров 2").ИмеетДлину(2);
	Ожидаем.Что(НаборыПараметров[1][0].Значение, "Набор параметров 2").Равно(5);
	Ожидаем.Что(НаборыПараметров[1][1].Значение, "Набор параметров 2").Равно(6);
	Ожидаем.Что(Расшифровка[0].Параметры, "Количество строк в параметрах").ИмеетДлину(3);
	Ожидаем.Что(Расшифровка[0].Параметры[0].Значение, "Параметр 1.1").Содержит("ТаблицаЗначений@");
	Ожидаем.Что(Расшифровка[0].Параметры[1].Значение, "Параметр 1.2").Равно(3);
	Ожидаем.Что(Расшифровка[0].Параметры[2].Значение, "Параметр 1.3").Равно(4);
	Ожидаем.Что(Расшифровка[1].Параметры[0].Значение, "Параметр 2.1").Содержит("БенчмаркСПараметрамиМетодаИПоля@");
	Ожидаем.Что(Расшифровка[2].Параметры[0].Значение, "Параметр 3.1").Равно('19700101');
	Ожидаем.Что(Расшифровка[3].Параметры[0].Значение, "Параметр 4.1").Равно(Неопределено);
	Ожидаем.Что(Расшифровка[0].ЭтоЭталон, "Это не эталон").ЭтоЛожь();
	Ожидаем.Что(Расшифровка[0].ИсполняющаяСреда.Версия, "Версия").Не_().Заполнено();
	Ожидаем.Что(Расшифровка[0].Замеры, "Количество строк в замерах").ИмеетДлину(1);
	Ожидаем.Что(Расшифровка[0].Замеры[0].Этап, "Этап").Равно(ЭтапыБенчмарка.Измерение);
	Ожидаем.Что(Расшифровка[0].Замеры[0].НомерИтерации, "Номер итерации").Равно(1);
	Ожидаем.Что(Расшифровка[0].Замеры[0].Наносекунд, "Наносекунд").Больше(100);
	Ожидаем.Что(Расшифровка[0].Статистика.Среднее, "Среднее").Больше(100);

КонецПроцедуры

&Тест
Процедура Тест_ДолженПроверитьКонтрольНаличияБенчмарков() Экспорт
	
	ПараметрыМетода = Новый Массив();
	ПараметрыМетода.Добавить(Новый КоллекцияДескрипторовБенчмарков());
	ПараметрыМетода.Добавить(ТестированиеБенчмарков.КонфигурацияПоУмолчанию());

	Ожидаем
		.Что(Бенчмаркинг)
		.Метод("Запустить", ПараметрыМетода)
		.ВыбрасываетИсключение("Не найдены бенчмарки для запуска");

КонецПроцедуры