// BSLLS:DuplicateStringLiteral-off
// BSLLS:MagicNumber-off

#Использовать asserts
#Использовать fluent
#Использовать delegate
#Использовать fs
#Использовать "helpers"

&После
Процедура ПослеЗапускаТеста() Экспорт
	
	КаталогАртефактов = ".\BenchmarkArtifacts";

	ФС.УдалитьФайлы(КаталогАртефактов);

КонецПроцедуры

&Тест
Процедура Тест_ЗапретЗапускаСРазнымиТипамиОбъектов() Экспорт

	Коллекция1 = Новый КоллекцияДескрипторовБенчмарков(Тип("БенчмаркСПараметрамиМетода"));
	Коллекция2 = Новый КоллекцияДескрипторовБенчмарков(Тип("БенчмаркиПоКатегориям"));

	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков();
	ДескрипторыБенчмарков.Добавить(Коллекция1.ПолучитьПервый());
	ДескрипторыБенчмарков.Добавить(Коллекция2.ПолучитьПервый());
	
	ПараметрыМетода = Новый Массив();
	ПараметрыМетода.Добавить(ДескрипторыБенчмарков);

	Ожидаем
		.Что(Бенчмаркинг)
		.Метод("Запустить", ПараметрыМетода)
		.ВыбрасываетИсключение("Не поддерживается запуск с разными типами объектов бенчмарков");

КонецПроцедуры

&Тест
Процедура Тест_ПараметрыМетодаИзАннотаций() Экспорт
	
	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию();
	Результат = Бенчмаркинг.Запустить(Тип("БенчмаркСПараметрамиМетода"), Конфигурация);
	НаборыПараметров = Результат.ДескрипторыБенчмарков.ПолучитьПервый().НаборыПараметров();

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Парам1")]).Равно(10);
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Парам2")]).Равно(100);
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Парам1")]).Равно(20);
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Парам2")]).Равно(200);
	Ожидаем.Что(НаборыПараметров[0][0].ЭтоПараметрМетода).ЭтоИстина();

КонецПроцедуры

&Тест
Процедура Тест_ПараметрыМетодаИПоляИзАннотаций() Экспорт
	
	Тип = Тип("БенчмаркСПараметрамиМетодаИПоля");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).ИмеетДлину(4);
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Значение")]).Равно(1);
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Парам")]).Равно(3);
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Значение")]).Равно(1);
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Парам")]).Равно(4);
	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Параметр("Значение")]).Равно(2);
	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Параметр("Парам")]).Равно(3);
	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Параметр("Значение")]).Равно(2);
	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Параметр("Парам")]).Равно(4);

КонецПроцедуры

&Тест
Процедура Тест_УстановкаПараметровМетода() Экспорт
	
	Параметры1 = Новый Массив();
	Параметры1.Добавить(50);
	Параметры1.Добавить(150);

	Параметры2 = Новый Массив();
	Параметры2.Добавить(200);
	Параметры2.Добавить(250);

	Тип = Тип("БенчмаркСПараметрамиМетода");

	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(Тип);
	ДескрипторыБенчмарков.НайтиПоИмени("Бенчмарк")
		.ОчиститьПараметры()
		.ДобавитьПараметры(Параметры1)
		.ДобавитьПараметры(Параметры2);

	Результат = Бенчмаркинг.Запустить(ДескрипторыБенчмарков, ТестированиеБенчмарков.КонфигурацияПоУмолчанию());

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Парам1")]).Равно(50);
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Парам2")]).Равно(150);
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Парам1")]).Равно(200);
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Парам2")]).Равно(250);
	
КонецПроцедуры

&Тест
Процедура Тест_КатегорииИзАннотации() Экспорт

	Тип = Тип("БенчмаркиПоКатегориям");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	ИмяКолонки = КолонкиОтчетаБенчмарков.Категория;

	Ожидаем.Что(Результат.Отчет.Таблица).ИмеетДлину(4);
	Ожидаем.Что(Результат.Отчет.Таблица[0][ИмяКолонки]).Равно("А");
	Ожидаем.Что(Результат.Отчет.Таблица[1][ИмяКолонки]).Равно("А");
	Ожидаем.Что(Результат.Отчет.Таблица[2][ИмяКолонки]).Равно("Б");
	Ожидаем.Что(Результат.Отчет.Таблица[3][ИмяКолонки]).Равно("Б");

КонецПроцедуры

&Тест
Процедура Тест_УстановкаКатегории() Экспорт
	
	Тип = Тип("ПустойБенчмарк");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(Тип);
	ДескрипторыБенчмарков.ПолучитьПервый().УстановитьКатегорию("В");
	
	Результат = Бенчмаркинг.Запустить(ДескрипторыБенчмарков, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).ИмеетДлину(1);
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Категория]).Равно("В");

КонецПроцедуры

&Тест
Процедура Тест_ОпределениеЭталонаПоАннотации() Экспорт

	Тип = Тип("БенчмаркиСЭталоном");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).ИмеетДлину(2);
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Эталон]).ЭтоЛожь();
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.КоэффициентПроизводительности]).Заполнено();
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Эталон]).ЭтоИстина();
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.КоэффициентПроизводительности]).Равно(1);

КонецПроцедуры

&Тест
Процедура Тест_УстановкаЭталона() Экспорт

	Тип = Тип("ПустойБенчмарк");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(Тип);
	ДескрипторыБенчмарков.НайтиПоИмени("Бенчмарк").ИспользоватьКакЭталон();

	Результат = Бенчмаркинг.Запустить(ДескрипторыБенчмарков, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).ИмеетДлину(1);
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Эталон]).ЭтоИстина();
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.КоэффициентПроизводительности]).Равно(1);

КонецПроцедуры

&Тест
Процедура Тест_УстановкаЭталонаВКаждойКатегории() Экспорт
	
	Тип = Тип("БенчмаркиПоКатегориям");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(Тип);
	ДескрипторыБенчмарков.НайтиПоИмени("БенчмаркА1").ИспользоватьКакЭталон();
	ДескрипторыБенчмарков.НайтиПоИмени("БенчмаркБ1").ИспользоватьКакЭталон();

	ПараметрыМетода = Новый Массив();
	ПараметрыМетода.Добавить(Тип);
	ПараметрыМетода.Добавить(Конфигурация);
	ПараметрыМетода.Добавить(ДескрипторыБенчмарков);

	Результат = Бенчмаркинг.Запустить(ДескрипторыБенчмарков, Конфигурация);

	Таблица = Результат.Отчет.Таблица;
	СтрокаА1 = Таблица.Найти("БенчмаркА1", КолонкиОтчетаБенчмарков.Метод);
	СтрокаБ1 = Таблица.Найти("БенчмаркБ1", КолонкиОтчетаБенчмарков.Метод);

	Ожидаем.Что(СтрокаА1[КолонкиОтчетаБенчмарков.Эталон]).ЭтоИстина();
	Ожидаем.Что(СтрокаБ1[КолонкиОтчетаБенчмарков.Эталон]).ЭтоИстина();

КонецПроцедуры

&Тест
Процедура Тест_ЗапретБолееОдногоЭталона() Экспорт

	Тип = Тип("БенчмаркиСЭталоном");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(Тип);
	ДескрипторыБенчмарков.Получить(0).ИспользоватьКакЭталон();
	ДескрипторыБенчмарков.Получить(1).ИспользоватьКакЭталон();
	
	ПараметрыМетода = Новый Массив();
	ПараметрыМетода.Добавить(ДескрипторыБенчмарков);
	ПараметрыМетода.Добавить(Конфигурация);

	Ожидаем
		.Что(Бенчмаркинг)
		.Метод("Запустить", ПараметрыМетода)
		.ВыбрасываетИсключение("Может быть только один эталонный бенчмарк в пределах категории");

КонецПроцедуры

&Тест
Процедура Тест_ЗапретБолееОдногоЭталонаПоКатегории() Экспорт
	
	Тип = Тип("БенчмаркиПоКатегориям");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(Тип);
	ДескрипторыБенчмарков.Получить(0).ИспользоватьКакЭталон(); // А1
	ДескрипторыБенчмарков.Получить(1).ИспользоватьКакЭталон(); // А2

	ПараметрыМетода = Новый Массив();
	ПараметрыМетода.Добавить(ДескрипторыБенчмарков);
	ПараметрыМетода.Добавить(Конфигурация);

	Ожидаем
		.Что(Бенчмаркинг)
		.Метод("Запустить", ПараметрыМетода)
		.ВыбрасываетИсключение("Может быть только один эталонный бенчмарк в пределах категории");

КонецПроцедуры

&Тест
Процедура Тест_ОтсутствиеЭталонаКогдаИменаПараметровНеСовпадают() Экспорт

	Тип = Тип("БенчмаркСЭталономИПараметрами");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	СтрокаБезЭталона = ПроцессорыКоллекций.ИзКоллекции(Результат.РезультатыЗапусков)
		.Фильтровать("Элемент -> Элемент.ДескрипторБенчмарка.Метод() = ""БенчмаркВ""")
		.ПолучитьПервый();

	Ожидаем.Что(СтрокаБезЭталона.Эталон, "Эталон не должен был быть найден").Не_().Заполнено();

КонецПроцедуры

&Тест
Процедура Тест_ОтсутствиеЭталонаКогдаЗначенияПараметровНеСовпадают() Экспорт

	Тип = Тип("БенчмаркСЭталономИПараметрами");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	СтрокаБезЭталона = ПроцессорыКоллекций.ИзКоллекции(Результат.РезультатыЗапусков)
		.Фильтровать("Элемент -> Элемент.ДескрипторБенчмарка.Метод() = ""БенчмаркБ"" И Элемент.Параметры[1].Имя = ""Перем1"" И Элемент.Параметры[1].Значение = 2")
		.ПолучитьПервый();

	Ожидаем.Что(СтрокаБезЭталона, "Не найдена строка бенчмарка ""БенчмаркБ"" со значением параметра 2").Заполнено();
	Ожидаем.Что(СтрокаБезЭталона.Эталон, "Эталон не должен был быть найден").Не_().Заполнено();

КонецПроцедуры

&Тест
Процедура Тест_НаличиеЭталонаКогдаЗначенияПараметровСовпадают() Экспорт

	Тип = Тип("БенчмаркСЭталономИПараметрами");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	// БенчмаркБ
	СтрокаБезЭталона = ПроцессорыКоллекций.ИзКоллекции(Результат.РезультатыЗапусков)
		.Фильтровать("Элемент -> Элемент.ДескрипторБенчмарка.Метод() = ""БенчмаркБ"" И Элемент.Параметры[1].Имя = ""Перем1"" И Элемент.Параметры[1].Значение = 1")
		.ПолучитьПервый();

	Ожидаем.Что(СтрокаБезЭталона, "Не найдена строка бенчмарка ""БенчмаркБ"" со значением параметра 1").Заполнено();
	Ожидаем.Что(СтрокаБезЭталона.Эталон, "Эталон должен был быть найден").Заполнено();

КонецПроцедуры

&Тест
Процедура Тест_СортировкаПоМетоду() Экспорт

	Тип = Тип("БенчмаркиССортировкой");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	Конфигурация.УстановитьСортировкуОтчета(СортировкиОтчетаБенчмарков.Метод);

	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркА");
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);
	
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркА");
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркБ");
	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркБ");
	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

	Ожидаем.Что(Результат.Отчет.Таблица[4][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркВ");
	Ожидаем.Что(Результат.Отчет.Таблица[4][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[5][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркВ");
	Ожидаем.Что(Результат.Отчет.Таблица[5][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

КонецПроцедуры

&Тест
Процедура Тест_СортировкаОтБыстрыхКМедленнымИзАннотации() Экспорт
	
	Тип = Тип("БенчмаркиССортировкой");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Конфигурация.УстановитьСортировкуОтчета(СортировкиОтчетаБенчмарков.ОтБыстрыхКМедленным);

	Обработчик = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеКаждого_УстановкаВремени");
	Конфигурация.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеКаждого, Обработчик);

	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркВ");
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркВ");
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркА");
	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркА");
	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

	Ожидаем.Что(Результат.Отчет.Таблица[4][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркБ");
	Ожидаем.Что(Результат.Отчет.Таблица[4][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[5][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркБ");
	Ожидаем.Что(Результат.Отчет.Таблица[5][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

КонецПроцедуры

&Тест
Процедура Тест_СортировкаОтМедленныхКБыстрым() Экспорт
	
	Тип = Тип("БенчмаркиССортировкой");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Конфигурация.УстановитьСортировкуОтчета(СортировкиОтчетаБенчмарков.ОтМедленныхКБыстрым);

	Обработчик = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеКаждого_УстановкаВремени");
	Конфигурация.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеКаждого, Обработчик);
	
	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркБ");
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркБ");
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркА");
	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркА");
	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

	Ожидаем.Что(Результат.Отчет.Таблица[4][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркВ");
	Ожидаем.Что(Результат.Отчет.Таблица[4][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[5][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркВ");
	Ожидаем.Что(Результат.Отчет.Таблица[5][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

КонецПроцедуры

&Тест
Процедура Тест_СортировкаПоУмолчанию() Экспорт
	
	Тип = Тип("БенчмаркиССортировкой");

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	Конфигурация.УстановитьСортировкуОтчета(СортировкиОтчетаБенчмарков.ПоУмолчанию);

	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркБ");
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркВ");
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркА");
	Ожидаем.Что(Результат.Отчет.Таблица[2][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(1);

	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркБ");
	Ожидаем.Что(Результат.Отчет.Таблица[3][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

	Ожидаем.Что(Результат.Отчет.Таблица[4][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркВ");
	Ожидаем.Что(Результат.Отчет.Таблица[4][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

	Ожидаем.Что(Результат.Отчет.Таблица[5][КолонкиОтчетаБенчмарков.Метод]).Равно("БенчмаркА");
	Ожидаем.Что(Результат.Отчет.Таблица[5][КолонкиОтчетаБенчмарков.Параметр("Параметр")]).Равно(2);

КонецПроцедуры

&Тест
Процедура Тест_ФильтрацияВНабореДескрипторовБенчмарков() Экспорт

	Тип = Тип("БенчмаркиПоКатегориям");

	ДескрипторыБенчмарков = Новый КоллекцияДескрипторовБенчмарков(Тип);
	ДескрипторыБенчмарков.Фильтровать("Элемент -> Прав(Элемент.Метод(), 1) = ""2""");

	Ожидаем.Что(ДескрипторыБенчмарков.ВМассив().Количество()).Равно(2);
	Ожидаем.Что(ДескрипторыБенчмарков.Получить(0).Метод()).Равно("БенчмаркА2");
	Ожидаем.Что(ДескрипторыБенчмарков.Получить(1).Метод()).Равно("БенчмаркБ2");
	
КонецПроцедуры

&Тест
Процедура Тест_ЭкспортВMarkdown() Экспорт
	
	Тип = Тип("ПустойБенчмарк");
	ОбработчикПослеКаждого = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеКаждого_УстановкаВремени");
	ОбработчикПослеВсех = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеВсех_УстановкаМокСредыОкружения");

	ЧтениеТекста = Новый ЧтениеТекста(".\tests\fixtures\verified-report.md", "UTF-8");
	ТекстЭталон = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	Конфигурация.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеКаждого, ОбработчикПослеКаждого);
	Конфигурация.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеВсех, ОбработчикПослеВсех);
	Конфигурация.ДобавитьЭкспортер(ЭкспортерыРезультатовБенчмарков.Markdown);
	
	ПутьКФайлу = ОбъединитьПути(Конфигурация.КаталогАртефактов(), "ПустойБенчмарк-report.md");

	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, "UTF-8");
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Ожидаем.Что(Текст).Равно(ТекстЭталон);
	
КонецПроцедуры

&Тест
Процедура Тест_ЭкспортВJson() Экспорт
	
	Тип = Тип("ПустойБенчмарк");
	ОбработчикПослеКаждого = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеКаждого_УстановкаВремени");
	ОбработчикПослеВсех = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеВсех_УстановкаМокСредыОкружения");

	ЧтениеТекста = Новый ЧтениеТекста(".\tests\fixtures\verified-report.json", "UTF-8");
	ТекстЭталон = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	Конфигурация.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеКаждого, ОбработчикПослеКаждого);
	Конфигурация.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеВсех, ОбработчикПослеВсех);
	Конфигурация.ДобавитьЭкспортер(ЭкспортерыРезультатовБенчмарков.Json);
	
	ПутьКФайлу = ОбъединитьПути(Конфигурация.КаталогАртефактов(), "ПустойБенчмарк-report.json");

	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, "UTF-8");
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Ожидаем.Что(Текст).Равно(ТекстЭталон);
	
КонецПроцедуры

&Тест
Процедура Тест_ЭкспортВXml() Экспорт
	
	Тип = Тип("ПустойБенчмарк");
	ОбработчикПослеКаждого = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеКаждого_УстановкаВремени");
	ОбработчикПослеВсех = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеВсех_УстановкаМокСредыОкружения");

	ЧтениеТекста = Новый ЧтениеТекста(".\tests\fixtures\verified-report.xml", "UTF-8");
	ТекстЭталон = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	Конфигурация.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеКаждого, ОбработчикПослеКаждого);
	Конфигурация.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеВсех, ОбработчикПослеВсех);
	Конфигурация.ДобавитьЭкспортер(ЭкспортерыРезультатовБенчмарков.Xml);
	
	ПутьКФайлу = ОбъединитьПути(Конфигурация.КаталогАртефактов(), "ПустойБенчмарк-report.xml");

	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, "UTF-8");
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Ожидаем.Что(Текст).Равно(ТекстЭталон);
	
КонецПроцедуры

&Тест
Процедура Тест_ЭкспортВHtml() Экспорт
	
	Тип = Тип("ПустойБенчмарк");
	ОбработчикПослеКаждого = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеКаждого_УстановкаВремени");
	ОбработчикПослеВсех = Новый Делегат(ТестированиеБенчмарков, "ОбработчикПослеВсех_УстановкаМокСредыОкружения");

	ЧтениеТекста = Новый ЧтениеТекста(".\tests\fixtures\verified-report.html", "UTF-8");
	ТекстЭталон = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Конфигурация = Новый КонфигурацияБенчмарков(Тип);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	Конфигурация.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеКаждого, ОбработчикПослеКаждого);
	Конфигурация.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеВсех, ОбработчикПослеВсех);
	Конфигурация.ДобавитьЭкспортер(ЭкспортерыРезультатовБенчмарков.Html);
	
	ПутьКФайлу = ОбъединитьПути(Конфигурация.КаталогАртефактов(), "ПустойБенчмарк-report.html");

	Результат = Бенчмаркинг.Запустить(Тип, Конфигурация);

	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, "UTF-8");
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Ожидаем.Что(Текст).Равно(ТекстЭталон);
	
КонецПроцедуры