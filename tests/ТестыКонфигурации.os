// BSLLS:DuplicateStringLiteral-off
// BSLLS:MagicNumber-off

#Использовать asserts
#Использовать fluent
#Использовать "helpers"

&Тест
Процедура Тест_АннотацииКонфигурации() Экспорт
	
	ОбъектБенчмарков = Новый БенчмаркСАннотацямиКонфигурации;
	Конфигурация = Новый КонфигурацияБенчмарков(ОбъектБенчмарков);

	Экспортеры = Конфигурация.Экспортеры();
	КоллекцияЭкспортеры = ПроцессорыКоллекций.ИзКоллекции(Экспортеры);

	ФункцияПоискаЭкспортера = "Экспортер -> ТипЗнч(Экспортер) = Тип(""ЭкспортерРезультатовБенчмарковВ%1"")";

	Ожидаем.Что(Конфигурация.Стратегия()).Равно(СтратегииЗапускаБенчмарка.ХолодныйЗапуск);
	Ожидаем.Что(Конфигурация.СортировкаОтчета()).Равно(СортировкиОтчетаБенчмарков.ОтБыстрыхКМедленным);
	Ожидаем.Что(Конфигурация.ТребуетсяМониторингПамяти()).ЭтоИстина();
	Ожидаем.Что(Конфигурация.КоличествоИтераций()).Равно(100);
	Ожидаем.Что(Конфигурация.КоличествоВызововЗаИтерацию()).Равно(200);
	Ожидаем.Что(Конфигурация.КоличествоПрогревочныхИтераций()).Равно(300);
	Ожидаем.Что(Конфигурация.МинимальноеВремяИтерации()).Равно(400);
	Ожидаем.Что(Конфигурация.МинимальноеКоличествоВызововЗаИтерацию()).Равно(500);
	Ожидаем.Что(Конфигурация.ДелегатыОбработчиковСобытия(СобытияБенчмарков.ПередВсеми, ОбъектБенчмарков)).Заполнено();
	Ожидаем.Что(Конфигурация.ДелегатыОбработчиковСобытия(СобытияБенчмарков.ПослеВсех, ОбъектБенчмарков)).Заполнено();
	Ожидаем.Что(Конфигурация.ДелегатыОбработчиковСобытия(СобытияБенчмарков.ПередКаждым, ОбъектБенчмарков)).Заполнено();
	Ожидаем.Что(Конфигурация.ДелегатыОбработчиковСобытия(СобытияБенчмарков.ПослеКаждого, ОбъектБенчмарков)).Заполнено();
	Ожидаем.Что(Конфигурация.КаталогАртефактов()).Равно("path/to/artifacts");
	Ожидаем.Что(КоллекцияЭкспортеры.ЛюбойСоответствует(СтрШаблон(ФункцияПоискаЭкспортера, "Markdown"))).ЭтоИстина();
	Ожидаем.Что(КоллекцияЭкспортеры.ЛюбойСоответствует(СтрШаблон(ФункцияПоискаЭкспортера, "Json"))).ЭтоИстина();
	Ожидаем.Что(КоллекцияЭкспортеры.ЛюбойСоответствует(СтрШаблон(ФункцияПоискаЭкспортера, "Xml"))).ЭтоИстина();
	Ожидаем.Что(КоллекцияЭкспортеры.ЛюбойСоответствует(СтрШаблон(ФункцияПоискаЭкспортера, "Html"))).ЭтоИстина();

КонецПроцедуры

&Тест
Процедура Тест_ПараметрыПоляИзАннотации() Экспорт
	
	Объект = Новый БенчмаркСПараметрамиПоля();

	Конфигурация = Новый КонфигурацияБенчмарков(Объект);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Результат = Бенчмаркинг.Запустить(Объект, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Значение")]).Равно(10);
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Значение")]).Равно(100);
	
КонецПроцедуры

&Тест
Процедура Тест_УстановкаПараметровПоля() Экспорт
	
	Объект = Новый БенчмаркСПараметрамиПоля();

	Конфигурация = Новый КонфигурацияБенчмарков(Объект)	
		.ОчиститьПараметры()
		.ДобавитьПараметр("Значение", 50)
		.ДобавитьПараметр("Значение", 150);

	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Результат = Бенчмаркинг.Запустить(Объект, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.Параметр("Значение")]).Равно(50);
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.Параметр("Значение")]).Равно(150);
	
КонецПроцедуры

&Тест
Процедура Тест_КоличествоИтераций() Экспорт
	
	КоличествоИтераций = 2;

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию();
	Конфигурация.УстановитьКоличествоИтераций(КоличествоИтераций);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.РезультатыЗапусков[0].Замеры.Количество()).Равно(КоличествоИтераций);

КонецПроцедуры

&Тест
Процедура Тест_КоличествоВызововЗаИтерацию() Экспорт
	
	КоличествоВызововЗаИтерацию = 2;

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ПропускнаяСпособность)
		.УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.РезультатыЗапусков[0].Замеры[0].КоличествоОпераций).Равно(КоличествоВызововЗаИтерацию);

КонецПроцедуры

&Тест
Процедура Тест_КоличествоПрогревочныхИтераций() Экспорт
	
	КоличествоПрогревочныхИтераций = 2;

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ПропускнаяСпособность)
		.УстановитьКоличествоПрогревочныхИтераций(КоличествоПрогревочныхИтераций);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Конфигурация.КоличествоПрогревочныхИтераций()).Равно(КоличествоПрогревочныхИтераций);
	
КонецПроцедуры

&Тест
Процедура Тест_МинимальноеВремяИтерации() Экспорт
	
	МинимальноеВремяИтерации = 50;
	КоличествоВызововЗаИтерацию = 0;

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ПропускнаяСпособность)
		.УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию)
		.УстановитьМинимальноеВремяИтерации(МинимальноеВремяИтерации);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Конфигурация.МинимальноеВремяИтерации()).Равно(МинимальноеВремяИтерации);

КонецПроцедуры

&Тест
Процедура Тест_МинимальноеКоличествоВызововЗаИтерацию() Экспорт
	
	КоличествоВызововЗаИтерацию = 0;
	МинимальноеКоличествоВызововЗаИтерацию = 10;

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ПропускнаяСпособность)
		.УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию)
		.УстановитьМинимальноеКоличествоВызововЗаИтерацию(МинимальноеКоличествоВызововЗаИтерацию);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();

	Ожидаем
		.Что(Результат.Конфигурация.МинимальноеКоличествоВызововЗаИтерацию())
		.Равно(МинимальноеКоличествоВызововЗаИтерацию);

КонецПроцедуры

&Тест
Процедура Тест_СтратегияПропускнаяСпособность() Экспорт

	КоличествоВызововЗаИтерацию = 2;
	
	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ПропускнаяСпособность)
		.УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.РезультатыЗапусков[0].Замеры[0].КоличествоОпераций).Равно(КоличествоВызововЗаИтерацию);

КонецПроцедуры

&Тест
Процедура Тест_СтратегияХолодныйЗапуск() Экспорт
	
	КоличествоВызововЗаИтерацию = 2;

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ХолодныйЗапуск)
		.УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.РезультатыЗапусков[0].Замеры[0].КоличествоОпераций).Равно(1);

КонецПроцедуры

&Тест
Процедура Тест_ВалидацияКоличестваИтераций() Экспорт

	НевалидныеЗначения = Новый Массив();
	НевалидныеЗначения.Добавить(0);
	НевалидныеЗначения.Добавить(-10);

	ТекстОшибки = "Количество итераций не может быть меньше 1";
	
	Конфигурация = Новый КонфигурацияБенчмарков();

	Для Каждого НевалидноеЗначение Из НевалидныеЗначения Цикл

		Параметры = Новый Массив();
		Параметры.Добавить(НевалидноеЗначение);

		Ожидаем.Что(Конфигурация).Метод("УстановитьКоличествоИтераций", Параметры).ВыбрасываетИсключение(ТекстОшибки);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Тест_ВалидацияКоличестваВызововЗаИтерацию() Экспорт

	НевалидныеЗначения = Новый Массив();
	НевалидныеЗначения.Добавить(-10);

	ТекстОшибки = "Количество вызовов за итерацию не может быть меньше 0";
	
	Конфигурация = Новый КонфигурацияБенчмарков();

	Для Каждого НевалидноеЗначение Из НевалидныеЗначения Цикл

		Параметры = Новый Массив();
		Параметры.Добавить(НевалидноеЗначение);

		Ожидаем
			.Что(Конфигурация)
			.Метод("УстановитьКоличествоВызововЗаИтерацию", Параметры)
			.ВыбрасываетИсключение(ТекстОшибки);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Тест_ВалидацияКоличестваИтерацийПрогрева() Экспорт

	НевалидныеЗначения = Новый Массив();
	НевалидныеЗначения.Добавить(-10);

	ТекстОшибки = "Количество прогревочных итераций не может быть меньше 0";
	
	Конфигурация = Новый КонфигурацияБенчмарков();

	Для Каждого НевалидноеЗначение Из НевалидныеЗначения Цикл

		Параметры = Новый Массив();
		Параметры.Добавить(НевалидноеЗначение);

		Ожидаем
			.Что(Конфигурация)
			.Метод("УстановитьКоличествоПрогревочныхИтераций", Параметры)
			.ВыбрасываетИсключение(ТекстОшибки);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Тест_ВалидацияМинимальногоВремениИтерации() Экспорт

	НевалидныеЗначения = Новый Массив();
	НевалидныеЗначения.Добавить(0);
	НевалидныеЗначения.Добавить(-10);

	ТекстОшибки = "Минимальное время итерации не может быть меньше 1 мс";
	
	Конфигурация = Новый КонфигурацияБенчмарков();

	Для Каждого НевалидноеЗначение Из НевалидныеЗначения Цикл

		Параметры = Новый Массив();
		Параметры.Добавить(НевалидноеЗначение);

		Ожидаем.Что(Конфигурация).Метод("УстановитьМинимальноеВремяИтерации", Параметры).ВыбрасываетИсключение(ТекстОшибки);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Тест_ВалидацияМинимальногоКоличестваВызововЗаИтерацию() Экспорт

	НевалидныеЗначения = Новый Массив();
	НевалидныеЗначения.Добавить(0);
	НевалидныеЗначения.Добавить(-10);

	ТекстОшибки = "Минимальное количество вызовов за итерацию не может быть меньше 1";
	
	Конфигурация = Новый КонфигурацияБенчмарков();

	Для Каждого НевалидноеЗначение Из НевалидныеЗначения Цикл

		Параметры = Новый Массив();
		Параметры.Добавить(НевалидноеЗначение);

		Ожидаем
			.Что(Конфигурация)
			.Метод("УстановитьМинимальноеКоличествоВызововЗаИтерацию", Параметры)
			.ВыбрасываетИсключение(ТекстОшибки);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Тест_УстановкаМониторингаПамяти() Экспорт
	
	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию();
	Конфигурация.ДобавитьМониторингПамяти();

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Отчет.Таблица[0]["ВыделяемаяПамять"]).Заполнено();
	Ожидаем.Что(Результат.Конфигурация.ТребуетсяМониторингПамяти()).ЭтоИстина();
	
КонецПроцедуры

&Тест
Процедура Тест_ВызовОбработчиковСобытий() Экспорт

	ОбъектБенчмарков = Новый БенчмаркСОбработчикамиСобытий();

	Конфигурация = Новый КонфигурацияБенчмарков(ОбъектБенчмарков);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Параметры = Новый Массив();
	Параметры.Добавить(ОбъектБенчмарков);
	Параметры.Добавить(Конфигурация);

	Ожидаем.Что(Бенчмаркинг).Метод("Запустить", Параметры).Не_().ВыбрасываетИсключение();
	Ожидаем.Что(ОбъектБенчмарков.События).ИмеетДлину(4);

КонецПроцедуры

&Тест
Процедура Тест_ВызовОбработчикаСобытияБезПараметров() Экспорт

	ОбъектБенчмарков = Новый БенчмаркСОбработчикамиСобытий();

	Конфигурация = Новый КонфигурацияБенчмарков(ОбъектБенчмарков);
	Конфигурация.УдалитьОбработчикиСобытия(СобытияБенчмарков.ПередКаждым);
	Конфигурация.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПередКаждым, "ПередЗапускомБезПараметров");

	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Бенчмаркинг.Запустить(ОбъектБенчмарков, Конфигурация);

	События = ОбъектБенчмарков.События;
	Ожидаем.Что(События).Содержит("ПередЗапускомБезПараметров");
	Ожидаем.Что(События).Не_().Содержит("ПередКаждым");

КонецПроцедуры

&Тест
Процедура Тест_ВызовНесколькихОбработчиковОдногоСобытия() Экспорт

	ОбъектБенчмарков = Новый БенчмаркСОбработчикамиСобытий();

	Конфигурация = Новый КонфигурацияБенчмарков(ОбъектБенчмарков);
	Конфигурация.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПередКаждым, "ПередЗапускомБезПараметров");

	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Бенчмаркинг.Запустить(ОбъектБенчмарков, Конфигурация);

	События = ОбъектБенчмарков.События;
	Ожидаем.Что(События).Содержит("ПередКаждым");
	Ожидаем.Что(События).Содержит("ПередЗапускомБезПараметров");

КонецПроцедуры

&Тест
Процедура Тест_УдалениеОбработчикаСобытия() Экспорт

	ОбъектБенчмарков = Новый БенчмаркСОбработчикамиСобытий();

	Конфигурация = Новый КонфигурацияБенчмарков(ОбъектБенчмарков);
	Конфигурация.УдалитьОбработчикиСобытия(СобытияБенчмарков.ПередКаждым);

	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Бенчмаркинг.Запустить(ОбъектБенчмарков, Конфигурация);

	События = ОбъектБенчмарков.События;
	Ожидаем.Что(События).Не_().Содержит("ПередКаждым");
	Ожидаем.Что(События).ИмеетДлину(3);

КонецПроцедуры

&Тест
Процедура Тест_КолонкиИзАннотации() Экспорт
	
	Объект = Новый БенчмаркиСКолонками();

	ПереченьКолонок = "Мин, Макс, Медиана, НижнийКвартиль, ВерхнийКвартиль, RatioSD";
	Колонки = СтрРазделить(ПереченьКолонок, ", ", Ложь);
	
	Конфигурация = Новый КонфигурацияБенчмарков(Объект);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Результат = Бенчмаркинг.Запустить(Объект, Конфигурация);
	ТаблицаОтчета = Результат.Отчет.Таблица;

	Для Каждого ИмяКолонки Из Колонки Цикл
		Ожидаем.Что(ТаблицаОтчета.Колонки.Найти(ИмяКолонки), ИмяКолонки).Не_().ЭтоНеопределено();
	КонецЦикла;
	
КонецПроцедуры

&Тест
Процедура Тест_ДобавлениеКолонок() Экспорт
	
	Объект = Новый ПустойБенчмарк();

	ПереченьКолонок = "Мин, Макс, Медиана, НижнийКвартиль, ВерхнийКвартиль, RatioSD";
	Колонки = СтрРазделить(ПереченьКолонок, ", ", Ложь);
	
	Конфигурация = Новый КонфигурацияБенчмарков(Объект);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Для Каждого ИмяКолонки Из Колонки Цикл
		Конфигурация.ДобавитьКолонку(КолонкиОтчетаБенчмарков[ИмяКолонки]);
	КонецЦикла;

	Результат = Бенчмаркинг.Запустить(Объект, Конфигурация);
	ТаблицаОтчета = Результат.Отчет.Таблица;

	Для Каждого ИмяКолонки Из Колонки Цикл
		Ожидаем.Что(ТаблицаОтчета.Колонки.Найти(ИмяКолонки)).Не_().ЭтоНеопределено();
		Ожидаем.Что(ТаблицаОтчета[0][КолонкиОтчетаБенчмарков[ИмяКолонки]]).Заполнено();
	КонецЦикла;
	
КонецПроцедуры

&Тест
Процедура Тест_ДобавлениеОдинаковыхКолонок() Экспорт
	
	Объект = Новый ПустойБенчмарк();

	ИмяКолонки = КолонкиОтчетаБенчмарков.Мин;
	
	Конфигурация = Новый КонфигурацияБенчмарков(Объект);
	Конфигурация.ДобавитьКолонку(ИмяКолонки);
	Конфигурация.ДобавитьКолонку(ИмяКолонки);

	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Результат = Бенчмаркинг.Запустить(Объект, Конфигурация);
	ТаблицаОтчета = Результат.Отчет.Таблица;

	Ожидаем.Что(ТаблицаОтчета.Колонки.Найти(ИмяКолонки)).Не_().ЭтоНеопределено();
	Ожидаем.Что(ТаблицаОтчета[0][ИмяКолонки]).Заполнено();
	
КонецПроцедуры

&Тест
Процедура Тест_УдалениеКолонок() Экспорт
	
	Колонка = КолонкиОтчетаБенчмарков.Мин;
	Объект = Новый БенчмаркиСКолонками();

	Конфигурация = Новый КонфигурацияБенчмарков(Объект);
	Конфигурация.УдалитьКолонку(Колонка);

	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Результат = Бенчмаркинг.Запустить(Объект, Конфигурация);
	ТаблицаОтчета = Результат.Отчет.Таблица;

	Ожидаем.Что(ТаблицаОтчета.Колонки.Найти(Колонка)).ЭтоНеопределено();
	
КонецПроцедуры

&Тест
Процедура Тест_КолонкиПроцентилейИзАннотации() Экспорт
	
	Объект = Новый БенчмаркиСКолонками();

	Конфигурация = Новый КонфигурацияБенчмарков(Объект);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Результат = Бенчмаркинг.Запустить(Объект, Конфигурация);
	ТаблицаОтчета = Результат.Отчет.Таблица;

	КолонкаПроцентиль10 = КолонкиОтчетаБенчмарков.Процентиль(10);
	КолонкаПроцентиль80 = КолонкиОтчетаБенчмарков.Процентиль(80);
	
	Ожидаем.Что(ТаблицаОтчета.Колонки.Найти(КолонкаПроцентиль10)).Не_().ЭтоНеопределено();
	Ожидаем.Что(ТаблицаОтчета[0][КолонкаПроцентиль10]).Заполнено();
	
	Ожидаем.Что(ТаблицаОтчета.Колонки.Найти(КолонкаПроцентиль80)).Не_().ЭтоНеопределено();
	Ожидаем.Что(ТаблицаОтчета[0][КолонкаПроцентиль80]).Заполнено();
	
КонецПроцедуры

&Тест
Процедура Тест_ДобавлениеКолонкиПроцентилей() Экспорт
	
	Объект = Новый ПустойБенчмарк();

	Конфигурация = Новый КонфигурацияБенчмарков(Объект);
	Конфигурация.ДобавитьКолонку(КолонкиОтчетаБенчмарков.Процентиль(10));
	Конфигурация.ДобавитьКолонку(КолонкиОтчетаБенчмарков.Процентиль(80));

	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Результат = Бенчмаркинг.Запустить(Объект, Конфигурация);
	ТаблицаОтчета = Результат.Отчет.Таблица;

	КолонкаПроцентиль10 = КолонкиОтчетаБенчмарков.Процентиль(10);
	КолонкаПроцентиль80 = КолонкиОтчетаБенчмарков.Процентиль(80);
	
	Ожидаем.Что(ТаблицаОтчета.Колонки.Найти(КолонкаПроцентиль10)).Не_().ЭтоНеопределено();
	Ожидаем.Что(ТаблицаОтчета[0][КолонкаПроцентиль10]).Заполнено();
	
	Ожидаем.Что(ТаблицаОтчета.Колонки.Найти(КолонкаПроцентиль80)).Не_().ЭтоНеопределено();
	Ожидаем.Что(ТаблицаОтчета[0][КолонкаПроцентиль80]).Заполнено();
	
КонецПроцедуры

&Тест
Процедура Тест_ДобавлениеКолонкиПроцентилейПоУмолчанию() Экспорт
	
	Объект = Новый ПустойБенчмарк();

	Конфигурация = Новый КонфигурацияБенчмарков(Объект);
	Конфигурация.ДобавитьКолонку(КолонкиОтчетаБенчмарков.Процентиль);

	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Результат = Бенчмаркинг.Запустить(Объект, Конфигурация);
	ТаблицаОтчета = Результат.Отчет.Таблица;

	Для Каждого Процентиль Из КолонкаОтчетаБенчмарковПроцентиль.ПроцентилиПоУмолчанию() Цикл
		ИмяКолонки = КолонкиОтчетаБенчмарков.Процентиль(Процентиль);
		Ожидаем.Что(ТаблицаОтчета.Колонки.Найти(ИмяКолонки)).Не_().ЭтоНеопределено();
		Ожидаем.Что(ТаблицаОтчета[0][ИмяКолонки]).Заполнено();
	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Тест_ДобавлениеКолонкиПроцентилейПоУмолчаниюИПроизвольная() Экспорт
	
	Объект = Новый ПустойБенчмарк();

	Конфигурация = Новый КонфигурацияБенчмарков(Объект);
	Конфигурация.ДобавитьКолонку(КолонкиОтчетаБенчмарков.Процентиль);
	Конфигурация.ДобавитьКолонку(КолонкиОтчетаБенчмарков.Процентиль(33));

	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Результат = Бенчмаркинг.Запустить(Объект, Конфигурация);
	ТаблицаОтчета = Результат.Отчет.Таблица;

	Процентили = КолонкаОтчетаБенчмарковПроцентиль.ПроцентилиПоУмолчанию();
	Процентили.Добавить(33);

	Для Каждого Процентиль Из КолонкаОтчетаБенчмарковПроцентиль.ПроцентилиПоУмолчанию() Цикл
		ИмяКолонки = КолонкиОтчетаБенчмарков.Процентиль(Процентиль);
		Ожидаем.Что(ТаблицаОтчета.Колонки.Найти(ИмяКолонки)).Не_().ЭтоНеопределено();
		Ожидаем.Что(ТаблицаОтчета[0][ИмяКолонки]).Заполнено();
	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Тест_УстановкаКаталогаАртефактов() Экспорт
	
	Каталог = "path/to/artifacts";
	
	Конфигурация = Новый КонфигурацияБенчмарков();
	Конфигурация.УстановитьКаталогАртефактов(Каталог);

	Ожидаем.Что(Конфигурация.КаталогАртефактов()).Равно(Каталог);

КонецПроцедуры

&Тест
Процедура Тест_ДобавлениеЭкспортера() Экспорт
	
	Экспортер = ЭкспортерыРезультатовБенчмарков.Markdown;

	Конфигурация = Новый КонфигурацияБенчмарков();
	Конфигурация.ДобавитьЭкспортер(Экспортер);

	Ожидаем.Что(Конфигурация.Экспортеры()).Содержит(Экспортер);

КонецПроцедуры

&Тест
Процедура Тест_УдалениеВсехЭкспортеров() Экспорт
	
	Экспортер = ЭкспортерыРезультатовБенчмарков.Markdown;

	Конфигурация = Новый КонфигурацияБенчмарков();
	Конфигурация.ДобавитьЭкспортер(Экспортер);
	Конфигурация.УдалитьЭкспортеры();

	Ожидаем.Что(Конфигурация.Экспортеры()).ИмеетДлину(0);

КонецПроцедуры

&Тест
Процедура Тест_ОбъединениеКонфигурацииПустойСПолностьюЗаполненной() Экспорт

	ПередаваемаяКонфигурация = Новый КонфигурацияБенчмарков()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ХолодныйЗапуск)
		.УстановитьКоличествоИтераций(111)
		.УстановитьКоличествоВызововЗаИтерацию(111)
		.УстановитьКоличествоПрогревочныхИтераций(111)
		.УстановитьМинимальноеВремяИтерации(111)
		.УстановитьМинимальноеКоличествоВызововЗаИтерацию(111)
		.УстановитьСортировкуОтчета(СортировкиОтчетаБенчмарков.ОтБыстрыхКМедленным)
		.УстановитьКаталогАртефактов("path")
		.ДобавитьМониторингПамяти()
		.ДобавитьПараметр("col1", 111)
		.ДобавитьПараметр("col2", 222)
		.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПередВсеми, "Обработчик1")
		.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеКаждого, "Обработчик2")
		.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеКаждого, "Обработчик3")
		.ДобавитьКолонку(КолонкиОтчетаБенчмарков.НижнийКвартиль)
		.ДобавитьКолонку(КолонкиОтчетаБенчмарков.ВерхнийКвартиль)
		.ДобавитьЭкспортер(ЭкспортерыРезультатовБенчмарков.Json)
		.ДобавитьЭкспортер(ЭкспортерыРезультатовБенчмарков.Html);

	НоваяКонфигурация = Новый КонфигурацияБенчмарков()
		.Объединить(ПередаваемаяКонфигурация);

	Ожидаем.Что(НоваяКонфигурация.Стратегия(), "Стратегия").Равно(СтратегииЗапускаБенчмарка.ХолодныйЗапуск);
	Ожидаем.Что(НоваяКонфигурация.КоличествоИтераций(), "Количество итераций").Равно(111);
	Ожидаем.Что(НоваяКонфигурация.КоличествоВызововЗаИтерацию(), "Количество вызовов за итерацию").Равно(111);
	Ожидаем.Что(НоваяКонфигурация.КоличествоПрогревочныхИтераций(), "Количество прогревочных итераций").Равно(111);
	Ожидаем.Что(НоваяКонфигурация.МинимальноеВремяИтерации(), "Минимальное время итерации").Равно(111);
	Ожидаем.Что(НоваяКонфигурация.МинимальноеКоличествоВызововЗаИтерацию(), "Минимальное количество вызовов за итерацию").Равно(111);
	Ожидаем.Что(НоваяКонфигурация.СортировкаОтчета(), "Сортировка отчета").Равно(СортировкиОтчетаБенчмарков.ОтБыстрыхКМедленным);
	Ожидаем.Что(НоваяКонфигурация.Параметры()[0].Имя, "Параметры").Равно("col1");
	Ожидаем.Что(НоваяКонфигурация.Параметры()[1].Имя, "Параметры").Равно("col2");
	Ожидаем.Что(НоваяКонфигурация.ОбработчикиСобытий()[СобытияБенчмарков.ПередВсеми], "Обработчики событий").Содержит("Обработчик1");
	Ожидаем.Что(НоваяКонфигурация.ОбработчикиСобытий()[СобытияБенчмарков.ПослеКаждого], "Обработчики событий").Содержит("Обработчик2");
	Ожидаем.Что(НоваяКонфигурация.ОбработчикиСобытий()[СобытияБенчмарков.ПослеКаждого], "Обработчики событий").Содержит("Обработчик3");
	Ожидаем.Что(НоваяКонфигурация.Колонки(), "Колонки").Содержит(КолонкиОтчетаБенчмарков.НижнийКвартиль);
	Ожидаем.Что(НоваяКонфигурация.Колонки(), "Колонки").Содержит(КолонкиОтчетаБенчмарков.ВерхнийКвартиль);
	Ожидаем.Что(НоваяКонфигурация.Экспортеры(), "Экспортеры").Содержит(ЭкспортерыРезультатовБенчмарков.Json);
	Ожидаем.Что(НоваяКонфигурация.Экспортеры(), "Экспортеры").Содержит(ЭкспортерыРезультатовБенчмарков.Html);

КонецПроцедуры

&Тест
Процедура Тест_ОбъединениеЗаполненныхКонфигураций() Экспорт

	КонфигурацияПриемник = Новый КонфигурацияБенчмарков()
		.УстановитьКоличествоИтераций(111)
		.УстановитьКоличествоВызововЗаИтерацию(111)
		.ДобавитьКолонку(КолонкиОтчетаБенчмарков.НижнийКвартиль)
		.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПередВсеми, "Обработчик1");

	КонфигурацияИсточник = Новый КонфигурацияБенчмарков()
		.УстановитьКоличествоИтераций(222)
		.ДобавитьКолонку(КолонкиОтчетаБенчмарков.ВерхнийКвартиль)
		.ДобавитьЭкспортер(ЭкспортерыРезультатовБенчмарков.Html)
		.ДобавитьОбработчикСобытия(СобытияБенчмарков.ПослеВсех, "Обработчик2");

	КонфигурацияПриемник.Объединить(КонфигурацияИсточник);

	Ожидаем.Что(КонфигурацияПриемник.КоличествоИтераций(), "Количество итераций").Равно(222);
	Ожидаем.Что(КонфигурацияПриемник.КоличествоВызововЗаИтерацию(), "Количество вызовов за итерацию").Равно(111);
	Ожидаем.Что(КонфигурацияПриемник.КоличествоПрогревочныхИтераций(), "Количество прогревочных итераций").Равно(6);
	Ожидаем.Что(КонфигурацияПриемник.Колонки(), "Колонки").ИмеетДлину(1);
	Ожидаем.Что(КонфигурацияПриемник.Колонки(), "Колонки").Содержит(КолонкиОтчетаБенчмарков.ВерхнийКвартиль);
	Ожидаем.Что(КонфигурацияПриемник.Экспортеры(), "Экспортеры").Содержит(ЭкспортерыРезультатовБенчмарков.Html);
	Ожидаем.Что(КонфигурацияПриемник.ОбработчикиСобытий()[СобытияБенчмарков.ПередВсеми], "Обработчики событий").ЭтоНеопределено();
	Ожидаем.Что(КонфигурацияПриемник.ОбработчикиСобытий()[СобытияБенчмарков.ПослеВсех], "Обработчики событий").Содержит("Обработчик2");

КонецПроцедуры

&Тест
Процедура Тест_ОбъединениехКонфигурацийНаДефолтноеЗначение() Экспорт

	КоличествоИтерацийПоУмолчанию = 15;

	КонфигурацияПриемник = Новый КонфигурацияБенчмарков()
		.УстановитьКоличествоИтераций(111)
		.УстановитьКоличествоВызововЗаИтерацию(111)
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ХолодныйЗапуск);

	КонфигурацияИсточник = Новый КонфигурацияБенчмарков()
		.УстановитьКоличествоИтераций(КоличествоИтерацийПоУмолчанию)
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ПропускнаяСпособность);

	КонфигурацияПриемник.Объединить(КонфигурацияИсточник);

	Ожидаем.Что(КонфигурацияПриемник.КоличествоИтераций(), "Количество итераций").Равно(КоличествоИтерацийПоУмолчанию);
	Ожидаем.Что(КонфигурацияПриемник.КоличествоВызововЗаИтерацию(), "Количество вызовов за итерацию").Равно(111);
	Ожидаем.Что(КонфигурацияПриемник.Стратегия(), "Стратегия").Равно(СтратегииЗапускаБенчмарка.ПропускнаяСпособность);

КонецПроцедуры