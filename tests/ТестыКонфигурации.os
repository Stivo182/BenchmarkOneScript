// BSLLS:DuplicateStringLiteral-off
// BSLLS:MagicNumber-off

#Использовать asserts
#Использовать "helpers"

&Тест
Процедура Тест_АннотацииКонфигурации() Экспорт
	
	Конфигурация = ИзвлекательКонфигурацииБенчмарков.Извлечь(Новый БенчмаркСАннотацямиКонфигурации());

	Ожидаем.Что(Конфигурация.Стратегия()).Равно(СтратегииЗапускаБенчмарка.ХолодныйЗапуск);
	Ожидаем.Что(Конфигурация.СортировкаОтчета()).Равно(СортировкиОтчетаБенчмарков.ОтБыстрыхКМедленным);
	Ожидаем.Что(Конфигурация.ТребуетсяМониторингПамяти()).ЭтоИстина();
	Ожидаем.Что(Конфигурация.КоличествоИтераций()).Равно(100);
	Ожидаем.Что(Конфигурация.КоличествоВызововЗаИтерацию()).Равно(200);
	Ожидаем.Что(Конфигурация.КоличествоПрогревочныхИтераций()).Равно(300);
	Ожидаем.Что(Конфигурация.МинимальноеВремяИтерации()).Равно(400);
	Ожидаем.Что(Конфигурация.МинимальноеКоличествоВызововЗаИтерацию()).Равно(500);
	Ожидаем.Что(Конфигурация.ОбработчикСобытия("ПередВсеми")).Заполнено();
	Ожидаем.Что(Конфигурация.ОбработчикСобытия("ПослеВсех")).Заполнено();
	Ожидаем.Что(Конфигурация.ОбработчикСобытия("ПередКаждым")).Заполнено();
	Ожидаем.Что(Конфигурация.ОбработчикСобытия("ПослеКаждого")).Заполнено();

КонецПроцедуры

&Тест
Процедура Тест_ПараметрыПоляИзАннотации() Экспорт
	
	Объект = Новый БенчмаркСПараметрамиПоля();

	Конфигурация = ИзвлекательКонфигурацииБенчмарков.Извлечь(Объект);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Результат = Бенчмаркинг.Запустить(Объект, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.ИмяКолонкиПараметр("Значение")]).Равно(10);
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.ИмяКолонкиПараметр("Значение")]).Равно(100);
	
КонецПроцедуры

&Тест
Процедура Тест_УстановкаПараметровПоля() Экспорт
	
	Объект = Новый БенчмаркСПараметрамиПоля();

	Конфигурация = ИзвлекательКонфигурацииБенчмарков
		.Извлечь(Объект)	
		.ОчиститьПараметры()
		.ДобавитьПараметр("Значение", 50)
		.ДобавитьПараметр("Значение", 150);

	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Результат = Бенчмаркинг.Запустить(Объект, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Отчет.Таблица[0][КолонкиОтчетаБенчмарков.ИмяКолонкиПараметр("Значение")]).Равно(50);
	Ожидаем.Что(Результат.Отчет.Таблица[1][КолонкиОтчетаБенчмарков.ИмяКолонкиПараметр("Значение")]).Равно(150);
	
КонецПроцедуры

&Тест
Процедура Тест_КоличествоИтераций() Экспорт
	
	КоличествоИтераций = 2;

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию();
	Конфигурация.УстановитьКоличествоИтераций(КоличествоИтераций);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.РезультатыЗапусков[0].Замеры.Количество()).Равно(КоличествоИтераций);

КонецПроцедуры

&Тест
Процедура Тест_КоличествоВызововЗаИтерацию() Экспорт
	
	КоличествоВызововЗаИтерацию = 2;

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ПропускнаяСпособность)
		.УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.РезультатыЗапусков[0].Замеры[0].КоличествоОпераций).Равно(КоличествоВызововЗаИтерацию);

КонецПроцедуры

&Тест
Процедура Тест_КоличествоПрогревочныхИтераций() Экспорт
	
	КоличествоПрогревочныхИтераций = 2;

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ПропускнаяСпособность)
		.УстановитьКоличествоПрогревочныхИтераций(КоличествоПрогревочныхИтераций);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Конфигурация.КоличествоПрогревочныхИтераций()).Равно(КоличествоПрогревочныхИтераций);
	
КонецПроцедуры

&Тест
Процедура Тест_МинимальноеВремяИтераци() Экспорт
	
	МинимальноеВремяИтерации = 50;
	КоличествоВызововЗаИтерацию = 0;

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ПропускнаяСпособность)
		.УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию)
		.УстановитьМинимальноеВремяИтерации(МинимальноеВремяИтерации);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Конфигурация.МинимальноеВремяИтерации()).Равно(МинимальноеВремяИтерации);

КонецПроцедуры

&Тест
Процедура Тест_МинимальноеКоличествоВызововЗаИтерацию() Экспорт
	
	КоличествоВызововЗаИтерацию = 0;
	МинимальноеКоличествоВызововЗаИтерацию = 10;

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ПропускнаяСпособность)
		.УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию)
		.УстановитьМинимальноеКоличествоВызововЗаИтерацию(МинимальноеКоличествоВызововЗаИтерацию);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();

	Ожидаем
		.Что(Результат.Конфигурация.МинимальноеКоличествоВызововЗаИтерацию())
		.Равно(МинимальноеКоличествоВызововЗаИтерацию);

КонецПроцедуры

&Тест
Процедура Тест_СтратегияПропускнаяСпособность() Экспорт

	КоличествоВызововЗаИтерацию = 2;
	
	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ПропускнаяСпособность)
		.УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.РезультатыЗапусков[0].Замеры[0].КоличествоОпераций).Равно(КоличествоВызововЗаИтерацию);

КонецПроцедуры

&Тест
Процедура Тест_СтратегияХолодныйЗапуск() Экспорт
	
	КоличествоВызововЗаИтерацию = 2;

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ХолодныйЗапуск)
		.УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.РезультатыЗапусков[0].Замеры[0].КоличествоОпераций).Равно(1);

КонецПроцедуры

&Тест
Процедура Тест_ВалидацияКоличестваИтераций() Экспорт

	НевалидныеЗначения = Новый Массив();
	НевалидныеЗначения.Добавить(0);
	НевалидныеЗначения.Добавить(-10);

	ТекстОшибки = "Количество итераций не может быть меньше 1";
	
	Конфигурация = Новый КонфигурацияБенчмарков();

	Для Каждого НевалидноеЗначение Из НевалидныеЗначения Цикл

		Параметры = Новый Массив();
		Параметры.Добавить(НевалидноеЗначение);

		Ожидаем.Что(Конфигурация).Метод("УстановитьКоличествоИтераций", Параметры).ВыбрасываетИсключение(ТекстОшибки);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Тест_ВалидацияКоличестваВызововЗаИтерацию() Экспорт

	НевалидныеЗначения = Новый Массив();
	НевалидныеЗначения.Добавить(-10);

	ТекстОшибки = "Количество вызовов за итерацию не может быть меньше 0";
	
	Конфигурация = Новый КонфигурацияБенчмарков();

	Для Каждого НевалидноеЗначение Из НевалидныеЗначения Цикл

		Параметры = Новый Массив();
		Параметры.Добавить(НевалидноеЗначение);

		Ожидаем
			.Что(Конфигурация)
			.Метод("УстановитьКоличествоВызововЗаИтерацию", Параметры)
			.ВыбрасываетИсключение(ТекстОшибки);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Тест_ВалидацияКоличестваИтерацийПрогрева() Экспорт

	НевалидныеЗначения = Новый Массив();
	НевалидныеЗначения.Добавить(-10);

	ТекстОшибки = "Количество прогревочных итераций не может быть меньше 0";
	
	Конфигурация = Новый КонфигурацияБенчмарков();

	Для Каждого НевалидноеЗначение Из НевалидныеЗначения Цикл

		Параметры = Новый Массив();
		Параметры.Добавить(НевалидноеЗначение);

		Ожидаем
			.Что(Конфигурация)
			.Метод("УстановитьКоличествоПрогревочныхИтераций", Параметры)
			.ВыбрасываетИсключение(ТекстОшибки);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Тест_ВалидацияМинимальногоВремениИтерации() Экспорт

	НевалидныеЗначения = Новый Массив();
	НевалидныеЗначения.Добавить(0);
	НевалидныеЗначения.Добавить(-10);

	ТекстОшибки = "Минимальное время итерации не может быть меньше 1 мс";
	
	Конфигурация = Новый КонфигурацияБенчмарков();

	Для Каждого НевалидноеЗначение Из НевалидныеЗначения Цикл

		Параметры = Новый Массив();
		Параметры.Добавить(НевалидноеЗначение);

		Ожидаем.Что(Конфигурация).Метод("УстановитьМинимальноеВремяИтерации", Параметры).ВыбрасываетИсключение(ТекстОшибки);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Тест_ВалидацияМинимальногоКоличестваВызововЗаИтерацию() Экспорт

	НевалидныеЗначения = Новый Массив();
	НевалидныеЗначения.Добавить(0);
	НевалидныеЗначения.Добавить(-10);

	ТекстОшибки = "Минимальное количество вызовов за итерацию не может быть меньше 1";
	
	Конфигурация = Новый КонфигурацияБенчмарков();

	Для Каждого НевалидноеЗначение Из НевалидныеЗначения Цикл

		Параметры = Новый Массив();
		Параметры.Добавить(НевалидноеЗначение);

		Ожидаем
			.Что(Конфигурация)
			.Метод("УстановитьМинимальноеКоличествоВызововЗаИтерацию", Параметры)
			.ВыбрасываетИсключение(ТекстОшибки);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Тест_УстановкаМониторингаПамяти() Экспорт
	
	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию();
	Конфигурация.ДобавитьМониторингПамяти();

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Отчет.Таблица[0]["ВыделяемаяПамять"]).Заполнено();
	Ожидаем.Что(Результат.Конфигурация.ТребуетсяМониторингПамяти()).ЭтоИстина();
	
КонецПроцедуры

&Тест
Процедура Тест_ПроверкаОбработчиковСобытий() Экспорт

	Обертка = Новый ОберткаОбъектаБенчмарка(Тип("БенчмаркСОбработчикамиСобытий"));
	
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Обертка.Конфигурация());

	Параметры = Новый Массив();
	Параметры.Добавить(Обертка);

	Ожидаем.Что(Бенчмаркинг).Метод("Запустить", Параметры).Не_().ВыбрасываетИсключение();
	Ожидаем.Что(Обертка.Объект().События).ИмеетДлину(4);

КонецПроцедуры

&Тест
Процедура Тест_ПроверкаОбработчикаСобытияБезПараметров() Экспорт

	Обертка = Новый ОберткаОбъектаБенчмарка(Тип("БенчмаркСОбработчикамиСобытий"));

	Делегат = Новый Делегат(Обертка.Объект(), "ПередЗапускомБезПараметров");
	
	Конфигурация = Обертка.Конфигурация();
	Конфигурация.УстановитьОбработчикПередКаждым(Делегат);

	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Параметры = Новый Массив();
	Параметры.Добавить(Обертка);

	Бенчмаркинг.Запустить(Обертка);

	События = Обертка.Объект().События;
	Ожидаем.Что(События).Содержит("ПередЗапускомБезПараметров");
	Ожидаем.Что(События).Не_().Содержит("ПередКаждым");

КонецПроцедуры

&Тест
Процедура Тест_ПроверкаУдаленияОбработчикаСобытия() Экспорт

	Обертка = Новый ОберткаОбъектаБенчмарка(Тип("БенчмаркСОбработчикамиСобытий"));

	Конфигурация = Обертка.Конфигурация();
	Конфигурация.УстановитьОбработчикПередКаждым(Неопределено);

	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Параметры = Новый Массив();
	Параметры.Добавить(Обертка);

	Бенчмаркинг.Запустить(Обертка);

	События = Обертка.Объект().События;
	Ожидаем.Что(События).Не_().Содержит("ПередКаждым");
	Ожидаем.Что(События).ИмеетДлину(3);

КонецПроцедуры