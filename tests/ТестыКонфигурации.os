// BSLLS:DuplicateStringLiteral-off
// BSLLS:MagicNumber-off

#Использовать asserts
#Использовать "helpers"

&Тест
Процедура Тест_АннотацииКонфигурации() Экспорт
	
	Конфигурация = ИзвлекательКонфигурацииБенчмарков.Извлечь(Новый БенчмаркСАннотацямиКонфигурации());

	Ожидаем.Что(Конфигурация.Стратегия()).Равно(СтратегииЗапускаБенчмарка.ХолодныйЗапуск);
	Ожидаем.Что(Конфигурация.СортировкаОтчета()).Равно(СортировкиОтчетаБенчмарков.ОтБыстрыхКМедленным);
	Ожидаем.Что(Конфигурация.ИспользуетсяМониторингПамяти()).ЭтоИстина();
	Ожидаем.Что(Конфигурация.КоличествоИтераций()).Равно(100);
	Ожидаем.Что(Конфигурация.КоличествоВызововЗаИтерацию()).Равно(200);
	Ожидаем.Что(Конфигурация.КоличествоИтерацийПрогрева()).Равно(300);
	Ожидаем.Что(Конфигурация.МинимальноеВремяИтерации()).Равно(400);
	Ожидаем.Что(Конфигурация.МинимальноеКоличествоВызововЗаИтерацию()).Равно(500);
	Ожидаем.Что(Конфигурация.ОбработчикПередЗапуском()).Заполнено();
	Ожидаем.Что(Конфигурация.ОбработчикПослеЗапуска()).Заполнено();
	Ожидаем.Что(Конфигурация.ОбработчикИнициализации()).Заполнено();
	Ожидаем.Что(Конфигурация.ОбработчикЗавершения()).Заполнено();

КонецПроцедуры

&Тест
Процедура Тест_ПараметрыПоляЧерезАннотацию() Экспорт
	
	Объект = Новый БенчмаркСПараметрамиПоля();

	Конфигурация = ИзвлекательКонфигурацииБенчмарков.Извлечь(Объект);
	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);
	
	Результат = Бенчмаркинг.Запустить(Объект, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Отчет.Таблица[0]["Параметр_Значение"]).Равно(10);
	Ожидаем.Что(Результат.Отчет.Таблица[1]["Параметр_Значение"]).Равно(100);
	
КонецПроцедуры

&Тест
Процедура Тест_ПараметрыПоляДекларативно() Экспорт
	
	Объект = Новый БенчмаркСПараметрамиПоля();

	Конфигурация = ИзвлекательКонфигурацииБенчмарков
		.Извлечь(Объект)	
		.ОчиститьПараметры()
		.ДобавитьПараметр("Значение", 50)
		.ДобавитьПараметр("Значение", 150);

	ТестированиеБенчмарков.НастроитьКонфигурациюПодТесты(Конфигурация);

	Результат = Бенчмаркинг.Запустить(Объект, Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Отчет.Таблица[0]["Параметр_Значение"]).Равно(50);
	Ожидаем.Что(Результат.Отчет.Таблица[1]["Параметр_Значение"]).Равно(150);
	
КонецПроцедуры

&Тест
Процедура Тест_КоличествоИтераций() Экспорт
	
	КоличествоИтераций = 2;

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию();
	Конфигурация.УстановитьКоличествоИтераций(КоличествоИтераций);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.РезультатыЗапусков[0].Замеры.Количество()).Равно(КоличествоИтераций);

КонецПроцедуры

&Тест
Процедура Тест_КоличествоВызововЗаИтерацию() Экспорт
	
	КоличествоВызововЗаИтерацию = 2;

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ПропускнаяСпособность)
		.УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.РезультатыЗапусков[0].Замеры[0].КоличествоОпераций).Равно(КоличествоВызововЗаИтерацию);

КонецПроцедуры

&Тест
Процедура Тест_КоличествоИтерацийПрогрева() Экспорт
	
	КоличествоИтерацийПрогрева = 2;

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ПропускнаяСпособность)
		.УстановитьКоличествоИтерацийПрогрева(КоличествоИтерацийПрогрева);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Конфигурация.КоличествоИтерацийПрогрева()).Равно(КоличествоИтерацийПрогрева);
	
КонецПроцедуры

&Тест
Процедура Тест_МинимальноеВремяИтераци() Экспорт
	
	МинимальноеВремяИтерации = 50;
	КоличествоВызововЗаИтерацию = 0;

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ПропускнаяСпособность)
		.УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию)
		.УстановитьМинимальноеВремяИтерации(МинимальноеВремяИтерации);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Конфигурация.МинимальноеВремяИтерации()).Равно(МинимальноеВремяИтерации);

КонецПроцедуры

&Тест
Процедура Тест_МинимальноеКоличествоВызововЗаИтерацию() Экспорт
	
	КоличествоВызововЗаИтерацию = 0;
	МинимальноеКоличествоВызововЗаИтерацию = 10;

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ПропускнаяСпособность)
		.УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию)
		.УстановитьМинимальноеКоличествоВызововЗаИтерацию(МинимальноеКоличествоВызововЗаИтерацию);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();

	Ожидаем
		.Что(Результат.Конфигурация.МинимальноеКоличествоВызововЗаИтерацию())
		.Равно(МинимальноеКоличествоВызововЗаИтерацию);

КонецПроцедуры

&Тест
Процедура Тест_СтратегияПропускнаяСпособность() Экспорт

	КоличествоВызововЗаИтерацию = 2;
	
	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ПропускнаяСпособность)
		.УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.РезультатыЗапусков[0].Замеры[0].КоличествоОпераций).Равно(КоличествоВызововЗаИтерацию);

КонецПроцедуры

&Тест
Процедура Тест_СтратегияХолодныйЗапуск() Экспорт
	
	КоличествоВызововЗаИтерацию = 2;

	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию()
		.УстановитьСтратегию(СтратегииЗапускаБенчмарка.ХолодныйЗапуск)
		.УстановитьКоличествоВызововЗаИтерацию(КоличествоВызововЗаИтерацию);

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.РезультатыЗапусков[0].Замеры[0].КоличествоОпераций).Равно(1);

КонецПроцедуры

&Тест
Процедура Тест_ВалидацияКоличестваИтераций() Экспорт

	НевалидныеЗначения = Новый Массив();
	НевалидныеЗначения.Добавить(0);
	НевалидныеЗначения.Добавить(-10);

	ТекстОшибки = "Количество итераций не может быть меньше 1";
	
	Конфигурация = Новый КонфигурацияБенчмарков();

	Для Каждого НевалидноеЗначение Из НевалидныеЗначения Цикл

		Параметры = Новый Массив();
		Параметры.Добавить(НевалидноеЗначение);

		Ожидаем.Что(Конфигурация).Метод("УстановитьКоличествоИтераций", Параметры).ВыбрасываетИсключение(ТекстОшибки);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Тест_ВалидацияКоличестваВызововЗаИтерацию() Экспорт

	НевалидныеЗначения = Новый Массив();
	НевалидныеЗначения.Добавить(-10);

	ТекстОшибки = "Количество вызовов за итерацию не может быть меньше 0";
	
	Конфигурация = Новый КонфигурацияБенчмарков();

	Для Каждого НевалидноеЗначение Из НевалидныеЗначения Цикл

		Параметры = Новый Массив();
		Параметры.Добавить(НевалидноеЗначение);

		Ожидаем
			.Что(Конфигурация)
			.Метод("УстановитьКоличествоВызововЗаИтерацию", Параметры)
			.ВыбрасываетИсключение(ТекстОшибки);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Тест_ВалидацияКоличестваИтерацийПрогрева() Экспорт

	НевалидныеЗначения = Новый Массив();
	НевалидныеЗначения.Добавить(-10);

	ТекстОшибки = "Количество итераций Прогрева не может быть меньше 0";
	
	Конфигурация = Новый КонфигурацияБенчмарков();

	Для Каждого НевалидноеЗначение Из НевалидныеЗначения Цикл

		Параметры = Новый Массив();
		Параметры.Добавить(НевалидноеЗначение);

		Ожидаем
			.Что(Конфигурация)
			.Метод("УстановитьКоличествоИтерацийПрогрева", Параметры)
			.ВыбрасываетИсключение(ТекстОшибки);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Тест_ВалидацияМинимальногоВремениИтерации() Экспорт

	НевалидныеЗначения = Новый Массив();
	НевалидныеЗначения.Добавить(0);
	НевалидныеЗначения.Добавить(-10);

	ТекстОшибки = "Минимальное время итерации не может быть меньше 1 мс";
	
	Конфигурация = Новый КонфигурацияБенчмарков();

	Для Каждого НевалидноеЗначение Из НевалидныеЗначения Цикл

		Параметры = Новый Массив();
		Параметры.Добавить(НевалидноеЗначение);

		Ожидаем.Что(Конфигурация).Метод("УстановитьМинимальноеВремяИтерации", Параметры).ВыбрасываетИсключение(ТекстОшибки);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Тест_ВалидацияМинимальногоКоличестваВызововЗаИтерацию() Экспорт

	НевалидныеЗначения = Новый Массив();
	НевалидныеЗначения.Добавить(0);
	НевалидныеЗначения.Добавить(-10);

	ТекстОшибки = "Минимальное количество вызовов за итерацию не может быть меньше 1";
	
	Конфигурация = Новый КонфигурацияБенчмарков();

	Для Каждого НевалидноеЗначение Из НевалидныеЗначения Цикл

		Параметры = Новый Массив();
		Параметры.Добавить(НевалидноеЗначение);

		Ожидаем
			.Что(Конфигурация)
			.Метод("УстановитьМинимальноеКоличествоВызововЗаИтерацию", Параметры)
			.ВыбрасываетИсключение(ТекстОшибки);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Тест_МониторингПамятиДекларативно() Экспорт
	
	Конфигурация = ТестированиеБенчмарков.КонфигурацияПоУмолчанию();
	Конфигурация.ДобавитьМониторингПамяти();

	Результат = Бенчмаркинг.Запустить(Тип("ПустойБенчмарк"), Конфигурация);

	Ожидаем.Что(Результат.Отчет.Таблица).Заполнено();
	Ожидаем.Что(Результат.Отчет.Таблица[0]["ВыделяемаяПамять"]).Заполнено();
	Ожидаем.Что(Результат.Конфигурация.ИспользуетсяМониторингПамяти()).ЭтоИстина();
	
КонецПроцедуры

&Тест
Процедура Тест_ВалидацияКоличестваПараметровОбработчикаПередЗапуском() Экспорт

	Параметры = Новый Массив();
	Параметры.Добавить(Новый БенчмаркСНевалиднымОбработчикомПередЗапуском());

	Ожидаем
		.Что(ИзвлекательКонфигурацииБенчмарков)
		.Метод("Извлечь", Параметры)
		.ВыбрасываетИсключение("Метод ПередЗапуском должен принимать 2 параметр(а)");

КонецПроцедуры

&Тест
Процедура Тест_ВалидацияКоличестваПараметровОбработчикаПослеЗапуска() Экспорт

	Параметры = Новый Массив();
	Параметры.Добавить(Новый БенчмаркСНевалиднымОбработчикомПослеЗапуска());

	Ожидаем
		.Что(ИзвлекательКонфигурацииБенчмарков)
		.Метод("Извлечь", Параметры)
		.ВыбрасываетИсключение("Метод ПослеЗапуска должен принимать 1 параметр(а)");

КонецПроцедуры

&Тест
Процедура Тест_ВалидацияКоличестваПараметровОбработчикаИнициализации() Экспорт

	Параметры = Новый Массив();
	Параметры.Добавить(Новый БенчмаркСНевалиднымОбработчикомИнициализации());

	Ожидаем
		.Что(ИзвлекательКонфигурацииБенчмарков)
		.Метод("Извлечь", Параметры)
		.ВыбрасываетИсключение("Метод Инициализация должен принимать 1 параметр(а)");

КонецПроцедуры

&Тест
Процедура Тест_ВалидацияКоличестваПараметровОбработчикаЗавершения() Экспорт

	Параметры = Новый Массив();
	Параметры.Добавить(Новый БенчмаркСНевалиднымОбработчикомЗавершения());

	Ожидаем
		.Что(ИзвлекательКонфигурацииБенчмарков)
		.Метод("Извлечь", Параметры)
		.ВыбрасываетИсключение("Метод Завершение не должен принимать параметры");

КонецПроцедуры