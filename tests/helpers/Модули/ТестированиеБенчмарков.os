#Использовать "../../.."
#Использовать "../../fixtures"
#Использовать fs
#Использовать 1commands

Перем _Лог; // Лог

Функция КонфигурацияПоУмолчанию() Экспорт

	Конфигурация = Новый КонфигурацияБенчмарков();
	НастроитьКонфигурациюПодТесты(Конфигурация);

	Возврат Конфигурация;

КонецФункции

Процедура НастроитьКонфигурациюПодТесты(Конфигурация) Экспорт

	МинимальноеВремяИтерации = 10;

	Конфигурация
		.УстановитьКоличествоВызововЗаИтерацию(1)
		.УстановитьКоличествоПрогревочныхИтераций(1)
		.УстановитьКоличествоИтераций(1)
		.УстановитьМинимальноеВремяИтерации(МинимальноеВремяИтерации);

КонецПроцедуры

Процедура ОбработчикПослеКаждого_УстановкаВремени(Контекст) Экспорт

	Задержка = Неопределено;
	Для Каждого Параметр Из Контекст.Параметры Цикл
		Если Параметр.Имя = "Задержка" Тогда
			Задержка = Параметр.Значение;
		КонецЕсли;
	КонецЦикла;

	Если Задержка = Неопределено Тогда
		Задержка = 1;
	КонецЕсли;

	Задержка = Задержка * ЕдиницыИзмеренийБенчмарков.Миллисекунда.ОтношениеКБазовой;

	Для Каждого СтрокаТаблицы Из Контекст.Замеры Цикл
		Если СтрокаТаблицы.Этап = ЭтапыБенчмарка.Измерение Тогда
			СтрокаТаблицы.НаносекундЗаОперацию = Задержка;
			СтрокаТаблицы.Наносекунд = Задержка * СтрокаТаблицы.КоличествоОпераций;
		КонецЕсли;
	КонецЦикла;

	Контекст.Статистика.Прочитать(Контекст.Замеры);

КонецПроцедуры

Процедура ОбработчикПослеВсех_УстановкаМокСредыОкружения(Контекст) Экспорт
	
	Контекст.СредаОкружения.ВерсияБиблиотеки = "0.1.x-mock";
	Контекст.СредаОкружения.ВерсияОС = "Microsoft Windows NT 10.0.x.mock";
	Контекст.СредаОкружения.ВерсияИсполняющейСреды = "2.0.0-mock";
	Контекст.СредаОкружения.ИнформацияОПроцессоре.ИмяПроцессора = "MockIntel Core i7-6700HQ CPU 2.60GHz";
	Контекст.СредаОкружения.ИнформацияОПроцессоре.КоличествоПроцессоров = 1;
	Контекст.СредаОкружения.ИнформацияОПроцессоре.КоличествоЯдер = 4;
	Контекст.СредаОкружения.ИнформацияОПроцессоре.КоличествоЛогическихПроцессоров = 8;
	Контекст.СредаОкружения.ИнформацияОПроцессоре.НоминальнаяЧастота =  3100000000;

	ПостроительОтчета = Новый ПостроительОтчетаБенчмарков(
		Контекст.ДескрипторыБенчмарков,
		Контекст.Конфигурация,
		Контекст.Расшифровка
	);

	Контекст.Отчет = ПостроительОтчета.Сформировать();

КонецПроцедуры

Процедура ПодготовитьСреду(ВерсииИсполняющейСреды) Экспорт

	ПроверитьУстановитьВерсииИсполняющейСреды(ВерсииИсполняющейСреды);

КонецПроцедуры

Процедура ПроверитьУстановитьВерсииИсполняющейСреды(Версии)
	
	КаталогУстановки = ИсполняющаяСредаБенчмарков.КаталогУстановки();
	Если КаталогУстановки = Неопределено Тогда
		ВызватьИсключение "Не найден каталог с установленными версиями OneScript.
		|Убедитесь, что OVM (OneScript Version Manager) установлен и переменная OVM_INSTALL_PATH настроена корректно.";
	КонецЕсли;

	_Лог.Отладка(СтрШаблон("Каталог с установленными версиями OneScript: %1", КаталогУстановки));
	_Лог.Отладка(СтрШаблон("Проверка установленных версий: %1", Версии));

	Для Каждого Версия Из СтрРазделить(Версии, ", ") Цикл
		
		ИмяФайла = ИсполняющаяСредаБенчмарков.НайтиИсполняемыйФайл(Версия);
		Если Не ИмяФайла = Неопределено Тогда
			_Лог.Отладка(СтрШаблон("Обнаружена %1 версия OneScript: %2", Версия, ИмяФайла));
			Продолжить;
		КонецЕсли;

		Команда = Новый Команда();
		Команда.УстановитьКоманду("ovm");
		Команда.ДобавитьПараметр("install");
		Команда.ДобавитьПараметр(Версия);

		КодВозврата = Команда.Исполнить();
		Если КодВозврата <> 0 Тогда
			ТекстОшибки = СтрШаблон("Не удалось установить OneScript версии %1 через OVM (OneScript Version Manager)", Версия);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

		ИмяФайла = ИсполняющаяСредаБенчмарков.НайтиИсполняемыйФайл(Версия);
		Если ИмяФайла = Неопределено Тогда
			ВызватьИсключение СтрШаблон("После установки OneScript версии %1 не удалось найти исполняемый файл", Версия);
		КонецЕсли;

		_Лог.Отладка(СтрШаблон("Установлена %1 версия OneScript: %2", Версия, ИмяФайла));

	КонецЦикла;

КонецПроцедуры

_Лог = Логирование.ПолучитьЛог("oscript.lib.benchmark.ТестированиеБенчмарков");