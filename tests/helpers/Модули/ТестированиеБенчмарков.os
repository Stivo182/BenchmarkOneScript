#Использовать "../../.."
#Использовать "../../fixtures"
#Использовать fs
#Использовать 1commands

Функция КонфигурацияПоУмолчанию() Экспорт

	Конфигурация = Новый КонфигурацияБенчмарков();
	НастроитьКонфигурациюПодТесты(Конфигурация);

	Возврат Конфигурация;

КонецФункции

Процедура НастроитьКонфигурациюПодТесты(Конфигурация) Экспорт

	МинимальноеВремяИтерации = 10;

	Конфигурация
		.УстановитьКоличествоВызововЗаИтерацию(1)
		.УстановитьКоличествоПрогревочныхИтераций(1)
		.УстановитьКоличествоИтераций(1)
		.УстановитьМинимальноеВремяИтерации(МинимальноеВремяИтерации);

КонецПроцедуры

Процедура ОбработчикПослеКаждого_УстановкаВремени(Контекст) Экспорт

	Задержка = Неопределено;
	Для Каждого Параметр Из Контекст.Параметры Цикл
		Если Параметр.Имя = "Задержка" Тогда
			Задержка = Параметр.Значение;
		КонецЕсли;
	КонецЦикла;

	Если Задержка = Неопределено Тогда
		Задержка = 1;
	КонецЕсли;

	Задержка = Задержка * ЕдиницыИзмеренийБенчмарков.Миллисекунда.ОтношениеКБазовой;

	Для Каждого СтрокаТаблицы Из Контекст.Замеры Цикл
		Если СтрокаТаблицы.Этап = ЭтапыБенчмарка.Измерение Тогда
			СтрокаТаблицы.НаносекундЗаОперацию = Задержка;
			СтрокаТаблицы.Наносекунд = Задержка * СтрокаТаблицы.КоличествоОпераций;
		КонецЕсли;
	КонецЦикла;

	Контекст.Статистика.Прочитать(Контекст.Замеры);

КонецПроцедуры

Процедура ОбработчикПослеВсех_УстановкаМокСредыОкружения(Контекст) Экспорт
	
	Контекст.СредаОкружения.ВерсияБиблиотеки = "0.1.x-mock";
	Контекст.СредаОкружения.ВерсияОС = "Microsoft Windows NT 10.0.x.mock";
	Контекст.СредаОкружения.ВерсияИсполняющейСреды = "2.0.0-mock";
	Контекст.СредаОкружения.ИнформацияОПроцессоре.ИмяПроцессора = "MockIntel Core i7-6700HQ CPU 2.60GHz";
	Контекст.СредаОкружения.ИнформацияОПроцессоре.КоличествоПроцессоров = 1;
	Контекст.СредаОкружения.ИнформацияОПроцессоре.КоличествоЯдер = 4;
	Контекст.СредаОкружения.ИнформацияОПроцессоре.КоличествоЛогическихПроцессоров = 8;
	Контекст.СредаОкружения.ИнформацияОПроцессоре.НоминальнаяЧастота =  3100000000;

	ПостроительОтчета = Новый ПостроительОтчетаБенчмарков(
		Контекст.ДескрипторыБенчмарков,
		Контекст.Конфигурация,
		Контекст.Расшифровка
	);

	Контекст.Отчет = ПостроительОтчета.Сформировать();

КонецПроцедуры

Процедура ПодготовитьСреду(ВерсииИсполняющейСреды) Экспорт

	ПроверитьУстановитьВерсииИсполняющейСреды(ВерсииИсполняющейСреды);
	ПроверитьСоздатьКонфигурационныйФайлВТочкеВходаCLI();

КонецПроцедуры

Процедура ПроверитьУстановитьВерсииИсполняющейСреды(Версии)
	
	КаталогOVM = ПолучитьПеременнуюСреды("OVM_INSTALL_PATH");
	Если НЕ ЗначениеЗаполнено(КаталогOVM) Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		КаталогOVM = ОбъединитьПути(
			СистемнаяИнформация.ПолучитьПутьПапки(СпециальнаяПапка.ЛокальныйКаталогДанныхПриложений),
			"ovm"
		);
	КонецЕсли;

	Если Не ФС.КаталогСуществует(КаталогOVM) Тогда
		ВызватьИсключение "Не найден каталог с установленными версиями OneScript";
	КонецЕсли;
	
	Для Каждого Версия Из СтрРазделить(Версии, ", ") Цикл
		КаталогВерсии = ОбъединитьПути(КаталогOVM, Версия);
		Если ФС.КаталогСуществует(КаталогВерсии) Тогда
			Возврат;
		КонецЕсли;

		Команда = Новый Команда();
		Команда.УстановитьКоманду("ovm");
		Команда.ДобавитьПараметр("install");
		Команда.ДобавитьПараметр(Версия);

		КодВозврата = Команда.Исполнить();
		Если КодВозврата <> 0 Тогда
			ВызватьИсключение СтрШаблон("Не удалось утсановить OneScript версии %1 через OVM", Версия);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьСоздатьКонфигурационныйФайлВТочкеВходаCLI()

	КорневойКаталог = ОбъединитьПути(ТекущийСценарий().Каталог, "../../..");
	ИмяФайла = ОбъединитьПути(КорневойКаталог, "src/BenchmarkOneScript/cmd/oscript.cfg");

	Если ФС.ФайлСуществует(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;

	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, "UTF-8");
	ЗаписьТекста.Записать("lib.system=../../../oscript_modules");
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры